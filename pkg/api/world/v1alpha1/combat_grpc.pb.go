// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/api/world/v1alpha1/combat.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Combat_CombatInteract_FullMethodName = "/shikanime.elkia.world.v1alpha1.Combat/CombatInteract"
)

// CombatClient is the client API for Combat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CombatClient interface {
	// CombatInteract is a bi-directional stream that is used to interact with the
	// auth server
	CombatInteract(ctx context.Context, opts ...grpc.CallOption) (Combat_CombatInteractClient, error)
}

type combatClient struct {
	cc grpc.ClientConnInterface
}

func NewCombatClient(cc grpc.ClientConnInterface) CombatClient {
	return &combatClient{cc}
}

func (c *combatClient) CombatInteract(ctx context.Context, opts ...grpc.CallOption) (Combat_CombatInteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &Combat_ServiceDesc.Streams[0], Combat_CombatInteract_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &combatCombatInteractClient{stream}
	return x, nil
}

type Combat_CombatInteractClient interface {
	Send(*CombatInteractRequest) error
	Recv() (*CombatEvent, error)
	grpc.ClientStream
}

type combatCombatInteractClient struct {
	grpc.ClientStream
}

func (x *combatCombatInteractClient) Send(m *CombatInteractRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *combatCombatInteractClient) Recv() (*CombatEvent, error) {
	m := new(CombatEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CombatServer is the server API for Combat service.
// All implementations must embed UnimplementedCombatServer
// for forward compatibility
type CombatServer interface {
	// CombatInteract is a bi-directional stream that is used to interact with the
	// auth server
	CombatInteract(Combat_CombatInteractServer) error
	mustEmbedUnimplementedCombatServer()
}

// UnimplementedCombatServer must be embedded to have forward compatible implementations.
type UnimplementedCombatServer struct {
}

func (UnimplementedCombatServer) CombatInteract(Combat_CombatInteractServer) error {
	return status.Errorf(codes.Unimplemented, "method CombatInteract not implemented")
}
func (UnimplementedCombatServer) mustEmbedUnimplementedCombatServer() {}

// UnsafeCombatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CombatServer will
// result in compilation errors.
type UnsafeCombatServer interface {
	mustEmbedUnimplementedCombatServer()
}

func RegisterCombatServer(s grpc.ServiceRegistrar, srv CombatServer) {
	s.RegisterService(&Combat_ServiceDesc, srv)
}

func _Combat_CombatInteract_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CombatServer).CombatInteract(&combatCombatInteractServer{stream})
}

type Combat_CombatInteractServer interface {
	Send(*CombatEvent) error
	Recv() (*CombatInteractRequest, error)
	grpc.ServerStream
}

type combatCombatInteractServer struct {
	grpc.ServerStream
}

func (x *combatCombatInteractServer) Send(m *CombatEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *combatCombatInteractServer) Recv() (*CombatInteractRequest, error) {
	m := new(CombatInteractRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Combat_ServiceDesc is the grpc.ServiceDesc for Combat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Combat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shikanime.elkia.world.v1alpha1.Combat",
	HandlerType: (*CombatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CombatInteract",
			Handler:       _Combat_CombatInteract_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/world/v1alpha1/combat.proto",
}
