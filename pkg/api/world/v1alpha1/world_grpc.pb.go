// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/api/world/v1alpha1/world.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BridgeClient is the client API for Bridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeClient interface {
	// CharacterAdd adds a new character to the world.
	CharacterAdd(ctx context.Context, in *CharacterAddRequest, opts ...grpc.CallOption) (*CharacterAddResponse, error)
	// CharacterRemove removes an existing character from the world.
	CharacterRemove(ctx context.Context, in *CharacterRemoveRequest, opts ...grpc.CallOption) (*CharacterRemoveResponse, error)
	// CharacterUpdate updates an existing character in the world.
	CharacterUpdate(ctx context.Context, in *CharacterUpdateRequest, opts ...grpc.CallOption) (*CharacterUpdateResponse, error)
	// CharacterList lists all characters in the world.
	CharacterList(ctx context.Context, in *CharacterListRequest, opts ...grpc.CallOption) (*CharacterListResponse, error)
}

type bridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeClient(cc grpc.ClientConnInterface) BridgeClient {
	return &bridgeClient{cc}
}

func (c *bridgeClient) CharacterAdd(ctx context.Context, in *CharacterAddRequest, opts ...grpc.CallOption) (*CharacterAddResponse, error) {
	out := new(CharacterAddResponse)
	err := c.cc.Invoke(ctx, "/io.elkia.world.v1alpha1.Bridge/CharacterAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) CharacterRemove(ctx context.Context, in *CharacterRemoveRequest, opts ...grpc.CallOption) (*CharacterRemoveResponse, error) {
	out := new(CharacterRemoveResponse)
	err := c.cc.Invoke(ctx, "/io.elkia.world.v1alpha1.Bridge/CharacterRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) CharacterUpdate(ctx context.Context, in *CharacterUpdateRequest, opts ...grpc.CallOption) (*CharacterUpdateResponse, error) {
	out := new(CharacterUpdateResponse)
	err := c.cc.Invoke(ctx, "/io.elkia.world.v1alpha1.Bridge/CharacterUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) CharacterList(ctx context.Context, in *CharacterListRequest, opts ...grpc.CallOption) (*CharacterListResponse, error) {
	out := new(CharacterListResponse)
	err := c.cc.Invoke(ctx, "/io.elkia.world.v1alpha1.Bridge/CharacterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeServer is the server API for Bridge service.
// All implementations must embed UnimplementedBridgeServer
// for forward compatibility
type BridgeServer interface {
	// CharacterAdd adds a new character to the world.
	CharacterAdd(context.Context, *CharacterAddRequest) (*CharacterAddResponse, error)
	// CharacterRemove removes an existing character from the world.
	CharacterRemove(context.Context, *CharacterRemoveRequest) (*CharacterRemoveResponse, error)
	// CharacterUpdate updates an existing character in the world.
	CharacterUpdate(context.Context, *CharacterUpdateRequest) (*CharacterUpdateResponse, error)
	// CharacterList lists all characters in the world.
	CharacterList(context.Context, *CharacterListRequest) (*CharacterListResponse, error)
	mustEmbedUnimplementedBridgeServer()
}

// UnimplementedBridgeServer must be embedded to have forward compatible implementations.
type UnimplementedBridgeServer struct {
}

func (UnimplementedBridgeServer) CharacterAdd(context.Context, *CharacterAddRequest) (*CharacterAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterAdd not implemented")
}
func (UnimplementedBridgeServer) CharacterRemove(context.Context, *CharacterRemoveRequest) (*CharacterRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterRemove not implemented")
}
func (UnimplementedBridgeServer) CharacterUpdate(context.Context, *CharacterUpdateRequest) (*CharacterUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterUpdate not implemented")
}
func (UnimplementedBridgeServer) CharacterList(context.Context, *CharacterListRequest) (*CharacterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterList not implemented")
}
func (UnimplementedBridgeServer) mustEmbedUnimplementedBridgeServer() {}

// UnsafeBridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeServer will
// result in compilation errors.
type UnsafeBridgeServer interface {
	mustEmbedUnimplementedBridgeServer()
}

func RegisterBridgeServer(s grpc.ServiceRegistrar, srv BridgeServer) {
	s.RegisterService(&Bridge_ServiceDesc, srv)
}

func _Bridge_CharacterAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).CharacterAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.elkia.world.v1alpha1.Bridge/CharacterAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).CharacterAdd(ctx, req.(*CharacterAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_CharacterRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).CharacterRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.elkia.world.v1alpha1.Bridge/CharacterRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).CharacterRemove(ctx, req.(*CharacterRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_CharacterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).CharacterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.elkia.world.v1alpha1.Bridge/CharacterUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).CharacterUpdate(ctx, req.(*CharacterUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_CharacterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).CharacterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.elkia.world.v1alpha1.Bridge/CharacterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).CharacterList(ctx, req.(*CharacterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bridge_ServiceDesc is the grpc.ServiceDesc for Bridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.elkia.world.v1alpha1.Bridge",
	HandlerType: (*BridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CharacterAdd",
			Handler:    _Bridge_CharacterAdd_Handler,
		},
		{
			MethodName: "CharacterRemove",
			Handler:    _Bridge_CharacterRemove_Handler,
		},
		{
			MethodName: "CharacterUpdate",
			Handler:    _Bridge_CharacterUpdate_Handler,
		},
		{
			MethodName: "CharacterList",
			Handler:    _Bridge_CharacterList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/world/v1alpha1/world.proto",
}
