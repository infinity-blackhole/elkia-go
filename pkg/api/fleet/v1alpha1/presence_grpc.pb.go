// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/api/fleet/v1alpha1/presence.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Presence_PresenceInteract_FullMethodName    = "/shikanime.elkia.fleet.v1alpha1.Presence/PresenceInteract"
	Presence_CreateHandoffFlow_FullMethodName   = "/shikanime.elkia.fleet.v1alpha1.Presence/CreateHandoffFlow"
	Presence_CompleteHandoffFlow_FullMethodName = "/shikanime.elkia.fleet.v1alpha1.Presence/CompleteHandoffFlow"
	Presence_Login_FullMethodName               = "/shikanime.elkia.fleet.v1alpha1.Presence/Login"
	Presence_RefreshLogin_FullMethodName        = "/shikanime.elkia.fleet.v1alpha1.Presence/RefreshLogin"
	Presence_WhoAmI_FullMethodName              = "/shikanime.elkia.fleet.v1alpha1.Presence/WhoAmI"
	Presence_Logout_FullMethodName              = "/shikanime.elkia.fleet.v1alpha1.Presence/Logout"
)

// PresenceClient is the client API for Presence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresenceClient interface {
	// PresenceInteract is a bi-directional stream that is used to interact with
	// the channel server
	PresenceInteract(ctx context.Context, opts ...grpc.CallOption) (Presence_PresenceInteractClient, error)
	// CreateHandoffFlow creates a handoff flow with a given identifier and
	// password.
	CreateHandoffFlow(ctx context.Context, in *CreateHandoffFlowRequest, opts ...grpc.CallOption) (*CreateHandoffFlowResponse, error)
	// CompleteHandoffFlow hands off a session to a gateway with a given token and
	// code.
	CompleteHandoffFlow(ctx context.Context, in *CompleteHandoffFlowRequest, opts ...grpc.CallOption) (*CompleteHandoffFlowResponse, error)
	// Login hands off a session to a gateway with a given token and
	// code.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// RefreshLogin authenticates a gateway with a given identifier, password, and
	// token.
	RefreshLogin(ctx context.Context, in *RefreshLoginRequest, opts ...grpc.CallOption) (*RefreshLoginResponse, error)
	// WhoAmI returns the session associated with a given token.
	WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error)
	// Logout logs out a session with a given code.
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type presenceClient struct {
	cc grpc.ClientConnInterface
}

func NewPresenceClient(cc grpc.ClientConnInterface) PresenceClient {
	return &presenceClient{cc}
}

func (c *presenceClient) PresenceInteract(ctx context.Context, opts ...grpc.CallOption) (Presence_PresenceInteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &Presence_ServiceDesc.Streams[0], Presence_PresenceInteract_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &presencePresenceInteractClient{stream}
	return x, nil
}

type Presence_PresenceInteractClient interface {
	Send(*PresenceCommand) error
	Recv() (*PresenceEvent, error)
	grpc.ClientStream
}

type presencePresenceInteractClient struct {
	grpc.ClientStream
}

func (x *presencePresenceInteractClient) Send(m *PresenceCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *presencePresenceInteractClient) Recv() (*PresenceEvent, error) {
	m := new(PresenceEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *presenceClient) CreateHandoffFlow(ctx context.Context, in *CreateHandoffFlowRequest, opts ...grpc.CallOption) (*CreateHandoffFlowResponse, error) {
	out := new(CreateHandoffFlowResponse)
	err := c.cc.Invoke(ctx, Presence_CreateHandoffFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceClient) CompleteHandoffFlow(ctx context.Context, in *CompleteHandoffFlowRequest, opts ...grpc.CallOption) (*CompleteHandoffFlowResponse, error) {
	out := new(CompleteHandoffFlowResponse)
	err := c.cc.Invoke(ctx, Presence_CompleteHandoffFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Presence_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceClient) RefreshLogin(ctx context.Context, in *RefreshLoginRequest, opts ...grpc.CallOption) (*RefreshLoginResponse, error) {
	out := new(RefreshLoginResponse)
	err := c.cc.Invoke(ctx, Presence_RefreshLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceClient) WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error) {
	out := new(WhoAmIResponse)
	err := c.cc.Invoke(ctx, Presence_WhoAmI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Presence_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresenceServer is the server API for Presence service.
// All implementations must embed UnimplementedPresenceServer
// for forward compatibility
type PresenceServer interface {
	// PresenceInteract is a bi-directional stream that is used to interact with
	// the channel server
	PresenceInteract(Presence_PresenceInteractServer) error
	// CreateHandoffFlow creates a handoff flow with a given identifier and
	// password.
	CreateHandoffFlow(context.Context, *CreateHandoffFlowRequest) (*CreateHandoffFlowResponse, error)
	// CompleteHandoffFlow hands off a session to a gateway with a given token and
	// code.
	CompleteHandoffFlow(context.Context, *CompleteHandoffFlowRequest) (*CompleteHandoffFlowResponse, error)
	// Login hands off a session to a gateway with a given token and
	// code.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// RefreshLogin authenticates a gateway with a given identifier, password, and
	// token.
	RefreshLogin(context.Context, *RefreshLoginRequest) (*RefreshLoginResponse, error)
	// WhoAmI returns the session associated with a given token.
	WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error)
	// Logout logs out a session with a given code.
	Logout(context.Context, *LogoutRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPresenceServer()
}

// UnimplementedPresenceServer must be embedded to have forward compatible implementations.
type UnimplementedPresenceServer struct {
}

func (UnimplementedPresenceServer) PresenceInteract(Presence_PresenceInteractServer) error {
	return status.Errorf(codes.Unimplemented, "method PresenceInteract not implemented")
}
func (UnimplementedPresenceServer) CreateHandoffFlow(context.Context, *CreateHandoffFlowRequest) (*CreateHandoffFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHandoffFlow not implemented")
}
func (UnimplementedPresenceServer) CompleteHandoffFlow(context.Context, *CompleteHandoffFlowRequest) (*CompleteHandoffFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteHandoffFlow not implemented")
}
func (UnimplementedPresenceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPresenceServer) RefreshLogin(context.Context, *RefreshLoginRequest) (*RefreshLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshLogin not implemented")
}
func (UnimplementedPresenceServer) WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedPresenceServer) Logout(context.Context, *LogoutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedPresenceServer) mustEmbedUnimplementedPresenceServer() {}

// UnsafePresenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresenceServer will
// result in compilation errors.
type UnsafePresenceServer interface {
	mustEmbedUnimplementedPresenceServer()
}

func RegisterPresenceServer(s grpc.ServiceRegistrar, srv PresenceServer) {
	s.RegisterService(&Presence_ServiceDesc, srv)
}

func _Presence_PresenceInteract_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PresenceServer).PresenceInteract(&presencePresenceInteractServer{stream})
}

type Presence_PresenceInteractServer interface {
	Send(*PresenceEvent) error
	Recv() (*PresenceCommand, error)
	grpc.ServerStream
}

type presencePresenceInteractServer struct {
	grpc.ServerStream
}

func (x *presencePresenceInteractServer) Send(m *PresenceEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *presencePresenceInteractServer) Recv() (*PresenceCommand, error) {
	m := new(PresenceCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Presence_CreateHandoffFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHandoffFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).CreateHandoffFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presence_CreateHandoffFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).CreateHandoffFlow(ctx, req.(*CreateHandoffFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presence_CompleteHandoffFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteHandoffFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).CompleteHandoffFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presence_CompleteHandoffFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).CompleteHandoffFlow(ctx, req.(*CompleteHandoffFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presence_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presence_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presence_RefreshLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).RefreshLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presence_RefreshLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).RefreshLogin(ctx, req.(*RefreshLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presence_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presence_WhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).WhoAmI(ctx, req.(*WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presence_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presence_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Presence_ServiceDesc is the grpc.ServiceDesc for Presence service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Presence_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shikanime.elkia.fleet.v1alpha1.Presence",
	HandlerType: (*PresenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHandoffFlow",
			Handler:    _Presence_CreateHandoffFlow_Handler,
		},
		{
			MethodName: "CompleteHandoffFlow",
			Handler:    _Presence_CompleteHandoffFlow_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Presence_Login_Handler,
		},
		{
			MethodName: "RefreshLogin",
			Handler:    _Presence_RefreshLogin_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _Presence_WhoAmI_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Presence_Logout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PresenceInteract",
			Handler:       _Presence_PresenceInteract_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/fleet/v1alpha1/presence.proto",
}
