syntax = "proto3";
package shikanime.elkia.fleet.v1alpha1;

option go_package = "go.shikanime.studio/elkia/pkg/fleet/world/v1alpha1";

message Member {
  string id = 1;
  uint32 world_id = 2;
  uint32 channel_id = 3;
  string name = 4;
  repeated string addresses = 5;
  uint32 population = 6;
  uint32 capacity = 7;
}

message MemberAddRequest {
  string id = 1;
  uint32 world_id = 2;
  uint32 channel_id = 3;
  string name = 4;
  repeated string addresses = 5;
  uint32 population = 6;
  uint32 capacity = 7;
}

message MemberAddResponse {}

message MemberRemoveRequest { string id = 1; }

message MemberRemoveResponse {}

message MemberUpdateRequest {
  string id = 1;
  optional uint32 world_id = 2;
  optional uint32 channel_id = 3;
  optional string name = 4;
  repeated string addresses = 5;
  optional uint32 population = 6;
  optional uint32 capacity = 7;
}

message MemberUpdateResponse {}

message MemberListRequest {}

message MemberListResponse { repeated Member members = 1; }

service Cluster {
  // MemberAdd adds a member into the cluster.
  rpc MemberAdd(MemberAddRequest) returns (MemberAddResponse);

  // MemberRemove removes an existing member from the cluster.
  rpc MemberRemove(MemberRemoveRequest) returns (MemberRemoveResponse);

  // MemberUpdate updates the member configuration.
  rpc MemberUpdate(MemberUpdateRequest) returns (MemberUpdateResponse);

  // MemberList lists all the members in the cluster.
  rpc MemberList(MemberListRequest) returns (MemberListResponse);
}

message CreateLoginFlowRequest {
  string identifier = 1;
  string password = 2;
}

message CreateLoginFlowResponse { uint32 code = 1; }

message RefreshLoginRequest {
  string identifier = 1;
  string password = 2;
  string token = 3;
}

message RefreshLoginResponse { string token = 1; }

message SubmitLoginFlowRequest {
  uint32 code = 1;
  string identifier = 2;
  string password = 3;
}

message SubmitLoginFlowResponse {
  string token = 1;
}

message ClaimLoginFlowRequest {
  uint32 code = 1;
  string identifier = 2;
  string password = 3;
  string token = 4;
}

message ClaimLoginFlowResponse {
  string token = 1;
}

message LoginRequest {
  string identifier = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
}

message WhoAmIRequest { string token = 1; }

message WhoAmIResponse {
  string id = 1;
  string identity_id = 2;
}

message LogoutRequest { string token = 1; }

message LogoutResponse {}

message SessionHandoff {
  string token = 1;
}

message SessionOnline {
  string token = 1;
}

message Session {
  oneof state {
    SessionHandoff handoff = 1;
    SessionOnline online = 2;
  }
}

message GetSessionRequest { uint32 code = 1; }

message GetSessionResponse { Session session = 1; }

message PutSessionRequest { uint32 code = 1; Session session = 2; }

message PutSessionResponse { }

message DeleteSessionRequest { uint32 code = 1; }

message DeleteSessionResponse {}

service Presence {
  // CreateLoginFlow creates a handoff flow with a given identifier and
  // password.
  rpc CreateLoginFlow(CreateLoginFlowRequest) returns (CreateLoginFlowResponse);

  // SubmitLoginFlow hands off a session to a gateway with a given token and
  // code.
  rpc SubmitLoginFlow(SubmitLoginFlowRequest) returns (SubmitLoginFlowResponse);

  // ClaimLoginFlow authenticates a gateway with a given identifier, password,
  // and token.
  rpc ClaimLoginFlow(ClaimLoginFlowRequest) returns (ClaimLoginFlowResponse);
}

service IdentityManager {
  // Login hands off a session to a gateway with a given token and
  // code.
  rpc Login(LoginRequest) returns (LoginResponse);

  // RefreshLogin authenticates a gateway with a given identifier, password, and
  // token.
  rpc RefreshLogin(RefreshLoginRequest)
      returns (RefreshLoginResponse);

  // WhoAmI returns the session associated with a given token.
  rpc WhoAmI(WhoAmIRequest) returns (WhoAmIResponse);

  // Logout logs out a session with a given code.
  rpc Logout(LogoutRequest) returns (LogoutResponse);
}

service SessionManager {
  // GetSession gets a session with a given code.
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);

  // PutSession creates a session with a given identifier and token.
  rpc PutSession(PutSessionRequest) returns (PutSessionResponse);

  // DeleteSession Deletes a session with a given code.
  rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse);
}
