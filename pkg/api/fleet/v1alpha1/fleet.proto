syntax = "proto3";
package shikanime.elkia.fleet.v1alpha1;

option go_package = "pkg/api/fleet/v1alpha1";

message Member {
  string id = 1;
  uint32 world_id = 2;
  uint32 channel_id = 3;
  string name = 4;
  repeated string addresses = 5;
  uint32 population = 6;
  uint32 capacity = 7;
}

message MemberAddRequest {
  string id = 1;
  uint32 world_id = 2;
  uint32 channel_id = 3;
  string name = 4;
  repeated string addresses = 5;
  uint32 population = 6;
  uint32 capacity = 7;
}

message MemberAddResponse {}

message MemberRemoveRequest { string id = 1; }

message MemberRemoveResponse {}

message MemberUpdateRequest {
  string id = 1;
  optional uint32 world_id = 2;
  optional uint32 channel_id = 3;
  optional string name = 4;
  repeated string addresses = 5;
  optional uint32 population = 6;
  optional uint32 capacity = 7;
}

message MemberUpdateResponse {}

message MemberListRequest {}

message MemberListResponse { repeated Member members = 1; }

service Cluster {
  // MemberAdd adds a member into the cluster.
  rpc MemberAdd(MemberAddRequest) returns (MemberAddResponse);

  // MemberRemove removes an existing member from the cluster.
  rpc MemberRemove(MemberRemoveRequest) returns (MemberRemoveResponse);

  // MemberUpdate updates the member configuration.
  rpc MemberUpdate(MemberUpdateRequest) returns (MemberUpdateResponse);

  // MemberList lists all the members in the cluster.
  rpc MemberList(MemberListRequest) returns (MemberListResponse);
}

message AuthCreateHandoffFlowRequest {
  string identifier = 1;
  string password = 2;
}

message AuthCreateHandoffFlowResponse { uint32 code = 1; }

message AuthRefreshLoginRequest {
  string identifier = 1;
  string password = 2;
  string token = 3;
}

message AuthRefreshLoginResponse { string token = 1; }

message AuthCompleteHandoffFlowRequest {
  string identifier = 1;
  string password = 2;
}

message AuthCompleteHandoffFlowResponse {
  string token = 1;
}

message AuthLoginRequest {
  string identifier = 1;
  string password = 2;
}

message AuthLoginResponse {
  string token = 1;
}

message AuthWhoAmIRequest { string token = 1; }

message AuthWhoAmIResponse {
  string id = 1;
  string identity_id = 2;
}

message AuthLogoutRequest { uint32 code = 1; }

message AuthLogoutResponse {}

message Session {
  string token = 1;
}

message SessionGetRequest { uint32 code = 1; }

message SessionGetResponse { Session session = 1; }

message SessionPutRequest { uint32 code = 1; Session session = 2; }

message SessionPutResponse { uint32 code = 1; }

message SessionDeleteRequest { uint32 code = 1; }

message SessionDeleteResponse {}

service Presence {
  // AuthCreateHandoffFlow creates a handoff flow with a given identifier and
  // password.
  rpc AuthCreateHandoffFlow(AuthCreateHandoffFlowRequest) returns (AuthCreateHandoffFlowResponse);

  // AuthCompleteHandoffFlow hands off a session to a gateway with a given token and
  // code.
  rpc AuthCompleteHandoffFlow(AuthCompleteHandoffFlowRequest) returns (AuthCompleteHandoffFlowResponse);

  // AuthLogin hands off a session to a gateway with a given token and
  // code.
  rpc AuthLogin(AuthLoginRequest) returns (AuthLoginResponse);

  // AuthRefreshLogin authenticates a gateway with a given identifier, password, and
  // token.
  rpc AuthRefreshLogin(AuthRefreshLoginRequest)
      returns (AuthRefreshLoginResponse);

  // AuthWhoAmI returns the session associated with a given token.
  rpc AuthWhoAmI(AuthWhoAmIRequest) returns (AuthWhoAmIResponse);

  // AuthLogout logs out a session with a given code.
  rpc AuthLogout(AuthLogoutRequest) returns (AuthLogoutResponse);

  // SessionGet gets a session with a given code.
  rpc SessionGet(SessionGetRequest) returns (SessionGetResponse);

  // SessionPut creates a session with a given identifier and token.
  rpc SessionPut(SessionPutRequest) returns (SessionPutResponse);

  // SessionDelete Deletes a session with a given code.
  rpc SessionDelete(SessionDeleteRequest) returns (SessionDeleteResponse);
}
