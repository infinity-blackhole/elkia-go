// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/api/fleet/v1alpha1/session.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SessionAdmin_GetSession_FullMethodName    = "/shikanime.elkia.fleet.v1alpha1.SessionAdmin/GetSession"
	SessionAdmin_PutSession_FullMethodName    = "/shikanime.elkia.fleet.v1alpha1.SessionAdmin/PutSession"
	SessionAdmin_DeleteSession_FullMethodName = "/shikanime.elkia.fleet.v1alpha1.SessionAdmin/DeleteSession"
)

// SessionAdminClient is the client API for SessionAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionAdminClient interface {
	// GetSession gets a session with a given code.
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	// PutSession creates a session with a given identifier and token.
	PutSession(ctx context.Context, in *PutSessionRequest, opts ...grpc.CallOption) (*PutSessionResponse, error)
	// DeleteSession Deletes a session with a given code.
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sessionAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionAdminClient(cc grpc.ClientConnInterface) SessionAdminClient {
	return &sessionAdminClient{cc}
}

func (c *sessionAdminClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, SessionAdmin_GetSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionAdminClient) PutSession(ctx context.Context, in *PutSessionRequest, opts ...grpc.CallOption) (*PutSessionResponse, error) {
	out := new(PutSessionResponse)
	err := c.cc.Invoke(ctx, SessionAdmin_PutSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionAdminClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionAdmin_DeleteSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionAdminServer is the server API for SessionAdmin service.
// All implementations must embed UnimplementedSessionAdminServer
// for forward compatibility
type SessionAdminServer interface {
	// GetSession gets a session with a given code.
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	// PutSession creates a session with a given identifier and token.
	PutSession(context.Context, *PutSessionRequest) (*PutSessionResponse, error)
	// DeleteSession Deletes a session with a given code.
	DeleteSession(context.Context, *DeleteSessionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSessionAdminServer()
}

// UnimplementedSessionAdminServer must be embedded to have forward compatible implementations.
type UnimplementedSessionAdminServer struct {
}

func (UnimplementedSessionAdminServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedSessionAdminServer) PutSession(context.Context, *PutSessionRequest) (*PutSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSession not implemented")
}
func (UnimplementedSessionAdminServer) DeleteSession(context.Context, *DeleteSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedSessionAdminServer) mustEmbedUnimplementedSessionAdminServer() {}

// UnsafeSessionAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionAdminServer will
// result in compilation errors.
type UnsafeSessionAdminServer interface {
	mustEmbedUnimplementedSessionAdminServer()
}

func RegisterSessionAdminServer(s grpc.ServiceRegistrar, srv SessionAdminServer) {
	s.RegisterService(&SessionAdmin_ServiceDesc, srv)
}

func _SessionAdmin_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionAdminServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionAdmin_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionAdminServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionAdmin_PutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionAdminServer).PutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionAdmin_PutSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionAdminServer).PutSession(ctx, req.(*PutSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionAdmin_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionAdminServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionAdmin_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionAdminServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionAdmin_ServiceDesc is the grpc.ServiceDesc for SessionAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shikanime.elkia.fleet.v1alpha1.SessionAdmin",
	HandlerType: (*SessionAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _SessionAdmin_GetSession_Handler,
		},
		{
			MethodName: "PutSession",
			Handler:    _SessionAdmin_PutSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _SessionAdmin_DeleteSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/fleet/v1alpha1/session.proto",
}
