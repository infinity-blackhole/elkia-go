// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: pkg/api/fleet/v1alpha1/fleet.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FleetClient is the client API for Fleet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetClient interface {
	ListClusters(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (*ListClusterResponse, error)
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	ListGateways(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error)
	GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	CreateHandoff(ctx context.Context, in *CreateHandoffRequest, opts ...grpc.CallOption) (*CreateHandoffResponse, error)
	PerformHandoff(ctx context.Context, in *PerformHandoffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fleetClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetClient(cc grpc.ClientConnInterface) FleetClient {
	return &fleetClient{cc}
}

func (c *fleetClient) ListClusters(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (*ListClusterResponse, error) {
	out := new(ListClusterResponse)
	err := c.cc.Invoke(ctx, "/io.elkia.fleet.v1alpha1.Fleet/ListClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/io.elkia.fleet.v1alpha1.Fleet/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListGateways(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error) {
	out := new(ListGatewayResponse)
	err := c.cc.Invoke(ctx, "/io.elkia.fleet.v1alpha1.Fleet/ListGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/io.elkia.fleet.v1alpha1.Fleet/GetGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateHandoff(ctx context.Context, in *CreateHandoffRequest, opts ...grpc.CallOption) (*CreateHandoffResponse, error) {
	out := new(CreateHandoffResponse)
	err := c.cc.Invoke(ctx, "/io.elkia.fleet.v1alpha1.Fleet/CreateHandoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) PerformHandoff(ctx context.Context, in *PerformHandoffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.elkia.fleet.v1alpha1.Fleet/PerformHandoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetServer is the server API for Fleet service.
// All implementations must embed UnimplementedFleetServer
// for forward compatibility
type FleetServer interface {
	ListClusters(context.Context, *ListClusterRequest) (*ListClusterResponse, error)
	GetCluster(context.Context, *GetClusterRequest) (*Cluster, error)
	ListGateways(context.Context, *ListGatewayRequest) (*ListGatewayResponse, error)
	GetGateway(context.Context, *GetGatewayRequest) (*Gateway, error)
	CreateHandoff(context.Context, *CreateHandoffRequest) (*CreateHandoffResponse, error)
	PerformHandoff(context.Context, *PerformHandoffRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFleetServer()
}

// UnimplementedFleetServer must be embedded to have forward compatible implementations.
type UnimplementedFleetServer struct {
}

func (UnimplementedFleetServer) ListClusters(context.Context, *ListClusterRequest) (*ListClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedFleetServer) GetCluster(context.Context, *GetClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedFleetServer) ListGateways(context.Context, *ListGatewayRequest) (*ListGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGateways not implemented")
}
func (UnimplementedFleetServer) GetGateway(context.Context, *GetGatewayRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateway not implemented")
}
func (UnimplementedFleetServer) CreateHandoff(context.Context, *CreateHandoffRequest) (*CreateHandoffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHandoff not implemented")
}
func (UnimplementedFleetServer) PerformHandoff(context.Context, *PerformHandoffRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformHandoff not implemented")
}
func (UnimplementedFleetServer) mustEmbedUnimplementedFleetServer() {}

// UnsafeFleetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetServer will
// result in compilation errors.
type UnsafeFleetServer interface {
	mustEmbedUnimplementedFleetServer()
}

func RegisterFleetServer(s grpc.ServiceRegistrar, srv FleetServer) {
	s.RegisterService(&Fleet_ServiceDesc, srv)
}

func _Fleet_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.elkia.fleet.v1alpha1.Fleet/ListClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListClusters(ctx, req.(*ListClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.elkia.fleet.v1alpha1.Fleet/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.elkia.fleet.v1alpha1.Fleet/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListGateways(ctx, req.(*ListGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.elkia.fleet.v1alpha1.Fleet/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetGateway(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateHandoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHandoffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateHandoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.elkia.fleet.v1alpha1.Fleet/CreateHandoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateHandoff(ctx, req.(*CreateHandoffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_PerformHandoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformHandoffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).PerformHandoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.elkia.fleet.v1alpha1.Fleet/PerformHandoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).PerformHandoff(ctx, req.(*PerformHandoffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fleet_ServiceDesc is the grpc.ServiceDesc for Fleet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fleet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.elkia.fleet.v1alpha1.Fleet",
	HandlerType: (*FleetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusters",
			Handler:    _Fleet_ListClusters_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Fleet_GetCluster_Handler,
		},
		{
			MethodName: "ListGateways",
			Handler:    _Fleet_ListGateways_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _Fleet_GetGateway_Handler,
		},
		{
			MethodName: "CreateHandoff",
			Handler:    _Fleet_CreateHandoff_Handler,
		},
		{
			MethodName: "PerformHandoff",
			Handler:    _Fleet_PerformHandoff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/fleet/v1alpha1/fleet.proto",
}
