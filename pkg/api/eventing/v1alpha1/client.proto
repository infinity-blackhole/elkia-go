syntax = "proto3";
package shikanime.elkia.eventing.v1alpha1;

option go_package = "go.shikanime.studio/elkia/pkg/api/eventing/v1alpha1";

message HeartbeatCommand {}

// TODO: unidentified f_stash_end frame
message FStashEndCommand {}

// TODO: unidentified c_close frame
message CCloseCommand {}

// TODO: unidentified lbs frame
message LBSCommand { int32 type = 1; }

enum CharacterOptions {
    EXCHANGE_BLOCKED = 0;
    FRIEND_REQUEST_BLOCKED = 1;
    FAMILY_REQUEST_BLOCKED = 2;
    WHISPER_BLOCKED = 3;
    GROUP_REQUEST_BLOCKED = 4;
    GROUP_SHARING = 5;
    MOUSE_AIM_LOCK = 6;
    HERO_CHAT_BLOCKED = 7;
    EMOTICONS_BLOCKED = 8;
    QUICK_GET_UP = 9;
    HP_BLOCKED = 10;
    BUFF_BLOCKED = 11;
    MINILAND_INVITE_BLOCKED = 12;
}

message GlobalOptionsCommand { CharacterOptions option = 1; }

message ClientCommand {
    oneof command{
        HeartbeatCommand heartbeat = 2;
        FStashEndCommand f_stash_end = 3;
        CCloseCommand c_close = 4;
        LBSCommand lbs = 5;
        GlobalOptionsCommand global_options = 6;
    }
}

message ClientInteractRequest {
    uint32 sequence = 1;
    ClientCommand command = 2;
}

enum Code {
    OUTDATED_CLIENT = 0;
    UNEXPECTED_ERROR = 1;
    MAINTENANCE = 2;
    SESSION_ALREADY_USED = 3;
    UNVALID_CREDENTIALS = 4;
    CANT_AUTHENTICATE = 5;
    USER_BLOCKLISTED = 6;
    COUNTRY_BLACKLISTED = 7;
    BAD_CASE = 8;
}

message ErrorEvent { Code code = 1; }

message InfoEvent { string content = 1; }

message ClientEvent {
    oneof event {
        ErrorEvent error = 1;
        InfoEvent info = 2;
    }
}

service Client {
    // ClientInteract is a bi-directional stream that is used to interact with the
    // auth server
    rpc ClientInteract(stream ClientInteractRequest)
        returns (stream ClientEvent);
}

