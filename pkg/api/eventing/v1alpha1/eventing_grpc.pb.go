// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/api/eventing/v1alpha1/eventing.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_AuthInteract_FullMethodName                        = "/shikanime.elkia.eventing.v1alpha1.Auth/AuthInteract"
	Auth_AuthCreateHandoffFlowCommandProduce_FullMethodName = "/shikanime.elkia.eventing.v1alpha1.Auth/AuthCreateHandoffFlowCommandProduce"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// AuthInteract is a bi-directional stream that is used to interact with the
	// auth server
	AuthInteract(ctx context.Context, opts ...grpc.CallOption) (Auth_AuthInteractClient, error)
	// AuthCreateHandoffFlowCommandProduce send a login frame to the auth server and returns a
	// stream of events
	AuthCreateHandoffFlowCommandProduce(ctx context.Context, in *LoginCommand, opts ...grpc.CallOption) (Auth_AuthCreateHandoffFlowCommandProduceClient, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) AuthInteract(ctx context.Context, opts ...grpc.CallOption) (Auth_AuthInteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &Auth_ServiceDesc.Streams[0], Auth_AuthInteract_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &authAuthInteractClient{stream}
	return x, nil
}

type Auth_AuthInteractClient interface {
	Send(*AuthInteractRequest) error
	Recv() (*AuthInteractResponse, error)
	grpc.ClientStream
}

type authAuthInteractClient struct {
	grpc.ClientStream
}

func (x *authAuthInteractClient) Send(m *AuthInteractRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authAuthInteractClient) Recv() (*AuthInteractResponse, error) {
	m := new(AuthInteractResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authClient) AuthCreateHandoffFlowCommandProduce(ctx context.Context, in *LoginCommand, opts ...grpc.CallOption) (Auth_AuthCreateHandoffFlowCommandProduceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Auth_ServiceDesc.Streams[1], Auth_AuthCreateHandoffFlowCommandProduce_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &authAuthCreateHandoffFlowCommandProduceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Auth_AuthCreateHandoffFlowCommandProduceClient interface {
	Recv() (*AuthInteractResponse, error)
	grpc.ClientStream
}

type authAuthCreateHandoffFlowCommandProduceClient struct {
	grpc.ClientStream
}

func (x *authAuthCreateHandoffFlowCommandProduceClient) Recv() (*AuthInteractResponse, error) {
	m := new(AuthInteractResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// AuthInteract is a bi-directional stream that is used to interact with the
	// auth server
	AuthInteract(Auth_AuthInteractServer) error
	// AuthCreateHandoffFlowCommandProduce send a login frame to the auth server and returns a
	// stream of events
	AuthCreateHandoffFlowCommandProduce(*LoginCommand, Auth_AuthCreateHandoffFlowCommandProduceServer) error
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) AuthInteract(Auth_AuthInteractServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthInteract not implemented")
}
func (UnimplementedAuthServer) AuthCreateHandoffFlowCommandProduce(*LoginCommand, Auth_AuthCreateHandoffFlowCommandProduceServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthCreateHandoffFlowCommandProduce not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_AuthInteract_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServer).AuthInteract(&authAuthInteractServer{stream})
}

type Auth_AuthInteractServer interface {
	Send(*AuthInteractResponse) error
	Recv() (*AuthInteractRequest, error)
	grpc.ServerStream
}

type authAuthInteractServer struct {
	grpc.ServerStream
}

func (x *authAuthInteractServer) Send(m *AuthInteractResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authAuthInteractServer) Recv() (*AuthInteractRequest, error) {
	m := new(AuthInteractRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Auth_AuthCreateHandoffFlowCommandProduce_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoginCommand)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServer).AuthCreateHandoffFlowCommandProduce(m, &authAuthCreateHandoffFlowCommandProduceServer{stream})
}

type Auth_AuthCreateHandoffFlowCommandProduceServer interface {
	Send(*AuthInteractResponse) error
	grpc.ServerStream
}

type authAuthCreateHandoffFlowCommandProduceServer struct {
	grpc.ServerStream
}

func (x *authAuthCreateHandoffFlowCommandProduceServer) Send(m *AuthInteractResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shikanime.elkia.eventing.v1alpha1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AuthInteract",
			Handler:       _Auth_AuthInteract_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AuthCreateHandoffFlowCommandProduce",
			Handler:       _Auth_AuthCreateHandoffFlowCommandProduce_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/eventing/v1alpha1/eventing.proto",
}

const (
	Gateway_ChannelInteract_FullMethodName = "/shikanime.elkia.eventing.v1alpha1.Gateway/ChannelInteract"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// ChannelInteract is a bi-directional stream that is used to interact with
	// the channel server
	ChannelInteract(ctx context.Context, opts ...grpc.CallOption) (Gateway_ChannelInteractClient, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) ChannelInteract(ctx context.Context, opts ...grpc.CallOption) (Gateway_ChannelInteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], Gateway_ChannelInteract_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayChannelInteractClient{stream}
	return x, nil
}

type Gateway_ChannelInteractClient interface {
	Send(*ChannelInteractRequest) error
	Recv() (*ChannelInteractResponse, error)
	grpc.ClientStream
}

type gatewayChannelInteractClient struct {
	grpc.ClientStream
}

func (x *gatewayChannelInteractClient) Send(m *ChannelInteractRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayChannelInteractClient) Recv() (*ChannelInteractResponse, error) {
	m := new(ChannelInteractResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	// ChannelInteract is a bi-directional stream that is used to interact with
	// the channel server
	ChannelInteract(Gateway_ChannelInteractServer) error
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) ChannelInteract(Gateway_ChannelInteractServer) error {
	return status.Errorf(codes.Unimplemented, "method ChannelInteract not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_ChannelInteract_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).ChannelInteract(&gatewayChannelInteractServer{stream})
}

type Gateway_ChannelInteractServer interface {
	Send(*ChannelInteractResponse) error
	Recv() (*ChannelInteractRequest, error)
	grpc.ServerStream
}

type gatewayChannelInteractServer struct {
	grpc.ServerStream
}

func (x *gatewayChannelInteractServer) Send(m *ChannelInteractResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayChannelInteractServer) Recv() (*ChannelInteractRequest, error) {
	m := new(ChannelInteractRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shikanime.elkia.eventing.v1alpha1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChannelInteract",
			Handler:       _Gateway_ChannelInteract_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/eventing/v1alpha1/eventing.proto",
}

const (
	Lobby_CharacterAdd_FullMethodName    = "/shikanime.elkia.eventing.v1alpha1.Lobby/CharacterAdd"
	Lobby_CharacterRemove_FullMethodName = "/shikanime.elkia.eventing.v1alpha1.Lobby/CharacterRemove"
	Lobby_CharacterUpdate_FullMethodName = "/shikanime.elkia.eventing.v1alpha1.Lobby/CharacterUpdate"
	Lobby_CharacterList_FullMethodName   = "/shikanime.elkia.eventing.v1alpha1.Lobby/CharacterList"
)

// LobbyClient is the client API for Lobby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LobbyClient interface {
	// CharacterAdd adds a new character to the world.
	CharacterAdd(ctx context.Context, in *CharacterAddRequest, opts ...grpc.CallOption) (*CharacterAddResponse, error)
	// CharacterRemove removes an existing character from the world.
	CharacterRemove(ctx context.Context, in *CharacterRemoveRequest, opts ...grpc.CallOption) (*CharacterRemoveResponse, error)
	// CharacterUpdate updates an existing character in the world.
	CharacterUpdate(ctx context.Context, in *CharacterUpdateRequest, opts ...grpc.CallOption) (*CharacterUpdateResponse, error)
	// CharacterList lists all characters in the world.
	CharacterList(ctx context.Context, in *CharacterListRequest, opts ...grpc.CallOption) (*CharacterListResponse, error)
}

type lobbyClient struct {
	cc grpc.ClientConnInterface
}

func NewLobbyClient(cc grpc.ClientConnInterface) LobbyClient {
	return &lobbyClient{cc}
}

func (c *lobbyClient) CharacterAdd(ctx context.Context, in *CharacterAddRequest, opts ...grpc.CallOption) (*CharacterAddResponse, error) {
	out := new(CharacterAddResponse)
	err := c.cc.Invoke(ctx, Lobby_CharacterAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CharacterRemove(ctx context.Context, in *CharacterRemoveRequest, opts ...grpc.CallOption) (*CharacterRemoveResponse, error) {
	out := new(CharacterRemoveResponse)
	err := c.cc.Invoke(ctx, Lobby_CharacterRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CharacterUpdate(ctx context.Context, in *CharacterUpdateRequest, opts ...grpc.CallOption) (*CharacterUpdateResponse, error) {
	out := new(CharacterUpdateResponse)
	err := c.cc.Invoke(ctx, Lobby_CharacterUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CharacterList(ctx context.Context, in *CharacterListRequest, opts ...grpc.CallOption) (*CharacterListResponse, error) {
	out := new(CharacterListResponse)
	err := c.cc.Invoke(ctx, Lobby_CharacterList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LobbyServer is the server API for Lobby service.
// All implementations must embed UnimplementedLobbyServer
// for forward compatibility
type LobbyServer interface {
	// CharacterAdd adds a new character to the world.
	CharacterAdd(context.Context, *CharacterAddRequest) (*CharacterAddResponse, error)
	// CharacterRemove removes an existing character from the world.
	CharacterRemove(context.Context, *CharacterRemoveRequest) (*CharacterRemoveResponse, error)
	// CharacterUpdate updates an existing character in the world.
	CharacterUpdate(context.Context, *CharacterUpdateRequest) (*CharacterUpdateResponse, error)
	// CharacterList lists all characters in the world.
	CharacterList(context.Context, *CharacterListRequest) (*CharacterListResponse, error)
	mustEmbedUnimplementedLobbyServer()
}

// UnimplementedLobbyServer must be embedded to have forward compatible implementations.
type UnimplementedLobbyServer struct {
}

func (UnimplementedLobbyServer) CharacterAdd(context.Context, *CharacterAddRequest) (*CharacterAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterAdd not implemented")
}
func (UnimplementedLobbyServer) CharacterRemove(context.Context, *CharacterRemoveRequest) (*CharacterRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterRemove not implemented")
}
func (UnimplementedLobbyServer) CharacterUpdate(context.Context, *CharacterUpdateRequest) (*CharacterUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterUpdate not implemented")
}
func (UnimplementedLobbyServer) CharacterList(context.Context, *CharacterListRequest) (*CharacterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharacterList not implemented")
}
func (UnimplementedLobbyServer) mustEmbedUnimplementedLobbyServer() {}

// UnsafeLobbyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobbyServer will
// result in compilation errors.
type UnsafeLobbyServer interface {
	mustEmbedUnimplementedLobbyServer()
}

func RegisterLobbyServer(s grpc.ServiceRegistrar, srv LobbyServer) {
	s.RegisterService(&Lobby_ServiceDesc, srv)
}

func _Lobby_CharacterAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CharacterAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CharacterAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CharacterAdd(ctx, req.(*CharacterAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CharacterRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CharacterRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CharacterRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CharacterRemove(ctx, req.(*CharacterRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CharacterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CharacterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CharacterUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CharacterUpdate(ctx, req.(*CharacterUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CharacterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CharacterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lobby_CharacterList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CharacterList(ctx, req.(*CharacterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lobby_ServiceDesc is the grpc.ServiceDesc for Lobby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lobby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shikanime.elkia.eventing.v1alpha1.Lobby",
	HandlerType: (*LobbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CharacterAdd",
			Handler:    _Lobby_CharacterAdd_Handler,
		},
		{
			MethodName: "CharacterRemove",
			Handler:    _Lobby_CharacterRemove_Handler,
		},
		{
			MethodName: "CharacterUpdate",
			Handler:    _Lobby_CharacterUpdate_Handler,
		},
		{
			MethodName: "CharacterList",
			Handler:    _Lobby_CharacterList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/eventing/v1alpha1/eventing.proto",
}
