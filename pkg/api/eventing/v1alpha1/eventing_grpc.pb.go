// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/api/eventing/v1alpha1/eventing.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// AuthInteract is a bi-directional stream that is used to interact with the
	// auth server
	AuthInteract(ctx context.Context, opts ...grpc.CallOption) (Auth_AuthInteractClient, error)
	// AuthLoginProduce send a login event to the auth server and returns a
	// stream of events
	AuthLoginProduce(ctx context.Context, in *AuthLoginEvent, opts ...grpc.CallOption) (Auth_AuthLoginProduceClient, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) AuthInteract(ctx context.Context, opts ...grpc.CallOption) (Auth_AuthInteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &Auth_ServiceDesc.Streams[0], "/io.elkia.eventing.v1alpha1.Auth/AuthInteract", opts...)
	if err != nil {
		return nil, err
	}
	x := &authAuthInteractClient{stream}
	return x, nil
}

type Auth_AuthInteractClient interface {
	Send(*AuthInteractRequest) error
	Recv() (*AuthInteractResponse, error)
	grpc.ClientStream
}

type authAuthInteractClient struct {
	grpc.ClientStream
}

func (x *authAuthInteractClient) Send(m *AuthInteractRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authAuthInteractClient) Recv() (*AuthInteractResponse, error) {
	m := new(AuthInteractResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authClient) AuthLoginProduce(ctx context.Context, in *AuthLoginEvent, opts ...grpc.CallOption) (Auth_AuthLoginProduceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Auth_ServiceDesc.Streams[1], "/io.elkia.eventing.v1alpha1.Auth/AuthLoginProduce", opts...)
	if err != nil {
		return nil, err
	}
	x := &authAuthLoginProduceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Auth_AuthLoginProduceClient interface {
	Recv() (*AuthInteractResponse, error)
	grpc.ClientStream
}

type authAuthLoginProduceClient struct {
	grpc.ClientStream
}

func (x *authAuthLoginProduceClient) Recv() (*AuthInteractResponse, error) {
	m := new(AuthInteractResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// AuthInteract is a bi-directional stream that is used to interact with the
	// auth server
	AuthInteract(Auth_AuthInteractServer) error
	// AuthLoginProduce send a login event to the auth server and returns a
	// stream of events
	AuthLoginProduce(*AuthLoginEvent, Auth_AuthLoginProduceServer) error
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) AuthInteract(Auth_AuthInteractServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthInteract not implemented")
}
func (UnimplementedAuthServer) AuthLoginProduce(*AuthLoginEvent, Auth_AuthLoginProduceServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthLoginProduce not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_AuthInteract_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServer).AuthInteract(&authAuthInteractServer{stream})
}

type Auth_AuthInteractServer interface {
	Send(*AuthInteractResponse) error
	Recv() (*AuthInteractRequest, error)
	grpc.ServerStream
}

type authAuthInteractServer struct {
	grpc.ServerStream
}

func (x *authAuthInteractServer) Send(m *AuthInteractResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authAuthInteractServer) Recv() (*AuthInteractRequest, error) {
	m := new(AuthInteractRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Auth_AuthLoginProduce_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AuthLoginEvent)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthServer).AuthLoginProduce(m, &authAuthLoginProduceServer{stream})
}

type Auth_AuthLoginProduceServer interface {
	Send(*AuthInteractResponse) error
	grpc.ServerStream
}

type authAuthLoginProduceServer struct {
	grpc.ServerStream
}

func (x *authAuthLoginProduceServer) Send(m *AuthInteractResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.elkia.eventing.v1alpha1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AuthInteract",
			Handler:       _Auth_AuthInteract_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AuthLoginProduce",
			Handler:       _Auth_AuthLoginProduce_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/eventing/v1alpha1/eventing.proto",
}

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// AuthHandoffInteract is a bi-directional stream that is used to handoff
	// the auth server
	AuthHandoffInteract(ctx context.Context, opts ...grpc.CallOption) (Gateway_AuthHandoffInteractClient, error)
	// ChannelInteract is a bi-directional stream that is used to interact with
	// the channel server
	ChannelInteract(ctx context.Context, opts ...grpc.CallOption) (Gateway_ChannelInteractClient, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) AuthHandoffInteract(ctx context.Context, opts ...grpc.CallOption) (Gateway_AuthHandoffInteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], "/io.elkia.eventing.v1alpha1.Gateway/AuthHandoffInteract", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayAuthHandoffInteractClient{stream}
	return x, nil
}

type Gateway_AuthHandoffInteractClient interface {
	Send(*AuthHandoffInteractRequest) error
	Recv() (*AuthHandoffInteractResponse, error)
	grpc.ClientStream
}

type gatewayAuthHandoffInteractClient struct {
	grpc.ClientStream
}

func (x *gatewayAuthHandoffInteractClient) Send(m *AuthHandoffInteractRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayAuthHandoffInteractClient) Recv() (*AuthHandoffInteractResponse, error) {
	m := new(AuthHandoffInteractResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) ChannelInteract(ctx context.Context, opts ...grpc.CallOption) (Gateway_ChannelInteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[1], "/io.elkia.eventing.v1alpha1.Gateway/ChannelInteract", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayChannelInteractClient{stream}
	return x, nil
}

type Gateway_ChannelInteractClient interface {
	Send(*ChannelInteractRequest) error
	Recv() (*ChannelInteractResponse, error)
	grpc.ClientStream
}

type gatewayChannelInteractClient struct {
	grpc.ClientStream
}

func (x *gatewayChannelInteractClient) Send(m *ChannelInteractRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayChannelInteractClient) Recv() (*ChannelInteractResponse, error) {
	m := new(ChannelInteractResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	// AuthHandoffInteract is a bi-directional stream that is used to handoff
	// the auth server
	AuthHandoffInteract(Gateway_AuthHandoffInteractServer) error
	// ChannelInteract is a bi-directional stream that is used to interact with
	// the channel server
	ChannelInteract(Gateway_ChannelInteractServer) error
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) AuthHandoffInteract(Gateway_AuthHandoffInteractServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthHandoffInteract not implemented")
}
func (UnimplementedGatewayServer) ChannelInteract(Gateway_ChannelInteractServer) error {
	return status.Errorf(codes.Unimplemented, "method ChannelInteract not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_AuthHandoffInteract_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).AuthHandoffInteract(&gatewayAuthHandoffInteractServer{stream})
}

type Gateway_AuthHandoffInteractServer interface {
	Send(*AuthHandoffInteractResponse) error
	Recv() (*AuthHandoffInteractRequest, error)
	grpc.ServerStream
}

type gatewayAuthHandoffInteractServer struct {
	grpc.ServerStream
}

func (x *gatewayAuthHandoffInteractServer) Send(m *AuthHandoffInteractResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayAuthHandoffInteractServer) Recv() (*AuthHandoffInteractRequest, error) {
	m := new(AuthHandoffInteractRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gateway_ChannelInteract_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).ChannelInteract(&gatewayChannelInteractServer{stream})
}

type Gateway_ChannelInteractServer interface {
	Send(*ChannelInteractResponse) error
	Recv() (*ChannelInteractRequest, error)
	grpc.ServerStream
}

type gatewayChannelInteractServer struct {
	grpc.ServerStream
}

func (x *gatewayChannelInteractServer) Send(m *ChannelInteractResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayChannelInteractServer) Recv() (*ChannelInteractRequest, error) {
	m := new(ChannelInteractRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.elkia.eventing.v1alpha1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AuthHandoffInteract",
			Handler:       _Gateway_AuthHandoffInteract_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ChannelInteract",
			Handler:       _Gateway_ChannelInteract_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/eventing/v1alpha1/eventing.proto",
}
