// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.12
// source: pkg/api/eventing/v1alpha1/eventing.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Code int32

const (
	Code_OUTDATED_CLIENT      Code = 0
	Code_UNEXPECTED_ERROR     Code = 1
	Code_MAINTENANCE          Code = 2
	Code_SESSION_ALREADY_USED Code = 3
	Code_UNVALID_CREDENTIALS  Code = 4
	Code_CANT_AUTHENTICATE    Code = 5
	Code_USER_BLOCKLISTED     Code = 6
	Code_COUNTRY_BLACKLISTED  Code = 7
	Code_BAD_CASE             Code = 8
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0: "OUTDATED_CLIENT",
		1: "UNEXPECTED_ERROR",
		2: "MAINTENANCE",
		3: "SESSION_ALREADY_USED",
		4: "UNVALID_CREDENTIALS",
		5: "CANT_AUTHENTICATE",
		6: "USER_BLOCKLISTED",
		7: "COUNTRY_BLACKLISTED",
		8: "BAD_CASE",
	}
	Code_value = map[string]int32{
		"OUTDATED_CLIENT":      0,
		"UNEXPECTED_ERROR":     1,
		"MAINTENANCE":          2,
		"SESSION_ALREADY_USED": 3,
		"UNVALID_CREDENTIALS":  4,
		"CANT_AUTHENTICATE":    5,
		"USER_BLOCKLISTED":     6,
		"COUNTRY_BLACKLISTED":  7,
		"BAD_CASE":             8,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{0}
}

type RequestType int32

const (
	RequestType_REQUESTED RequestType = 0
	RequestType_LIST      RequestType = 1
	RequestType_CONFIRMED RequestType = 2
	RequestType_CANCELLED RequestType = 3
	RequestType_DECLINED  RequestType = 4
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0: "REQUESTED",
		1: "LIST",
		2: "CONFIRMED",
		3: "CANCELLED",
		4: "DECLINED",
	}
	RequestType_value = map[string]int32{
		"REQUESTED": 0,
		"LIST":      1,
		"CONFIRMED": 2,
		"CANCELLED": 3,
		"DECLINED":  4,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[1].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[1]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{1}
}

type CharacterOptions int32

const (
	CharacterOptions_EXCHANGE_BLOCKED        CharacterOptions = 0
	CharacterOptions_FRIEND_REQUEST_BLOCKED  CharacterOptions = 1
	CharacterOptions_FAMILY_REQUEST_BLOCKED  CharacterOptions = 2
	CharacterOptions_WHISPER_BLOCKED         CharacterOptions = 3
	CharacterOptions_GROUP_REQUEST_BLOCKED   CharacterOptions = 4
	CharacterOptions_GROUP_SHARING           CharacterOptions = 5
	CharacterOptions_MOUSE_AIM_LOCK          CharacterOptions = 6
	CharacterOptions_HERO_CHAT_BLOCKED       CharacterOptions = 7
	CharacterOptions_EMOTICONS_BLOCKED       CharacterOptions = 8
	CharacterOptions_QUICK_GET_UP            CharacterOptions = 9
	CharacterOptions_HP_BLOCKED              CharacterOptions = 10
	CharacterOptions_BUFF_BLOCKED            CharacterOptions = 11
	CharacterOptions_MINILAND_INVITE_BLOCKED CharacterOptions = 12
)

// Enum value maps for CharacterOptions.
var (
	CharacterOptions_name = map[int32]string{
		0:  "EXCHANGE_BLOCKED",
		1:  "FRIEND_REQUEST_BLOCKED",
		2:  "FAMILY_REQUEST_BLOCKED",
		3:  "WHISPER_BLOCKED",
		4:  "GROUP_REQUEST_BLOCKED",
		5:  "GROUP_SHARING",
		6:  "MOUSE_AIM_LOCK",
		7:  "HERO_CHAT_BLOCKED",
		8:  "EMOTICONS_BLOCKED",
		9:  "QUICK_GET_UP",
		10: "HP_BLOCKED",
		11: "BUFF_BLOCKED",
		12: "MINILAND_INVITE_BLOCKED",
	}
	CharacterOptions_value = map[string]int32{
		"EXCHANGE_BLOCKED":        0,
		"FRIEND_REQUEST_BLOCKED":  1,
		"FAMILY_REQUEST_BLOCKED":  2,
		"WHISPER_BLOCKED":         3,
		"GROUP_REQUEST_BLOCKED":   4,
		"GROUP_SHARING":           5,
		"MOUSE_AIM_LOCK":          6,
		"HERO_CHAT_BLOCKED":       7,
		"EMOTICONS_BLOCKED":       8,
		"QUICK_GET_UP":            9,
		"HP_BLOCKED":              10,
		"BUFF_BLOCKED":            11,
		"MINILAND_INVITE_BLOCKED": 12,
	}
)

func (x CharacterOptions) Enum() *CharacterOptions {
	p := new(CharacterOptions)
	*p = x
	return p
}

func (x CharacterOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[2].Descriptor()
}

func (CharacterOptions) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[2]
}

func (x CharacterOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterOptions.Descriptor instead.
func (CharacterOptions) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{2}
}

type CharacterClass int32

const (
	CharacterClass_ADVENTURER     CharacterClass = 0
	CharacterClass_SORCERER       CharacterClass = 1
	CharacterClass_ARCHER         CharacterClass = 2
	CharacterClass_SWORDMAN       CharacterClass = 3
	CharacterClass_MARTIAL_ARTIST CharacterClass = 4
)

// Enum value maps for CharacterClass.
var (
	CharacterClass_name = map[int32]string{
		0: "ADVENTURER",
		1: "SORCERER",
		2: "ARCHER",
		3: "SWORDMAN",
		4: "MARTIAL_ARTIST",
	}
	CharacterClass_value = map[string]int32{
		"ADVENTURER":     0,
		"SORCERER":       1,
		"ARCHER":         2,
		"SWORDMAN":       3,
		"MARTIAL_ARTIST": 4,
	}
)

func (x CharacterClass) Enum() *CharacterClass {
	p := new(CharacterClass)
	*p = x
	return p
}

func (x CharacterClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterClass) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[3].Descriptor()
}

func (CharacterClass) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[3]
}

func (x CharacterClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterClass.Descriptor instead.
func (CharacterClass) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{3}
}

type Sex int32

const (
	Sex_Male   Sex = 0
	Sex_Female Sex = 1
)

// Enum value maps for Sex.
var (
	Sex_name = map[int32]string{
		0: "Male",
		1: "Female",
	}
	Sex_value = map[string]int32{
		"Male":   0,
		"Female": 1,
	}
)

func (x Sex) Enum() *Sex {
	p := new(Sex)
	*p = x
	return p
}

func (x Sex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sex) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[4].Descriptor()
}

func (Sex) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[4]
}

func (x Sex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sex.Descriptor instead.
func (Sex) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{4}
}

type CharacterHairColor int32

const (
	CharacterHairColor_MauveTaupe CharacterHairColor = 0
	CharacterHairColor_Cerise     CharacterHairColor = 1
	CharacterHairColor_SanMarino  CharacterHairColor = 2
	CharacterHairColor_Affair     CharacterHairColor = 3
	CharacterHairColor_Dixie      CharacterHairColor = 4
	CharacterHairColor_Raven      CharacterHairColor = 5
	CharacterHairColor_Killarney  CharacterHairColor = 6
	CharacterHairColor_Nutmeg     CharacterHairColor = 7
	CharacterHairColor_Saddle     CharacterHairColor = 8
	CharacterHairColor_Red        CharacterHairColor = 9
)

// Enum value maps for CharacterHairColor.
var (
	CharacterHairColor_name = map[int32]string{
		0: "MauveTaupe",
		1: "Cerise",
		2: "SanMarino",
		3: "Affair",
		4: "Dixie",
		5: "Raven",
		6: "Killarney",
		7: "Nutmeg",
		8: "Saddle",
		9: "Red",
	}
	CharacterHairColor_value = map[string]int32{
		"MauveTaupe": 0,
		"Cerise":     1,
		"SanMarino":  2,
		"Affair":     3,
		"Dixie":      4,
		"Raven":      5,
		"Killarney":  6,
		"Nutmeg":     7,
		"Saddle":     8,
		"Red":        9,
	}
)

func (x CharacterHairColor) Enum() *CharacterHairColor {
	p := new(CharacterHairColor)
	*p = x
	return p
}

func (x CharacterHairColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterHairColor) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[5].Descriptor()
}

func (CharacterHairColor) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[5]
}

func (x CharacterHairColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterHairColor.Descriptor instead.
func (CharacterHairColor) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{5}
}

type CharacterHairStyle int32

const (
	CharacterHairStyle_StyleA CharacterHairStyle = 0
	CharacterHairStyle_StyleB CharacterHairStyle = 1
	CharacterHairStyle_StyleC CharacterHairStyle = 2
	CharacterHairStyle_StyleD CharacterHairStyle = 3
	CharacterHairStyle_Shaved CharacterHairStyle = 4
)

// Enum value maps for CharacterHairStyle.
var (
	CharacterHairStyle_name = map[int32]string{
		0: "StyleA",
		1: "StyleB",
		2: "StyleC",
		3: "StyleD",
		4: "Shaved",
	}
	CharacterHairStyle_value = map[string]int32{
		"StyleA": 0,
		"StyleB": 1,
		"StyleC": 2,
		"StyleD": 3,
		"Shaved": 4,
	}
)

func (x CharacterHairStyle) Enum() *CharacterHairStyle {
	p := new(CharacterHairStyle)
	*p = x
	return p
}

func (x CharacterHairStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterHairStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[6].Descriptor()
}

func (CharacterHairStyle) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[6]
}

func (x CharacterHairStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterHairStyle.Descriptor instead.
func (CharacterHairStyle) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{6}
}

type Faction int32

const (
	Faction_Neutral Faction = 0
	Faction_Angel   Faction = 1
	Faction_Demon   Faction = 2
)

// Enum value maps for Faction.
var (
	Faction_name = map[int32]string{
		0: "Neutral",
		1: "Angel",
		2: "Demon",
	}
	Faction_value = map[string]int32{
		"Neutral": 0,
		"Angel":   1,
		"Demon":   2,
	}
)

func (x Faction) Enum() *Faction {
	p := new(Faction)
	*p = x
	return p
}

func (x Faction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Faction) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[7].Descriptor()
}

func (Faction) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[7]
}

func (x Faction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Faction.Descriptor instead.
func (Faction) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{7}
}

type ErrorFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=shikanime.elkia.eventing.v1alpha1.Code" json:"code,omitempty"`
}

func (x *ErrorFrame) Reset() {
	*x = ErrorFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorFrame) ProtoMessage() {}

func (x *ErrorFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorFrame.ProtoReflect.Descriptor instead.
func (*ErrorFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorFrame) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OUTDATED_CLIENT
}

type InfoFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *InfoFrame) Reset() {
	*x = InfoFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoFrame) ProtoMessage() {}

func (x *InfoFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoFrame.ProtoReflect.Descriptor instead.
func (*InfoFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{1}
}

func (x *InfoFrame) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type LoginFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier     string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Password       string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	ClientVersion  string `protobuf:"bytes,5,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ClientChecksum string `protobuf:"bytes,7,opt,name=client_checksum,json=clientChecksum,proto3" json:"client_checksum,omitempty"`
}

func (x *LoginFrame) Reset() {
	*x = LoginFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginFrame) ProtoMessage() {}

func (x *LoginFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginFrame.ProtoReflect.Descriptor instead.
func (*LoginFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{2}
}

func (x *LoginFrame) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *LoginFrame) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginFrame) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *LoginFrame) GetClientChecksum() string {
	if x != nil {
		return x.ClientChecksum
	}
	return ""
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host      string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port      string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Weight    uint32 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	WorldId   uint32 `protobuf:"varint,4,opt,name=world_id,json=worldId,proto3" json:"world_id,omitempty"`
	ChannelId uint32 `protobuf:"varint,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	WorldName string `protobuf:"bytes,6,opt,name=world_name,json=worldName,proto3" json:"world_name,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{3}
}

func (x *Endpoint) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Endpoint) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Endpoint) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Endpoint) GetWorldId() uint32 {
	if x != nil {
		return x.WorldId
	}
	return 0
}

func (x *Endpoint) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *Endpoint) GetWorldName() string {
	if x != nil {
		return x.WorldName
	}
	return ""
}

type EndpointListFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Endpoints []*Endpoint `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *EndpointListFrame) Reset() {
	*x = EndpointListFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointListFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointListFrame) ProtoMessage() {}

func (x *EndpointListFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointListFrame.ProtoReflect.Descriptor instead.
func (*EndpointListFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{4}
}

func (x *EndpointListFrame) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EndpointListFrame) GetEndpoints() []*Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type AuthInteractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*AuthInteractRequest_RawFrame
	//	*AuthInteractRequest_LoginFrame
	Payload isAuthInteractRequest_Payload `protobuf_oneof:"payload"`
}

func (x *AuthInteractRequest) Reset() {
	*x = AuthInteractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthInteractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthInteractRequest) ProtoMessage() {}

func (x *AuthInteractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthInteractRequest.ProtoReflect.Descriptor instead.
func (*AuthInteractRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{5}
}

func (m *AuthInteractRequest) GetPayload() isAuthInteractRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AuthInteractRequest) GetRawFrame() []byte {
	if x, ok := x.GetPayload().(*AuthInteractRequest_RawFrame); ok {
		return x.RawFrame
	}
	return nil
}

func (x *AuthInteractRequest) GetLoginFrame() *LoginFrame {
	if x, ok := x.GetPayload().(*AuthInteractRequest_LoginFrame); ok {
		return x.LoginFrame
	}
	return nil
}

type isAuthInteractRequest_Payload interface {
	isAuthInteractRequest_Payload()
}

type AuthInteractRequest_RawFrame struct {
	RawFrame []byte `protobuf:"bytes,1,opt,name=raw_frame,json=rawFrame,proto3,oneof"`
}

type AuthInteractRequest_LoginFrame struct {
	LoginFrame *LoginFrame `protobuf:"bytes,2,opt,name=login_frame,json=loginFrame,proto3,oneof"`
}

func (*AuthInteractRequest_RawFrame) isAuthInteractRequest_Payload() {}

func (*AuthInteractRequest_LoginFrame) isAuthInteractRequest_Payload() {}

type AuthInteractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*AuthInteractResponse_ErrorFrame
	//	*AuthInteractResponse_InfoFrame
	//	*AuthInteractResponse_EndpointListFrame
	Payload isAuthInteractResponse_Payload `protobuf_oneof:"payload"`
}

func (x *AuthInteractResponse) Reset() {
	*x = AuthInteractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthInteractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthInteractResponse) ProtoMessage() {}

func (x *AuthInteractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthInteractResponse.ProtoReflect.Descriptor instead.
func (*AuthInteractResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{6}
}

func (m *AuthInteractResponse) GetPayload() isAuthInteractResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AuthInteractResponse) GetErrorFrame() *ErrorFrame {
	if x, ok := x.GetPayload().(*AuthInteractResponse_ErrorFrame); ok {
		return x.ErrorFrame
	}
	return nil
}

func (x *AuthInteractResponse) GetInfoFrame() *InfoFrame {
	if x, ok := x.GetPayload().(*AuthInteractResponse_InfoFrame); ok {
		return x.InfoFrame
	}
	return nil
}

func (x *AuthInteractResponse) GetEndpointListFrame() *EndpointListFrame {
	if x, ok := x.GetPayload().(*AuthInteractResponse_EndpointListFrame); ok {
		return x.EndpointListFrame
	}
	return nil
}

type isAuthInteractResponse_Payload interface {
	isAuthInteractResponse_Payload()
}

type AuthInteractResponse_ErrorFrame struct {
	ErrorFrame *ErrorFrame `protobuf:"bytes,1,opt,name=error_frame,json=errorFrame,proto3,oneof"`
}

type AuthInteractResponse_InfoFrame struct {
	InfoFrame *InfoFrame `protobuf:"bytes,2,opt,name=info_frame,json=infoFrame,proto3,oneof"`
}

type AuthInteractResponse_EndpointListFrame struct {
	EndpointListFrame *EndpointListFrame `protobuf:"bytes,3,opt,name=endpoint_list_frame,json=endpointListFrame,proto3,oneof"`
}

func (*AuthInteractResponse_ErrorFrame) isAuthInteractResponse_Payload() {}

func (*AuthInteractResponse_InfoFrame) isAuthInteractResponse_Payload() {}

func (*AuthInteractResponse_EndpointListFrame) isAuthInteractResponse_Payload() {}

type SyncFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Code     uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *SyncFrame) Reset() {
	*x = SyncFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncFrame) ProtoMessage() {}

func (x *SyncFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncFrame.ProtoReflect.Descriptor instead.
func (*SyncFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{7}
}

func (x *SyncFrame) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *SyncFrame) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type IdentifierFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence   uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *IdentifierFrame) Reset() {
	*x = IdentifierFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierFrame) ProtoMessage() {}

func (x *IdentifierFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierFrame.ProtoReflect.Descriptor instead.
func (*IdentifierFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{8}
}

func (x *IdentifierFrame) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *IdentifierFrame) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type PasswordFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *PasswordFrame) Reset() {
	*x = PasswordFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordFrame) ProtoMessage() {}

func (x *PasswordFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordFrame.ProtoReflect.Descriptor instead.
func (*PasswordFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{9}
}

func (x *PasswordFrame) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PasswordFrame) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type HeartbeatFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatFrame) Reset() {
	*x = HeartbeatFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatFrame) ProtoMessage() {}

func (x *HeartbeatFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatFrame.ProtoReflect.Descriptor instead.
func (*HeartbeatFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{10}
}

// TODO: unidentified f_stash_end frame
type FStashEndFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FStashEndFrame) Reset() {
	*x = FStashEndFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FStashEndFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FStashEndFrame) ProtoMessage() {}

func (x *FStashEndFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FStashEndFrame.ProtoReflect.Descriptor instead.
func (*FStashEndFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{11}
}

// TODO: unidentified c_close frame
type CCloseFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCloseFrame) Reset() {
	*x = CCloseFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloseFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloseFrame) ProtoMessage() {}

func (x *CCloseFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloseFrame.ProtoReflect.Descriptor instead.
func (*CCloseFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{12}
}

// TODO: unidentified lbs frame
type LBSFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LBSFrame) Reset() {
	*x = LBSFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LBSFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LBSFrame) ProtoMessage() {}

func (x *LBSFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LBSFrame.ProtoReflect.Descriptor instead.
func (*LBSFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{13}
}

func (x *LBSFrame) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type MultiTargetFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId  string `protobuf:"bytes,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	TargetId uint32 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
}

func (x *MultiTargetFrame) Reset() {
	*x = MultiTargetFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTargetFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTargetFrame) ProtoMessage() {}

func (x *MultiTargetFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTargetFrame.ProtoReflect.Descriptor instead.
func (*MultiTargetFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{14}
}

func (x *MultiTargetFrame) GetSkillId() string {
	if x != nil {
		return x.SkillId
	}
	return ""
}

func (x *MultiTargetFrame) GetTargetId() uint32 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

type MultiTargetListFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAmount uint32              `protobuf:"varint,1,opt,name=target_amount,json=targetAmount,proto3" json:"target_amount,omitempty"`
	Targets      []*MultiTargetFrame `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *MultiTargetListFrame) Reset() {
	*x = MultiTargetListFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTargetListFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTargetListFrame) ProtoMessage() {}

func (x *MultiTargetListFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTargetListFrame.ProtoReflect.Descriptor instead.
func (*MultiTargetListFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{15}
}

func (x *MultiTargetListFrame) GetTargetAmount() uint32 {
	if x != nil {
		return x.TargetAmount
	}
	return 0
}

func (x *MultiTargetListFrame) GetTargets() []*MultiTargetFrame {
	if x != nil {
		return x.Targets
	}
	return nil
}

type RequestFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId uint32      `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	Type        RequestType `protobuf:"varint,2,opt,name=type,proto3,enum=shikanime.elkia.eventing.v1alpha1.RequestType" json:"type,omitempty"`
}

func (x *RequestFrame) Reset() {
	*x = RequestFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFrame) ProtoMessage() {}

func (x *RequestFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFrame.ProtoReflect.Descriptor instead.
func (*RequestFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{16}
}

func (x *RequestFrame) GetCharacterId() uint32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *RequestFrame) GetType() RequestType {
	if x != nil {
		return x.Type
	}
	return RequestType_REQUESTED
}

type GlobalOptionsFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option CharacterOptions `protobuf:"varint,1,opt,name=option,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterOptions" json:"option,omitempty"`
}

func (x *GlobalOptionsFrame) Reset() {
	*x = GlobalOptionsFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalOptionsFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalOptionsFrame) ProtoMessage() {}

func (x *GlobalOptionsFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalOptionsFrame.ProtoReflect.Descriptor instead.
func (*GlobalOptionsFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{17}
}

func (x *GlobalOptionsFrame) GetOption() CharacterOptions {
	if x != nil {
		return x.Option
	}
	return CharacterOptions_EXCHANGE_BLOCKED
}

type CommandFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*CommandFrame_RawFrame
	//	*CommandFrame_HeartbeatFrame
	//	*CommandFrame_FStashEndFrame
	//	*CommandFrame_CCloseFrame
	//	*CommandFrame_LbsFrame
	//	*CommandFrame_MultiTargetListFrame
	//	*CommandFrame_RequestFrame
	//	*CommandFrame_GlobalOptionsFrame
	Payload isCommandFrame_Payload `protobuf_oneof:"payload"`
}

func (x *CommandFrame) Reset() {
	*x = CommandFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandFrame) ProtoMessage() {}

func (x *CommandFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandFrame.ProtoReflect.Descriptor instead.
func (*CommandFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{18}
}

func (x *CommandFrame) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (m *CommandFrame) GetPayload() isCommandFrame_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CommandFrame) GetRawFrame() []byte {
	if x, ok := x.GetPayload().(*CommandFrame_RawFrame); ok {
		return x.RawFrame
	}
	return nil
}

func (x *CommandFrame) GetHeartbeatFrame() *HeartbeatFrame {
	if x, ok := x.GetPayload().(*CommandFrame_HeartbeatFrame); ok {
		return x.HeartbeatFrame
	}
	return nil
}

func (x *CommandFrame) GetFStashEndFrame() *FStashEndFrame {
	if x, ok := x.GetPayload().(*CommandFrame_FStashEndFrame); ok {
		return x.FStashEndFrame
	}
	return nil
}

func (x *CommandFrame) GetCCloseFrame() *CCloseFrame {
	if x, ok := x.GetPayload().(*CommandFrame_CCloseFrame); ok {
		return x.CCloseFrame
	}
	return nil
}

func (x *CommandFrame) GetLbsFrame() *LBSFrame {
	if x, ok := x.GetPayload().(*CommandFrame_LbsFrame); ok {
		return x.LbsFrame
	}
	return nil
}

func (x *CommandFrame) GetMultiTargetListFrame() *MultiTargetListFrame {
	if x, ok := x.GetPayload().(*CommandFrame_MultiTargetListFrame); ok {
		return x.MultiTargetListFrame
	}
	return nil
}

func (x *CommandFrame) GetRequestFrame() *RequestFrame {
	if x, ok := x.GetPayload().(*CommandFrame_RequestFrame); ok {
		return x.RequestFrame
	}
	return nil
}

func (x *CommandFrame) GetGlobalOptionsFrame() *GlobalOptionsFrame {
	if x, ok := x.GetPayload().(*CommandFrame_GlobalOptionsFrame); ok {
		return x.GlobalOptionsFrame
	}
	return nil
}

type isCommandFrame_Payload interface {
	isCommandFrame_Payload()
}

type CommandFrame_RawFrame struct {
	RawFrame []byte `protobuf:"bytes,2,opt,name=raw_frame,json=rawFrame,proto3,oneof"`
}

type CommandFrame_HeartbeatFrame struct {
	HeartbeatFrame *HeartbeatFrame `protobuf:"bytes,3,opt,name=heartbeat_frame,json=heartbeatFrame,proto3,oneof"`
}

type CommandFrame_FStashEndFrame struct {
	FStashEndFrame *FStashEndFrame `protobuf:"bytes,4,opt,name=f_stash_end_frame,json=fStashEndFrame,proto3,oneof"`
}

type CommandFrame_CCloseFrame struct {
	CCloseFrame *CCloseFrame `protobuf:"bytes,5,opt,name=c_close_frame,json=cCloseFrame,proto3,oneof"`
}

type CommandFrame_LbsFrame struct {
	LbsFrame *LBSFrame `protobuf:"bytes,6,opt,name=lbs_frame,json=lbsFrame,proto3,oneof"`
}

type CommandFrame_MultiTargetListFrame struct {
	MultiTargetListFrame *MultiTargetListFrame `protobuf:"bytes,7,opt,name=multi_target_list_frame,json=multiTargetListFrame,proto3,oneof"`
}

type CommandFrame_RequestFrame struct {
	RequestFrame *RequestFrame `protobuf:"bytes,8,opt,name=request_frame,json=requestFrame,proto3,oneof"`
}

type CommandFrame_GlobalOptionsFrame struct {
	GlobalOptionsFrame *GlobalOptionsFrame `protobuf:"bytes,9,opt,name=global_options_frame,json=globalOptionsFrame,proto3,oneof"`
}

func (*CommandFrame_RawFrame) isCommandFrame_Payload() {}

func (*CommandFrame_HeartbeatFrame) isCommandFrame_Payload() {}

func (*CommandFrame_FStashEndFrame) isCommandFrame_Payload() {}

func (*CommandFrame_CCloseFrame) isCommandFrame_Payload() {}

func (*CommandFrame_LbsFrame) isCommandFrame_Payload() {}

func (*CommandFrame_MultiTargetListFrame) isCommandFrame_Payload() {}

func (*CommandFrame_RequestFrame) isCommandFrame_Payload() {}

func (*CommandFrame_GlobalOptionsFrame) isCommandFrame_Payload() {}

type ChannelInteractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*ChannelInteractRequest_SyncFrame
	//	*ChannelInteractRequest_IdentifierFrame
	//	*ChannelInteractRequest_PasswordFrame
	//	*ChannelInteractRequest_CommandFrame
	Payload isChannelInteractRequest_Payload `protobuf_oneof:"payload"`
}

func (x *ChannelInteractRequest) Reset() {
	*x = ChannelInteractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInteractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInteractRequest) ProtoMessage() {}

func (x *ChannelInteractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInteractRequest.ProtoReflect.Descriptor instead.
func (*ChannelInteractRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{19}
}

func (m *ChannelInteractRequest) GetPayload() isChannelInteractRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ChannelInteractRequest) GetSyncFrame() *SyncFrame {
	if x, ok := x.GetPayload().(*ChannelInteractRequest_SyncFrame); ok {
		return x.SyncFrame
	}
	return nil
}

func (x *ChannelInteractRequest) GetIdentifierFrame() *IdentifierFrame {
	if x, ok := x.GetPayload().(*ChannelInteractRequest_IdentifierFrame); ok {
		return x.IdentifierFrame
	}
	return nil
}

func (x *ChannelInteractRequest) GetPasswordFrame() *PasswordFrame {
	if x, ok := x.GetPayload().(*ChannelInteractRequest_PasswordFrame); ok {
		return x.PasswordFrame
	}
	return nil
}

func (x *ChannelInteractRequest) GetCommandFrame() *CommandFrame {
	if x, ok := x.GetPayload().(*ChannelInteractRequest_CommandFrame); ok {
		return x.CommandFrame
	}
	return nil
}

type isChannelInteractRequest_Payload interface {
	isChannelInteractRequest_Payload()
}

type ChannelInteractRequest_SyncFrame struct {
	SyncFrame *SyncFrame `protobuf:"bytes,1,opt,name=sync_frame,json=syncFrame,proto3,oneof"`
}

type ChannelInteractRequest_IdentifierFrame struct {
	IdentifierFrame *IdentifierFrame `protobuf:"bytes,2,opt,name=identifier_frame,json=identifierFrame,proto3,oneof"`
}

type ChannelInteractRequest_PasswordFrame struct {
	PasswordFrame *PasswordFrame `protobuf:"bytes,3,opt,name=password_frame,json=passwordFrame,proto3,oneof"`
}

type ChannelInteractRequest_CommandFrame struct {
	CommandFrame *CommandFrame `protobuf:"bytes,5,opt,name=command_frame,json=commandFrame,proto3,oneof"`
}

func (*ChannelInteractRequest_SyncFrame) isChannelInteractRequest_Payload() {}

func (*ChannelInteractRequest_IdentifierFrame) isChannelInteractRequest_Payload() {}

func (*ChannelInteractRequest_PasswordFrame) isChannelInteractRequest_Payload() {}

func (*ChannelInteractRequest_CommandFrame) isChannelInteractRequest_Payload() {}

type CharacterFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Class          CharacterClass     `protobuf:"varint,2,opt,name=class,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterClass" json:"class,omitempty"`
	Sex            Sex                `protobuf:"varint,3,opt,name=sex,proto3,enum=shikanime.elkia.eventing.v1alpha1.Sex" json:"sex,omitempty"`
	HairColor      CharacterHairColor `protobuf:"varint,4,opt,name=hair_color,json=hairColor,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterHairColor" json:"hair_color,omitempty"`
	HairStyle      CharacterHairStyle `protobuf:"varint,5,opt,name=hair_style,json=hairStyle,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterHairStyle" json:"hair_style,omitempty"`
	Faction        Faction            `protobuf:"varint,6,opt,name=faction,proto3,enum=shikanime.elkia.eventing.v1alpha1.Faction" json:"faction,omitempty"`
	Reputation     int32              `protobuf:"varint,7,opt,name=reputation,proto3" json:"reputation,omitempty"`
	Dignity        int32              `protobuf:"varint,8,opt,name=dignity,proto3" json:"dignity,omitempty"`
	Compliment     int32              `protobuf:"varint,9,opt,name=compliment,proto3" json:"compliment,omitempty"`
	Health         int32              `protobuf:"varint,10,opt,name=health,proto3" json:"health,omitempty"`
	Mana           int32              `protobuf:"varint,11,opt,name=mana,proto3" json:"mana,omitempty"`
	Name           string             `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	HeroExperience int32              `protobuf:"varint,13,opt,name=hero_experience,json=heroExperience,proto3" json:"hero_experience,omitempty"`
	HeroLevel      int32              `protobuf:"varint,14,opt,name=hero_level,json=heroLevel,proto3" json:"hero_level,omitempty"`
	JobExperience  int32              `protobuf:"varint,15,opt,name=job_experience,json=jobExperience,proto3" json:"job_experience,omitempty"`
	JobLevel       int32              `protobuf:"varint,16,opt,name=job_level,json=jobLevel,proto3" json:"job_level,omitempty"`
	Experience     int32              `protobuf:"varint,17,opt,name=experience,proto3" json:"experience,omitempty"`
	Level          int32              `protobuf:"varint,18,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *CharacterFrame) Reset() {
	*x = CharacterFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterFrame) ProtoMessage() {}

func (x *CharacterFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterFrame.ProtoReflect.Descriptor instead.
func (*CharacterFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{20}
}

func (x *CharacterFrame) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CharacterFrame) GetClass() CharacterClass {
	if x != nil {
		return x.Class
	}
	return CharacterClass_ADVENTURER
}

func (x *CharacterFrame) GetSex() Sex {
	if x != nil {
		return x.Sex
	}
	return Sex_Male
}

func (x *CharacterFrame) GetHairColor() CharacterHairColor {
	if x != nil {
		return x.HairColor
	}
	return CharacterHairColor_MauveTaupe
}

func (x *CharacterFrame) GetHairStyle() CharacterHairStyle {
	if x != nil {
		return x.HairStyle
	}
	return CharacterHairStyle_StyleA
}

func (x *CharacterFrame) GetFaction() Faction {
	if x != nil {
		return x.Faction
	}
	return Faction_Neutral
}

func (x *CharacterFrame) GetReputation() int32 {
	if x != nil {
		return x.Reputation
	}
	return 0
}

func (x *CharacterFrame) GetDignity() int32 {
	if x != nil {
		return x.Dignity
	}
	return 0
}

func (x *CharacterFrame) GetCompliment() int32 {
	if x != nil {
		return x.Compliment
	}
	return 0
}

func (x *CharacterFrame) GetHealth() int32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *CharacterFrame) GetMana() int32 {
	if x != nil {
		return x.Mana
	}
	return 0
}

func (x *CharacterFrame) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharacterFrame) GetHeroExperience() int32 {
	if x != nil {
		return x.HeroExperience
	}
	return 0
}

func (x *CharacterFrame) GetHeroLevel() int32 {
	if x != nil {
		return x.HeroLevel
	}
	return 0
}

func (x *CharacterFrame) GetJobExperience() int32 {
	if x != nil {
		return x.JobExperience
	}
	return 0
}

func (x *CharacterFrame) GetJobLevel() int32 {
	if x != nil {
		return x.JobLevel
	}
	return 0
}

func (x *CharacterFrame) GetExperience() int32 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *CharacterFrame) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type CharacterListFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	CharacterFrames []*CharacterFrame `protobuf:"bytes,2,rep,name=character_frames,json=characterFrames,proto3" json:"character_frames,omitempty"`
}

func (x *CharacterListFrame) Reset() {
	*x = CharacterListFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterListFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterListFrame) ProtoMessage() {}

func (x *CharacterListFrame) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterListFrame.ProtoReflect.Descriptor instead.
func (*CharacterListFrame) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{21}
}

func (x *CharacterListFrame) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CharacterListFrame) GetCharacterFrames() []*CharacterFrame {
	if x != nil {
		return x.CharacterFrames
	}
	return nil
}

type ChannelInteractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*ChannelInteractResponse_ErrorFrame
	//	*ChannelInteractResponse_InfoFrame
	//	*ChannelInteractResponse_CharacterListFrame
	Payload isChannelInteractResponse_Payload `protobuf_oneof:"payload"`
}

func (x *ChannelInteractResponse) Reset() {
	*x = ChannelInteractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInteractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInteractResponse) ProtoMessage() {}

func (x *ChannelInteractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInteractResponse.ProtoReflect.Descriptor instead.
func (*ChannelInteractResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{22}
}

func (m *ChannelInteractResponse) GetPayload() isChannelInteractResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ChannelInteractResponse) GetErrorFrame() *ErrorFrame {
	if x, ok := x.GetPayload().(*ChannelInteractResponse_ErrorFrame); ok {
		return x.ErrorFrame
	}
	return nil
}

func (x *ChannelInteractResponse) GetInfoFrame() *InfoFrame {
	if x, ok := x.GetPayload().(*ChannelInteractResponse_InfoFrame); ok {
		return x.InfoFrame
	}
	return nil
}

func (x *ChannelInteractResponse) GetCharacterListFrame() *CharacterListFrame {
	if x, ok := x.GetPayload().(*ChannelInteractResponse_CharacterListFrame); ok {
		return x.CharacterListFrame
	}
	return nil
}

type isChannelInteractResponse_Payload interface {
	isChannelInteractResponse_Payload()
}

type ChannelInteractResponse_ErrorFrame struct {
	ErrorFrame *ErrorFrame `protobuf:"bytes,1,opt,name=error_frame,json=errorFrame,proto3,oneof"`
}

type ChannelInteractResponse_InfoFrame struct {
	InfoFrame *InfoFrame `protobuf:"bytes,2,opt,name=info_frame,json=infoFrame,proto3,oneof"`
}

type ChannelInteractResponse_CharacterListFrame struct {
	CharacterListFrame *CharacterListFrame `protobuf:"bytes,3,opt,name=character_list_frame,json=characterListFrame,proto3,oneof"`
}

func (*ChannelInteractResponse_ErrorFrame) isChannelInteractResponse_Payload() {}

func (*ChannelInteractResponse_InfoFrame) isChannelInteractResponse_Payload() {}

func (*ChannelInteractResponse_CharacterListFrame) isChannelInteractResponse_Payload() {}

type CharacterAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Class     CharacterClass     `protobuf:"varint,3,opt,name=class,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterClass" json:"class,omitempty"`
	Sex       Sex                `protobuf:"varint,4,opt,name=sex,proto3,enum=shikanime.elkia.eventing.v1alpha1.Sex" json:"sex,omitempty"`
	HairColor CharacterHairColor `protobuf:"varint,5,opt,name=hair_color,json=hairColor,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterHairColor" json:"hair_color,omitempty"`
	HairStyle CharacterHairStyle `protobuf:"varint,6,opt,name=hair_style,json=hairStyle,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterHairStyle" json:"hair_style,omitempty"`
}

func (x *CharacterAddRequest) Reset() {
	*x = CharacterAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterAddRequest) ProtoMessage() {}

func (x *CharacterAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterAddRequest.ProtoReflect.Descriptor instead.
func (*CharacterAddRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{23}
}

func (x *CharacterAddRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CharacterAddRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharacterAddRequest) GetClass() CharacterClass {
	if x != nil {
		return x.Class
	}
	return CharacterClass_ADVENTURER
}

func (x *CharacterAddRequest) GetSex() Sex {
	if x != nil {
		return x.Sex
	}
	return Sex_Male
}

func (x *CharacterAddRequest) GetHairColor() CharacterHairColor {
	if x != nil {
		return x.HairColor
	}
	return CharacterHairColor_MauveTaupe
}

func (x *CharacterAddRequest) GetHairStyle() CharacterHairStyle {
	if x != nil {
		return x.HairStyle
	}
	return CharacterHairStyle_StyleA
}

type CharacterAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CharacterAddResponse) Reset() {
	*x = CharacterAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterAddResponse) ProtoMessage() {}

func (x *CharacterAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterAddResponse.ProtoReflect.Descriptor instead.
func (*CharacterAddResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{24}
}

type CharacterRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CharacterRemoveRequest) Reset() {
	*x = CharacterRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterRemoveRequest) ProtoMessage() {}

func (x *CharacterRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterRemoveRequest.ProtoReflect.Descriptor instead.
func (*CharacterRemoveRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{25}
}

func (x *CharacterRemoveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CharacterRemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CharacterRemoveResponse) Reset() {
	*x = CharacterRemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterRemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterRemoveResponse) ProtoMessage() {}

func (x *CharacterRemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterRemoveResponse.ProtoReflect.Descriptor instead.
func (*CharacterRemoveResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{26}
}

type CharacterUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WorldId    *uint32 `protobuf:"varint,2,opt,name=world_id,json=worldId,proto3,oneof" json:"world_id,omitempty"`
	ChannelId  *uint32 `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3,oneof" json:"channel_id,omitempty"`
	Name       *string `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Address    *string `protobuf:"bytes,5,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Population *uint32 `protobuf:"varint,6,opt,name=population,proto3,oneof" json:"population,omitempty"`
	Capacity   *uint32 `protobuf:"varint,7,opt,name=capacity,proto3,oneof" json:"capacity,omitempty"`
}

func (x *CharacterUpdateRequest) Reset() {
	*x = CharacterUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterUpdateRequest) ProtoMessage() {}

func (x *CharacterUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterUpdateRequest.ProtoReflect.Descriptor instead.
func (*CharacterUpdateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{27}
}

func (x *CharacterUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CharacterUpdateRequest) GetWorldId() uint32 {
	if x != nil && x.WorldId != nil {
		return *x.WorldId
	}
	return 0
}

func (x *CharacterUpdateRequest) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CharacterUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CharacterUpdateRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *CharacterUpdateRequest) GetPopulation() uint32 {
	if x != nil && x.Population != nil {
		return *x.Population
	}
	return 0
}

func (x *CharacterUpdateRequest) GetCapacity() uint32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

type CharacterUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CharacterUpdateResponse) Reset() {
	*x = CharacterUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterUpdateResponse) ProtoMessage() {}

func (x *CharacterUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterUpdateResponse.ProtoReflect.Descriptor instead.
func (*CharacterUpdateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{28}
}

type CharacterListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityId string `protobuf:"bytes,1,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
}

func (x *CharacterListRequest) Reset() {
	*x = CharacterListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterListRequest) ProtoMessage() {}

func (x *CharacterListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterListRequest.ProtoReflect.Descriptor instead.
func (*CharacterListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{29}
}

func (x *CharacterListRequest) GetIdentityId() string {
	if x != nil {
		return x.IdentityId
	}
	return ""
}

type CharacterListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterFrames []*CharacterFrame `protobuf:"bytes,1,rep,name=character_frames,json=characterFrames,proto3" json:"character_frames,omitempty"`
}

func (x *CharacterListResponse) Reset() {
	*x = CharacterListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterListResponse) ProtoMessage() {}

func (x *CharacterListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterListResponse.ProtoReflect.Descriptor instead.
func (*CharacterListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{30}
}

func (x *CharacterListResponse) GetCharacterFrames() []*CharacterFrame {
	if x != nil {
		return x.CharacterFrames
	}
	return nil
}

var File_pkg_api_eventing_v1alpha1_eventing_proto protoreflect.FileDescriptor

var file_pkg_api_eventing_v1alpha1_eventing_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x73, 0x68, 0x69, 0x6b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x49, 0x0a,
	0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x68, 0x69, 0x6b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x25, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x98, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xa3, 0x01, 0x0a, 0x08, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x72, 0x0a, 0x11, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09,
	0x72, 0x61, 0x77, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x61, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b,
	0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x14, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x3b, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x4d, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x47, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x10, 0x0a, 0x0e,
	0x46, 0x53, 0x74, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x0d,
	0x0a, 0x0b, 0x43, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a,
	0x08, 0x4c, 0x42, 0x53, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a,
	0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a,
	0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e,
	0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xe9, 0x05, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x09, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x61, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0f,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x66, 0x5f,
	0x73, 0x74, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x53, 0x74, 0x61, 0x73, 0x68,
	0x45, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x53, 0x74, 0x61,
	0x73, 0x68, 0x45, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x63, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c,
	0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x09, 0x6c, 0x62, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e,
	0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x42, 0x53, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x62, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x17,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x56,
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x12, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x86, 0x03, 0x0a,
	0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68,
	0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x79, 0x6e,
	0x63, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b,
	0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x68, 0x69, 0x6b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xf1, 0x05, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x38, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x65, 0x78, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x54, 0x0a, 0x0a, 0x68,
	0x61, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x48, 0x61, 0x69,
	0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x54, 0x0a, 0x0a, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x48, 0x61, 0x69, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x68, 0x61,
	0x69, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x64, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d,
	0x61, 0x6e, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x68, 0x65, 0x72, 0x6f, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6a, 0x6f, 0x62, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e,
	0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x69, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xe8, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b,
	0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x73, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x78, 0x52,
	0x03, 0x73, 0x65, 0x78, 0x12, 0x54, 0x0a, 0x0a, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x09, 0x68, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0a, 0x68, 0x61,
	0x69, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x48, 0x61, 0x69, 0x72,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x22, 0x16, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x02,
	0x0a, 0x16, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x37, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x15, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x2a, 0xc9, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4f,
	0x55, 0x54, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45,
	0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41,
	0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x4c,
	0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x10, 0x08, 0x2a, 0x52,
	0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52,
	0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x04, 0x2a, 0xb6, 0x02, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x4d,
	0x49, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x48, 0x49, 0x53, 0x50, 0x45, 0x52,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x55, 0x53,
	0x45, 0x5f, 0x41, 0x49, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x43, 0x4f, 0x4e, 0x53,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55,
	0x49, 0x43, 0x4b, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x50, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a,
	0x48, 0x50, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x55, 0x46, 0x46, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x49, 0x4e, 0x49, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0c, 0x2a, 0x5c, 0x0a, 0x0e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x44, 0x56, 0x45, 0x4e, 0x54, 0x55, 0x52, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x4f, 0x52, 0x43, 0x45, 0x52, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x52, 0x43, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x57, 0x4f, 0x52, 0x44,
	0x4d, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x10, 0x04, 0x2a, 0x1b, 0x0a, 0x03, 0x53, 0x65, 0x78,
	0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x65,
	0x6d, 0x61, 0x6c, 0x65, 0x10, 0x01, 0x2a, 0x91, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x61, 0x75, 0x76, 0x65, 0x54, 0x61, 0x75, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x65, 0x72, 0x69, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x61, 0x6e,
	0x4d, 0x61, 0x72, 0x69, 0x6e, 0x6f, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x66, 0x66, 0x61,
	0x69, 0x72, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x69, 0x78, 0x69, 0x65, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x61, 0x76, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x69,
	0x6c, 0x6c, 0x61, 0x72, 0x6e, 0x65, 0x79, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x75, 0x74,
	0x6d, 0x65, 0x67, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x10,
	0x08, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x65, 0x64, 0x10, 0x09, 0x2a, 0x50, 0x0a, 0x12, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x48, 0x61, 0x69, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x43, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x76, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x2c, 0x0a, 0x07,
	0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x75, 0x74, 0x72,
	0x61, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6e, 0x67, 0x65, 0x6c, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x65, 0x6d, 0x6f, 0x6e, 0x10, 0x02, 0x32, 0x9c, 0x02, 0x0a, 0x04, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x36, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73,
	0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x21, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x66, 0x66, 0x46,
	0x6c, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12,
	0x2d, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x1a, 0x37,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x98, 0x01, 0x0a, 0x07, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x39, 0x2e, 0x73, 0x68, 0x69, 0x6b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x30, 0x01, 0x32, 0xa3, 0x04, 0x0a, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x7f,
	0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x36,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x88, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x39, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e,
	0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x68, 0x69, 0x6b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b,
	0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x6f,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2f, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescOnce sync.Once
	file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescData = file_pkg_api_eventing_v1alpha1_eventing_proto_rawDesc
)

func file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP() []byte {
	file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescOnce.Do(func() {
		file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescData)
	})
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescData
}

var file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_pkg_api_eventing_v1alpha1_eventing_proto_goTypes = []interface{}{
	(Code)(0),                       // 0: shikanime.elkia.eventing.v1alpha1.Code
	(RequestType)(0),                // 1: shikanime.elkia.eventing.v1alpha1.RequestType
	(CharacterOptions)(0),           // 2: shikanime.elkia.eventing.v1alpha1.CharacterOptions
	(CharacterClass)(0),             // 3: shikanime.elkia.eventing.v1alpha1.CharacterClass
	(Sex)(0),                        // 4: shikanime.elkia.eventing.v1alpha1.Sex
	(CharacterHairColor)(0),         // 5: shikanime.elkia.eventing.v1alpha1.CharacterHairColor
	(CharacterHairStyle)(0),         // 6: shikanime.elkia.eventing.v1alpha1.CharacterHairStyle
	(Faction)(0),                    // 7: shikanime.elkia.eventing.v1alpha1.Faction
	(*ErrorFrame)(nil),              // 8: shikanime.elkia.eventing.v1alpha1.ErrorFrame
	(*InfoFrame)(nil),               // 9: shikanime.elkia.eventing.v1alpha1.InfoFrame
	(*LoginFrame)(nil),              // 10: shikanime.elkia.eventing.v1alpha1.LoginFrame
	(*Endpoint)(nil),                // 11: shikanime.elkia.eventing.v1alpha1.Endpoint
	(*EndpointListFrame)(nil),       // 12: shikanime.elkia.eventing.v1alpha1.EndpointListFrame
	(*AuthInteractRequest)(nil),     // 13: shikanime.elkia.eventing.v1alpha1.AuthInteractRequest
	(*AuthInteractResponse)(nil),    // 14: shikanime.elkia.eventing.v1alpha1.AuthInteractResponse
	(*SyncFrame)(nil),               // 15: shikanime.elkia.eventing.v1alpha1.SyncFrame
	(*IdentifierFrame)(nil),         // 16: shikanime.elkia.eventing.v1alpha1.IdentifierFrame
	(*PasswordFrame)(nil),           // 17: shikanime.elkia.eventing.v1alpha1.PasswordFrame
	(*HeartbeatFrame)(nil),          // 18: shikanime.elkia.eventing.v1alpha1.HeartbeatFrame
	(*FStashEndFrame)(nil),          // 19: shikanime.elkia.eventing.v1alpha1.FStashEndFrame
	(*CCloseFrame)(nil),             // 20: shikanime.elkia.eventing.v1alpha1.CCloseFrame
	(*LBSFrame)(nil),                // 21: shikanime.elkia.eventing.v1alpha1.LBSFrame
	(*MultiTargetFrame)(nil),        // 22: shikanime.elkia.eventing.v1alpha1.MultiTargetFrame
	(*MultiTargetListFrame)(nil),    // 23: shikanime.elkia.eventing.v1alpha1.MultiTargetListFrame
	(*RequestFrame)(nil),            // 24: shikanime.elkia.eventing.v1alpha1.RequestFrame
	(*GlobalOptionsFrame)(nil),      // 25: shikanime.elkia.eventing.v1alpha1.GlobalOptionsFrame
	(*CommandFrame)(nil),            // 26: shikanime.elkia.eventing.v1alpha1.CommandFrame
	(*ChannelInteractRequest)(nil),  // 27: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest
	(*CharacterFrame)(nil),          // 28: shikanime.elkia.eventing.v1alpha1.CharacterFrame
	(*CharacterListFrame)(nil),      // 29: shikanime.elkia.eventing.v1alpha1.CharacterListFrame
	(*ChannelInteractResponse)(nil), // 30: shikanime.elkia.eventing.v1alpha1.ChannelInteractResponse
	(*CharacterAddRequest)(nil),     // 31: shikanime.elkia.eventing.v1alpha1.CharacterAddRequest
	(*CharacterAddResponse)(nil),    // 32: shikanime.elkia.eventing.v1alpha1.CharacterAddResponse
	(*CharacterRemoveRequest)(nil),  // 33: shikanime.elkia.eventing.v1alpha1.CharacterRemoveRequest
	(*CharacterRemoveResponse)(nil), // 34: shikanime.elkia.eventing.v1alpha1.CharacterRemoveResponse
	(*CharacterUpdateRequest)(nil),  // 35: shikanime.elkia.eventing.v1alpha1.CharacterUpdateRequest
	(*CharacterUpdateResponse)(nil), // 36: shikanime.elkia.eventing.v1alpha1.CharacterUpdateResponse
	(*CharacterListRequest)(nil),    // 37: shikanime.elkia.eventing.v1alpha1.CharacterListRequest
	(*CharacterListResponse)(nil),   // 38: shikanime.elkia.eventing.v1alpha1.CharacterListResponse
}
var file_pkg_api_eventing_v1alpha1_eventing_proto_depIdxs = []int32{
	0,  // 0: shikanime.elkia.eventing.v1alpha1.ErrorFrame.code:type_name -> shikanime.elkia.eventing.v1alpha1.Code
	11, // 1: shikanime.elkia.eventing.v1alpha1.EndpointListFrame.endpoints:type_name -> shikanime.elkia.eventing.v1alpha1.Endpoint
	10, // 2: shikanime.elkia.eventing.v1alpha1.AuthInteractRequest.login_frame:type_name -> shikanime.elkia.eventing.v1alpha1.LoginFrame
	8,  // 3: shikanime.elkia.eventing.v1alpha1.AuthInteractResponse.error_frame:type_name -> shikanime.elkia.eventing.v1alpha1.ErrorFrame
	9,  // 4: shikanime.elkia.eventing.v1alpha1.AuthInteractResponse.info_frame:type_name -> shikanime.elkia.eventing.v1alpha1.InfoFrame
	12, // 5: shikanime.elkia.eventing.v1alpha1.AuthInteractResponse.endpoint_list_frame:type_name -> shikanime.elkia.eventing.v1alpha1.EndpointListFrame
	22, // 6: shikanime.elkia.eventing.v1alpha1.MultiTargetListFrame.targets:type_name -> shikanime.elkia.eventing.v1alpha1.MultiTargetFrame
	1,  // 7: shikanime.elkia.eventing.v1alpha1.RequestFrame.type:type_name -> shikanime.elkia.eventing.v1alpha1.RequestType
	2,  // 8: shikanime.elkia.eventing.v1alpha1.GlobalOptionsFrame.option:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterOptions
	18, // 9: shikanime.elkia.eventing.v1alpha1.CommandFrame.heartbeat_frame:type_name -> shikanime.elkia.eventing.v1alpha1.HeartbeatFrame
	19, // 10: shikanime.elkia.eventing.v1alpha1.CommandFrame.f_stash_end_frame:type_name -> shikanime.elkia.eventing.v1alpha1.FStashEndFrame
	20, // 11: shikanime.elkia.eventing.v1alpha1.CommandFrame.c_close_frame:type_name -> shikanime.elkia.eventing.v1alpha1.CCloseFrame
	21, // 12: shikanime.elkia.eventing.v1alpha1.CommandFrame.lbs_frame:type_name -> shikanime.elkia.eventing.v1alpha1.LBSFrame
	23, // 13: shikanime.elkia.eventing.v1alpha1.CommandFrame.multi_target_list_frame:type_name -> shikanime.elkia.eventing.v1alpha1.MultiTargetListFrame
	24, // 14: shikanime.elkia.eventing.v1alpha1.CommandFrame.request_frame:type_name -> shikanime.elkia.eventing.v1alpha1.RequestFrame
	25, // 15: shikanime.elkia.eventing.v1alpha1.CommandFrame.global_options_frame:type_name -> shikanime.elkia.eventing.v1alpha1.GlobalOptionsFrame
	15, // 16: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest.sync_frame:type_name -> shikanime.elkia.eventing.v1alpha1.SyncFrame
	16, // 17: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest.identifier_frame:type_name -> shikanime.elkia.eventing.v1alpha1.IdentifierFrame
	17, // 18: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest.password_frame:type_name -> shikanime.elkia.eventing.v1alpha1.PasswordFrame
	26, // 19: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest.command_frame:type_name -> shikanime.elkia.eventing.v1alpha1.CommandFrame
	3,  // 20: shikanime.elkia.eventing.v1alpha1.CharacterFrame.class:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterClass
	4,  // 21: shikanime.elkia.eventing.v1alpha1.CharacterFrame.sex:type_name -> shikanime.elkia.eventing.v1alpha1.Sex
	5,  // 22: shikanime.elkia.eventing.v1alpha1.CharacterFrame.hair_color:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterHairColor
	6,  // 23: shikanime.elkia.eventing.v1alpha1.CharacterFrame.hair_style:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterHairStyle
	7,  // 24: shikanime.elkia.eventing.v1alpha1.CharacterFrame.faction:type_name -> shikanime.elkia.eventing.v1alpha1.Faction
	28, // 25: shikanime.elkia.eventing.v1alpha1.CharacterListFrame.character_frames:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterFrame
	8,  // 26: shikanime.elkia.eventing.v1alpha1.ChannelInteractResponse.error_frame:type_name -> shikanime.elkia.eventing.v1alpha1.ErrorFrame
	9,  // 27: shikanime.elkia.eventing.v1alpha1.ChannelInteractResponse.info_frame:type_name -> shikanime.elkia.eventing.v1alpha1.InfoFrame
	29, // 28: shikanime.elkia.eventing.v1alpha1.ChannelInteractResponse.character_list_frame:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterListFrame
	3,  // 29: shikanime.elkia.eventing.v1alpha1.CharacterAddRequest.class:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterClass
	4,  // 30: shikanime.elkia.eventing.v1alpha1.CharacterAddRequest.sex:type_name -> shikanime.elkia.eventing.v1alpha1.Sex
	5,  // 31: shikanime.elkia.eventing.v1alpha1.CharacterAddRequest.hair_color:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterHairColor
	6,  // 32: shikanime.elkia.eventing.v1alpha1.CharacterAddRequest.hair_style:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterHairStyle
	28, // 33: shikanime.elkia.eventing.v1alpha1.CharacterListResponse.character_frames:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterFrame
	13, // 34: shikanime.elkia.eventing.v1alpha1.Auth.AuthInteract:input_type -> shikanime.elkia.eventing.v1alpha1.AuthInteractRequest
	10, // 35: shikanime.elkia.eventing.v1alpha1.Auth.AuthCreateHandoffFlowFrameProduce:input_type -> shikanime.elkia.eventing.v1alpha1.LoginFrame
	27, // 36: shikanime.elkia.eventing.v1alpha1.Gateway.ChannelInteract:input_type -> shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest
	31, // 37: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterAdd:input_type -> shikanime.elkia.eventing.v1alpha1.CharacterAddRequest
	33, // 38: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterRemove:input_type -> shikanime.elkia.eventing.v1alpha1.CharacterRemoveRequest
	35, // 39: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterUpdate:input_type -> shikanime.elkia.eventing.v1alpha1.CharacterUpdateRequest
	37, // 40: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterList:input_type -> shikanime.elkia.eventing.v1alpha1.CharacterListRequest
	14, // 41: shikanime.elkia.eventing.v1alpha1.Auth.AuthInteract:output_type -> shikanime.elkia.eventing.v1alpha1.AuthInteractResponse
	14, // 42: shikanime.elkia.eventing.v1alpha1.Auth.AuthCreateHandoffFlowFrameProduce:output_type -> shikanime.elkia.eventing.v1alpha1.AuthInteractResponse
	30, // 43: shikanime.elkia.eventing.v1alpha1.Gateway.ChannelInteract:output_type -> shikanime.elkia.eventing.v1alpha1.ChannelInteractResponse
	32, // 44: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterAdd:output_type -> shikanime.elkia.eventing.v1alpha1.CharacterAddResponse
	34, // 45: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterRemove:output_type -> shikanime.elkia.eventing.v1alpha1.CharacterRemoveResponse
	36, // 46: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterUpdate:output_type -> shikanime.elkia.eventing.v1alpha1.CharacterUpdateResponse
	38, // 47: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterList:output_type -> shikanime.elkia.eventing.v1alpha1.CharacterListResponse
	41, // [41:48] is the sub-list for method output_type
	34, // [34:41] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_pkg_api_eventing_v1alpha1_eventing_proto_init() }
func file_pkg_api_eventing_v1alpha1_eventing_proto_init() {
	if File_pkg_api_eventing_v1alpha1_eventing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointListFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthInteractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthInteractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FStashEndFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloseFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LBSFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTargetFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTargetListFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalOptionsFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInteractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterListFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInteractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterRemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AuthInteractRequest_RawFrame)(nil),
		(*AuthInteractRequest_LoginFrame)(nil),
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*AuthInteractResponse_ErrorFrame)(nil),
		(*AuthInteractResponse_InfoFrame)(nil),
		(*AuthInteractResponse_EndpointListFrame)(nil),
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*CommandFrame_RawFrame)(nil),
		(*CommandFrame_HeartbeatFrame)(nil),
		(*CommandFrame_FStashEndFrame)(nil),
		(*CommandFrame_CCloseFrame)(nil),
		(*CommandFrame_LbsFrame)(nil),
		(*CommandFrame_MultiTargetListFrame)(nil),
		(*CommandFrame_RequestFrame)(nil),
		(*CommandFrame_GlobalOptionsFrame)(nil),
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ChannelInteractRequest_SyncFrame)(nil),
		(*ChannelInteractRequest_IdentifierFrame)(nil),
		(*ChannelInteractRequest_PasswordFrame)(nil),
		(*ChannelInteractRequest_CommandFrame)(nil),
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ChannelInteractResponse_ErrorFrame)(nil),
		(*ChannelInteractResponse_InfoFrame)(nil),
		(*ChannelInteractResponse_CharacterListFrame)(nil),
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[27].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_eventing_v1alpha1_eventing_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_pkg_api_eventing_v1alpha1_eventing_proto_goTypes,
		DependencyIndexes: file_pkg_api_eventing_v1alpha1_eventing_proto_depIdxs,
		EnumInfos:         file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes,
		MessageInfos:      file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes,
	}.Build()
	File_pkg_api_eventing_v1alpha1_eventing_proto = out.File
	file_pkg_api_eventing_v1alpha1_eventing_proto_rawDesc = nil
	file_pkg_api_eventing_v1alpha1_eventing_proto_goTypes = nil
	file_pkg_api_eventing_v1alpha1_eventing_proto_depIdxs = nil
}
