// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.12
// source: pkg/api/eventing/v1alpha1/eventing.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Code int32

const (
	Code_OUTDATED_CLIENT      Code = 0
	Code_UNEXPECTED_ERROR     Code = 1
	Code_MAINTENANCE          Code = 2
	Code_SESSION_ALREADY_USED Code = 3
	Code_UNVALID_CREDENTIALS  Code = 4
	Code_CANT_AUTHENTICATE    Code = 5
	Code_USER_BLOCKLISTED     Code = 6
	Code_COUNTRY_BLACKLISTED  Code = 7
	Code_BAD_CASE             Code = 8
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0: "OUTDATED_CLIENT",
		1: "UNEXPECTED_ERROR",
		2: "MAINTENANCE",
		3: "SESSION_ALREADY_USED",
		4: "UNVALID_CREDENTIALS",
		5: "CANT_AUTHENTICATE",
		6: "USER_BLOCKLISTED",
		7: "COUNTRY_BLACKLISTED",
		8: "BAD_CASE",
	}
	Code_value = map[string]int32{
		"OUTDATED_CLIENT":      0,
		"UNEXPECTED_ERROR":     1,
		"MAINTENANCE":          2,
		"SESSION_ALREADY_USED": 3,
		"UNVALID_CREDENTIALS":  4,
		"CANT_AUTHENTICATE":    5,
		"USER_BLOCKLISTED":     6,
		"COUNTRY_BLACKLISTED":  7,
		"BAD_CASE":             8,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{0}
}

type RequestType int32

const (
	RequestType_REQUESTED RequestType = 0
	RequestType_LIST      RequestType = 1
	RequestType_CONFIRMED RequestType = 2
	RequestType_CANCELLED RequestType = 3
	RequestType_DECLINED  RequestType = 4
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0: "REQUESTED",
		1: "LIST",
		2: "CONFIRMED",
		3: "CANCELLED",
		4: "DECLINED",
	}
	RequestType_value = map[string]int32{
		"REQUESTED": 0,
		"LIST":      1,
		"CONFIRMED": 2,
		"CANCELLED": 3,
		"DECLINED":  4,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[1].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[1]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{1}
}

type CharacterOptions int32

const (
	CharacterOptions_EXCHANGE_BLOCKED        CharacterOptions = 0
	CharacterOptions_FRIEND_REQUEST_BLOCKED  CharacterOptions = 1
	CharacterOptions_FAMILY_REQUEST_BLOCKED  CharacterOptions = 2
	CharacterOptions_WHISPER_BLOCKED         CharacterOptions = 3
	CharacterOptions_GROUP_REQUEST_BLOCKED   CharacterOptions = 4
	CharacterOptions_GROUP_SHARING           CharacterOptions = 5
	CharacterOptions_MOUSE_AIM_LOCK          CharacterOptions = 6
	CharacterOptions_HERO_CHAT_BLOCKED       CharacterOptions = 7
	CharacterOptions_EMOTICONS_BLOCKED       CharacterOptions = 8
	CharacterOptions_QUICK_GET_UP            CharacterOptions = 9
	CharacterOptions_HP_BLOCKED              CharacterOptions = 10
	CharacterOptions_BUFF_BLOCKED            CharacterOptions = 11
	CharacterOptions_MINILAND_INVITE_BLOCKED CharacterOptions = 12
)

// Enum value maps for CharacterOptions.
var (
	CharacterOptions_name = map[int32]string{
		0:  "EXCHANGE_BLOCKED",
		1:  "FRIEND_REQUEST_BLOCKED",
		2:  "FAMILY_REQUEST_BLOCKED",
		3:  "WHISPER_BLOCKED",
		4:  "GROUP_REQUEST_BLOCKED",
		5:  "GROUP_SHARING",
		6:  "MOUSE_AIM_LOCK",
		7:  "HERO_CHAT_BLOCKED",
		8:  "EMOTICONS_BLOCKED",
		9:  "QUICK_GET_UP",
		10: "HP_BLOCKED",
		11: "BUFF_BLOCKED",
		12: "MINILAND_INVITE_BLOCKED",
	}
	CharacterOptions_value = map[string]int32{
		"EXCHANGE_BLOCKED":        0,
		"FRIEND_REQUEST_BLOCKED":  1,
		"FAMILY_REQUEST_BLOCKED":  2,
		"WHISPER_BLOCKED":         3,
		"GROUP_REQUEST_BLOCKED":   4,
		"GROUP_SHARING":           5,
		"MOUSE_AIM_LOCK":          6,
		"HERO_CHAT_BLOCKED":       7,
		"EMOTICONS_BLOCKED":       8,
		"QUICK_GET_UP":            9,
		"HP_BLOCKED":              10,
		"BUFF_BLOCKED":            11,
		"MINILAND_INVITE_BLOCKED": 12,
	}
)

func (x CharacterOptions) Enum() *CharacterOptions {
	p := new(CharacterOptions)
	*p = x
	return p
}

func (x CharacterOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[2].Descriptor()
}

func (CharacterOptions) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[2]
}

func (x CharacterOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterOptions.Descriptor instead.
func (CharacterOptions) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{2}
}

type CharacterClass int32

const (
	CharacterClass_ADVENTURER     CharacterClass = 0
	CharacterClass_SORCERER       CharacterClass = 1
	CharacterClass_ARCHER         CharacterClass = 2
	CharacterClass_SWORDMAN       CharacterClass = 3
	CharacterClass_MARTIAL_ARTIST CharacterClass = 4
)

// Enum value maps for CharacterClass.
var (
	CharacterClass_name = map[int32]string{
		0: "ADVENTURER",
		1: "SORCERER",
		2: "ARCHER",
		3: "SWORDMAN",
		4: "MARTIAL_ARTIST",
	}
	CharacterClass_value = map[string]int32{
		"ADVENTURER":     0,
		"SORCERER":       1,
		"ARCHER":         2,
		"SWORDMAN":       3,
		"MARTIAL_ARTIST": 4,
	}
)

func (x CharacterClass) Enum() *CharacterClass {
	p := new(CharacterClass)
	*p = x
	return p
}

func (x CharacterClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterClass) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[3].Descriptor()
}

func (CharacterClass) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[3]
}

func (x CharacterClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterClass.Descriptor instead.
func (CharacterClass) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{3}
}

type Sex int32

const (
	Sex_Male   Sex = 0
	Sex_Female Sex = 1
)

// Enum value maps for Sex.
var (
	Sex_name = map[int32]string{
		0: "Male",
		1: "Female",
	}
	Sex_value = map[string]int32{
		"Male":   0,
		"Female": 1,
	}
)

func (x Sex) Enum() *Sex {
	p := new(Sex)
	*p = x
	return p
}

func (x Sex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sex) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[4].Descriptor()
}

func (Sex) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[4]
}

func (x Sex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sex.Descriptor instead.
func (Sex) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{4}
}

type CharacterHairColor int32

const (
	CharacterHairColor_MauveTaupe CharacterHairColor = 0
	CharacterHairColor_Cerise     CharacterHairColor = 1
	CharacterHairColor_SanMarino  CharacterHairColor = 2
	CharacterHairColor_Affair     CharacterHairColor = 3
	CharacterHairColor_Dixie      CharacterHairColor = 4
	CharacterHairColor_Raven      CharacterHairColor = 5
	CharacterHairColor_Killarney  CharacterHairColor = 6
	CharacterHairColor_Nutmeg     CharacterHairColor = 7
	CharacterHairColor_Saddle     CharacterHairColor = 8
	CharacterHairColor_Red        CharacterHairColor = 9
)

// Enum value maps for CharacterHairColor.
var (
	CharacterHairColor_name = map[int32]string{
		0: "MauveTaupe",
		1: "Cerise",
		2: "SanMarino",
		3: "Affair",
		4: "Dixie",
		5: "Raven",
		6: "Killarney",
		7: "Nutmeg",
		8: "Saddle",
		9: "Red",
	}
	CharacterHairColor_value = map[string]int32{
		"MauveTaupe": 0,
		"Cerise":     1,
		"SanMarino":  2,
		"Affair":     3,
		"Dixie":      4,
		"Raven":      5,
		"Killarney":  6,
		"Nutmeg":     7,
		"Saddle":     8,
		"Red":        9,
	}
)

func (x CharacterHairColor) Enum() *CharacterHairColor {
	p := new(CharacterHairColor)
	*p = x
	return p
}

func (x CharacterHairColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterHairColor) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[5].Descriptor()
}

func (CharacterHairColor) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[5]
}

func (x CharacterHairColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterHairColor.Descriptor instead.
func (CharacterHairColor) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{5}
}

type CharacterHairStyle int32

const (
	CharacterHairStyle_StyleA CharacterHairStyle = 0
	CharacterHairStyle_StyleB CharacterHairStyle = 1
	CharacterHairStyle_StyleC CharacterHairStyle = 2
	CharacterHairStyle_StyleD CharacterHairStyle = 3
	CharacterHairStyle_Shaved CharacterHairStyle = 4
)

// Enum value maps for CharacterHairStyle.
var (
	CharacterHairStyle_name = map[int32]string{
		0: "StyleA",
		1: "StyleB",
		2: "StyleC",
		3: "StyleD",
		4: "Shaved",
	}
	CharacterHairStyle_value = map[string]int32{
		"StyleA": 0,
		"StyleB": 1,
		"StyleC": 2,
		"StyleD": 3,
		"Shaved": 4,
	}
)

func (x CharacterHairStyle) Enum() *CharacterHairStyle {
	p := new(CharacterHairStyle)
	*p = x
	return p
}

func (x CharacterHairStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterHairStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[6].Descriptor()
}

func (CharacterHairStyle) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[6]
}

func (x CharacterHairStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterHairStyle.Descriptor instead.
func (CharacterHairStyle) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{6}
}

type Faction int32

const (
	Faction_Neutral Faction = 0
	Faction_Angel   Faction = 1
	Faction_Demon   Faction = 2
)

// Enum value maps for Faction.
var (
	Faction_name = map[int32]string{
		0: "Neutral",
		1: "Angel",
		2: "Demon",
	}
	Faction_value = map[string]int32{
		"Neutral": 0,
		"Angel":   1,
		"Demon":   2,
	}
)

func (x Faction) Enum() *Faction {
	p := new(Faction)
	*p = x
	return p
}

func (x Faction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Faction) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[7].Descriptor()
}

func (Faction) Type() protoreflect.EnumType {
	return &file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes[7]
}

func (x Faction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Faction.Descriptor instead.
func (Faction) EnumDescriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{7}
}

type ErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=shikanime.elkia.eventing.v1alpha1.Code" json:"code,omitempty"`
}

func (x *ErrorEvent) Reset() {
	*x = ErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorEvent) ProtoMessage() {}

func (x *ErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorEvent.ProtoReflect.Descriptor instead.
func (*ErrorEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorEvent) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OUTDATED_CLIENT
}

type InfoEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *InfoEvent) Reset() {
	*x = InfoEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoEvent) ProtoMessage() {}

func (x *InfoEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoEvent.ProtoReflect.Descriptor instead.
func (*InfoEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{1}
}

func (x *InfoEvent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type LoginCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier     string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Password       string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	ClientVersion  string `protobuf:"bytes,5,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ClientChecksum string `protobuf:"bytes,7,opt,name=client_checksum,json=clientChecksum,proto3" json:"client_checksum,omitempty"`
}

func (x *LoginCommand) Reset() {
	*x = LoginCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginCommand) ProtoMessage() {}

func (x *LoginCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginCommand.ProtoReflect.Descriptor instead.
func (*LoginCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{2}
}

func (x *LoginCommand) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *LoginCommand) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginCommand) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *LoginCommand) GetClientChecksum() string {
	if x != nil {
		return x.ClientChecksum
	}
	return ""
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host      string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port      string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Weight    uint32 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	WorldId   uint32 `protobuf:"varint,4,opt,name=world_id,json=worldId,proto3" json:"world_id,omitempty"`
	ChannelId uint32 `protobuf:"varint,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	WorldName string `protobuf:"bytes,6,opt,name=world_name,json=worldName,proto3" json:"world_name,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{3}
}

func (x *Endpoint) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Endpoint) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Endpoint) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Endpoint) GetWorldId() uint32 {
	if x != nil {
		return x.WorldId
	}
	return 0
}

func (x *Endpoint) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *Endpoint) GetWorldName() string {
	if x != nil {
		return x.WorldName
	}
	return ""
}

type EndpointListEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Endpoints []*Endpoint `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *EndpointListEvent) Reset() {
	*x = EndpointListEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointListEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointListEvent) ProtoMessage() {}

func (x *EndpointListEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointListEvent.ProtoReflect.Descriptor instead.
func (*EndpointListEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{4}
}

func (x *EndpointListEvent) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EndpointListEvent) GetEndpoints() []*Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type AuthInteractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*AuthInteractRequest_RawCommand
	//	*AuthInteractRequest_LoginCommand
	Payload isAuthInteractRequest_Payload `protobuf_oneof:"payload"`
}

func (x *AuthInteractRequest) Reset() {
	*x = AuthInteractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthInteractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthInteractRequest) ProtoMessage() {}

func (x *AuthInteractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthInteractRequest.ProtoReflect.Descriptor instead.
func (*AuthInteractRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{5}
}

func (m *AuthInteractRequest) GetPayload() isAuthInteractRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AuthInteractRequest) GetRawCommand() []byte {
	if x, ok := x.GetPayload().(*AuthInteractRequest_RawCommand); ok {
		return x.RawCommand
	}
	return nil
}

func (x *AuthInteractRequest) GetLoginCommand() *LoginCommand {
	if x, ok := x.GetPayload().(*AuthInteractRequest_LoginCommand); ok {
		return x.LoginCommand
	}
	return nil
}

type isAuthInteractRequest_Payload interface {
	isAuthInteractRequest_Payload()
}

type AuthInteractRequest_RawCommand struct {
	RawCommand []byte `protobuf:"bytes,1,opt,name=raw_command,json=rawCommand,proto3,oneof"`
}

type AuthInteractRequest_LoginCommand struct {
	LoginCommand *LoginCommand `protobuf:"bytes,2,opt,name=login_command,json=loginCommand,proto3,oneof"`
}

func (*AuthInteractRequest_RawCommand) isAuthInteractRequest_Payload() {}

func (*AuthInteractRequest_LoginCommand) isAuthInteractRequest_Payload() {}

type AuthInteractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*AuthInteractResponse_ErrorEvent
	//	*AuthInteractResponse_InfoEvent
	//	*AuthInteractResponse_EndpointListEvent
	Payload isAuthInteractResponse_Payload `protobuf_oneof:"payload"`
}

func (x *AuthInteractResponse) Reset() {
	*x = AuthInteractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthInteractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthInteractResponse) ProtoMessage() {}

func (x *AuthInteractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthInteractResponse.ProtoReflect.Descriptor instead.
func (*AuthInteractResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{6}
}

func (m *AuthInteractResponse) GetPayload() isAuthInteractResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AuthInteractResponse) GetErrorEvent() *ErrorEvent {
	if x, ok := x.GetPayload().(*AuthInteractResponse_ErrorEvent); ok {
		return x.ErrorEvent
	}
	return nil
}

func (x *AuthInteractResponse) GetInfoEvent() *InfoEvent {
	if x, ok := x.GetPayload().(*AuthInteractResponse_InfoEvent); ok {
		return x.InfoEvent
	}
	return nil
}

func (x *AuthInteractResponse) GetEndpointListEvent() *EndpointListEvent {
	if x, ok := x.GetPayload().(*AuthInteractResponse_EndpointListEvent); ok {
		return x.EndpointListEvent
	}
	return nil
}

type isAuthInteractResponse_Payload interface {
	isAuthInteractResponse_Payload()
}

type AuthInteractResponse_ErrorEvent struct {
	ErrorEvent *ErrorEvent `protobuf:"bytes,1,opt,name=error_event,json=errorEvent,proto3,oneof"`
}

type AuthInteractResponse_InfoEvent struct {
	InfoEvent *InfoEvent `protobuf:"bytes,2,opt,name=info_event,json=infoEvent,proto3,oneof"`
}

type AuthInteractResponse_EndpointListEvent struct {
	EndpointListEvent *EndpointListEvent `protobuf:"bytes,3,opt,name=endpoint_list_event,json=endpointListEvent,proto3,oneof"`
}

func (*AuthInteractResponse_ErrorEvent) isAuthInteractResponse_Payload() {}

func (*AuthInteractResponse_InfoEvent) isAuthInteractResponse_Payload() {}

func (*AuthInteractResponse_EndpointListEvent) isAuthInteractResponse_Payload() {}

type SyncCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Code     uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *SyncCommand) Reset() {
	*x = SyncCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncCommand) ProtoMessage() {}

func (x *SyncCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncCommand.ProtoReflect.Descriptor instead.
func (*SyncCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{7}
}

func (x *SyncCommand) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *SyncCommand) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type IdentifierCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence   uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *IdentifierCommand) Reset() {
	*x = IdentifierCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierCommand) ProtoMessage() {}

func (x *IdentifierCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierCommand.ProtoReflect.Descriptor instead.
func (*IdentifierCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{8}
}

func (x *IdentifierCommand) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *IdentifierCommand) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type PasswordCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *PasswordCommand) Reset() {
	*x = PasswordCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordCommand) ProtoMessage() {}

func (x *PasswordCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordCommand.ProtoReflect.Descriptor instead.
func (*PasswordCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{9}
}

func (x *PasswordCommand) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PasswordCommand) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type HeartbeatCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatCommand) Reset() {
	*x = HeartbeatCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatCommand) ProtoMessage() {}

func (x *HeartbeatCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatCommand.ProtoReflect.Descriptor instead.
func (*HeartbeatCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{10}
}

// TODO: unidentified f_stash_end frame
type FStashEndCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FStashEndCommand) Reset() {
	*x = FStashEndCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FStashEndCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FStashEndCommand) ProtoMessage() {}

func (x *FStashEndCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FStashEndCommand.ProtoReflect.Descriptor instead.
func (*FStashEndCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{11}
}

// TODO: unidentified c_close frame
type CCloseCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CCloseCommand) Reset() {
	*x = CCloseCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloseCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloseCommand) ProtoMessage() {}

func (x *CCloseCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloseCommand.ProtoReflect.Descriptor instead.
func (*CCloseCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{12}
}

// TODO: unidentified lbs frame
type LBSCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *LBSCommand) Reset() {
	*x = LBSCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LBSCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LBSCommand) ProtoMessage() {}

func (x *LBSCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LBSCommand.ProtoReflect.Descriptor instead.
func (*LBSCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{13}
}

func (x *LBSCommand) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type MultiTargetCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillId  string `protobuf:"bytes,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	TargetId uint32 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
}

func (x *MultiTargetCommand) Reset() {
	*x = MultiTargetCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTargetCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTargetCommand) ProtoMessage() {}

func (x *MultiTargetCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTargetCommand.ProtoReflect.Descriptor instead.
func (*MultiTargetCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{14}
}

func (x *MultiTargetCommand) GetSkillId() string {
	if x != nil {
		return x.SkillId
	}
	return ""
}

func (x *MultiTargetCommand) GetTargetId() uint32 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

type MultiTargetListCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAmount uint32                `protobuf:"varint,1,opt,name=target_amount,json=targetAmount,proto3" json:"target_amount,omitempty"`
	Targets      []*MultiTargetCommand `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *MultiTargetListCommand) Reset() {
	*x = MultiTargetListCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTargetListCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTargetListCommand) ProtoMessage() {}

func (x *MultiTargetListCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTargetListCommand.ProtoReflect.Descriptor instead.
func (*MultiTargetListCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{15}
}

func (x *MultiTargetListCommand) GetTargetAmount() uint32 {
	if x != nil {
		return x.TargetAmount
	}
	return 0
}

func (x *MultiTargetListCommand) GetTargets() []*MultiTargetCommand {
	if x != nil {
		return x.Targets
	}
	return nil
}

type RequestCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId uint32      `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	Type        RequestType `protobuf:"varint,2,opt,name=type,proto3,enum=shikanime.elkia.eventing.v1alpha1.RequestType" json:"type,omitempty"`
}

func (x *RequestCommand) Reset() {
	*x = RequestCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCommand) ProtoMessage() {}

func (x *RequestCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCommand.ProtoReflect.Descriptor instead.
func (*RequestCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{16}
}

func (x *RequestCommand) GetCharacterId() uint32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *RequestCommand) GetType() RequestType {
	if x != nil {
		return x.Type
	}
	return RequestType_REQUESTED
}

type GlobalOptionsCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option CharacterOptions `protobuf:"varint,1,opt,name=option,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterOptions" json:"option,omitempty"`
}

func (x *GlobalOptionsCommand) Reset() {
	*x = GlobalOptionsCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalOptionsCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalOptionsCommand) ProtoMessage() {}

func (x *GlobalOptionsCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalOptionsCommand.ProtoReflect.Descriptor instead.
func (*GlobalOptionsCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{17}
}

func (x *GlobalOptionsCommand) GetOption() CharacterOptions {
	if x != nil {
		return x.Option
	}
	return CharacterOptions_EXCHANGE_BLOCKED
}

type CommandCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*CommandCommand_RawCommand
	//	*CommandCommand_HeartbeatCommand
	//	*CommandCommand_FStashEndCommand
	//	*CommandCommand_CCloseCommand
	//	*CommandCommand_LbsCommand
	//	*CommandCommand_MultiTargetListCommand
	//	*CommandCommand_RequestCommand
	//	*CommandCommand_GlobalOptionsCommand
	Payload isCommandCommand_Payload `protobuf_oneof:"payload"`
}

func (x *CommandCommand) Reset() {
	*x = CommandCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandCommand) ProtoMessage() {}

func (x *CommandCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandCommand.ProtoReflect.Descriptor instead.
func (*CommandCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{18}
}

func (x *CommandCommand) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (m *CommandCommand) GetPayload() isCommandCommand_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CommandCommand) GetRawCommand() []byte {
	if x, ok := x.GetPayload().(*CommandCommand_RawCommand); ok {
		return x.RawCommand
	}
	return nil
}

func (x *CommandCommand) GetHeartbeatCommand() *HeartbeatCommand {
	if x, ok := x.GetPayload().(*CommandCommand_HeartbeatCommand); ok {
		return x.HeartbeatCommand
	}
	return nil
}

func (x *CommandCommand) GetFStashEndCommand() *FStashEndCommand {
	if x, ok := x.GetPayload().(*CommandCommand_FStashEndCommand); ok {
		return x.FStashEndCommand
	}
	return nil
}

func (x *CommandCommand) GetCCloseCommand() *CCloseCommand {
	if x, ok := x.GetPayload().(*CommandCommand_CCloseCommand); ok {
		return x.CCloseCommand
	}
	return nil
}

func (x *CommandCommand) GetLbsCommand() *LBSCommand {
	if x, ok := x.GetPayload().(*CommandCommand_LbsCommand); ok {
		return x.LbsCommand
	}
	return nil
}

func (x *CommandCommand) GetMultiTargetListCommand() *MultiTargetListCommand {
	if x, ok := x.GetPayload().(*CommandCommand_MultiTargetListCommand); ok {
		return x.MultiTargetListCommand
	}
	return nil
}

func (x *CommandCommand) GetRequestCommand() *RequestCommand {
	if x, ok := x.GetPayload().(*CommandCommand_RequestCommand); ok {
		return x.RequestCommand
	}
	return nil
}

func (x *CommandCommand) GetGlobalOptionsCommand() *GlobalOptionsCommand {
	if x, ok := x.GetPayload().(*CommandCommand_GlobalOptionsCommand); ok {
		return x.GlobalOptionsCommand
	}
	return nil
}

type isCommandCommand_Payload interface {
	isCommandCommand_Payload()
}

type CommandCommand_RawCommand struct {
	RawCommand []byte `protobuf:"bytes,2,opt,name=raw_command,json=rawCommand,proto3,oneof"`
}

type CommandCommand_HeartbeatCommand struct {
	HeartbeatCommand *HeartbeatCommand `protobuf:"bytes,3,opt,name=heartbeat_command,json=heartbeatCommand,proto3,oneof"`
}

type CommandCommand_FStashEndCommand struct {
	FStashEndCommand *FStashEndCommand `protobuf:"bytes,4,opt,name=f_stash_end_command,json=fStashEndCommand,proto3,oneof"`
}

type CommandCommand_CCloseCommand struct {
	CCloseCommand *CCloseCommand `protobuf:"bytes,5,opt,name=c_close_command,json=cCloseCommand,proto3,oneof"`
}

type CommandCommand_LbsCommand struct {
	LbsCommand *LBSCommand `protobuf:"bytes,6,opt,name=lbs_command,json=lbsCommand,proto3,oneof"`
}

type CommandCommand_MultiTargetListCommand struct {
	MultiTargetListCommand *MultiTargetListCommand `protobuf:"bytes,7,opt,name=multi_target_list_command,json=multiTargetListCommand,proto3,oneof"`
}

type CommandCommand_RequestCommand struct {
	RequestCommand *RequestCommand `protobuf:"bytes,8,opt,name=request_command,json=requestCommand,proto3,oneof"`
}

type CommandCommand_GlobalOptionsCommand struct {
	GlobalOptionsCommand *GlobalOptionsCommand `protobuf:"bytes,9,opt,name=global_options_command,json=globalOptionsCommand,proto3,oneof"`
}

func (*CommandCommand_RawCommand) isCommandCommand_Payload() {}

func (*CommandCommand_HeartbeatCommand) isCommandCommand_Payload() {}

func (*CommandCommand_FStashEndCommand) isCommandCommand_Payload() {}

func (*CommandCommand_CCloseCommand) isCommandCommand_Payload() {}

func (*CommandCommand_LbsCommand) isCommandCommand_Payload() {}

func (*CommandCommand_MultiTargetListCommand) isCommandCommand_Payload() {}

func (*CommandCommand_RequestCommand) isCommandCommand_Payload() {}

func (*CommandCommand_GlobalOptionsCommand) isCommandCommand_Payload() {}

type ChannelInteractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*ChannelInteractRequest_SyncCommand
	//	*ChannelInteractRequest_IdentifierCommand
	//	*ChannelInteractRequest_PasswordCommand
	//	*ChannelInteractRequest_CommandCommand
	Payload isChannelInteractRequest_Payload `protobuf_oneof:"payload"`
}

func (x *ChannelInteractRequest) Reset() {
	*x = ChannelInteractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInteractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInteractRequest) ProtoMessage() {}

func (x *ChannelInteractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInteractRequest.ProtoReflect.Descriptor instead.
func (*ChannelInteractRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{19}
}

func (m *ChannelInteractRequest) GetPayload() isChannelInteractRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ChannelInteractRequest) GetSyncCommand() *SyncCommand {
	if x, ok := x.GetPayload().(*ChannelInteractRequest_SyncCommand); ok {
		return x.SyncCommand
	}
	return nil
}

func (x *ChannelInteractRequest) GetIdentifierCommand() *IdentifierCommand {
	if x, ok := x.GetPayload().(*ChannelInteractRequest_IdentifierCommand); ok {
		return x.IdentifierCommand
	}
	return nil
}

func (x *ChannelInteractRequest) GetPasswordCommand() *PasswordCommand {
	if x, ok := x.GetPayload().(*ChannelInteractRequest_PasswordCommand); ok {
		return x.PasswordCommand
	}
	return nil
}

func (x *ChannelInteractRequest) GetCommandCommand() *CommandCommand {
	if x, ok := x.GetPayload().(*ChannelInteractRequest_CommandCommand); ok {
		return x.CommandCommand
	}
	return nil
}

type isChannelInteractRequest_Payload interface {
	isChannelInteractRequest_Payload()
}

type ChannelInteractRequest_SyncCommand struct {
	SyncCommand *SyncCommand `protobuf:"bytes,1,opt,name=sync_command,json=syncCommand,proto3,oneof"`
}

type ChannelInteractRequest_IdentifierCommand struct {
	IdentifierCommand *IdentifierCommand `protobuf:"bytes,2,opt,name=identifier_command,json=identifierCommand,proto3,oneof"`
}

type ChannelInteractRequest_PasswordCommand struct {
	PasswordCommand *PasswordCommand `protobuf:"bytes,3,opt,name=password_command,json=passwordCommand,proto3,oneof"`
}

type ChannelInteractRequest_CommandCommand struct {
	CommandCommand *CommandCommand `protobuf:"bytes,5,opt,name=command_command,json=commandCommand,proto3,oneof"`
}

func (*ChannelInteractRequest_SyncCommand) isChannelInteractRequest_Payload() {}

func (*ChannelInteractRequest_IdentifierCommand) isChannelInteractRequest_Payload() {}

func (*ChannelInteractRequest_PasswordCommand) isChannelInteractRequest_Payload() {}

func (*ChannelInteractRequest_CommandCommand) isChannelInteractRequest_Payload() {}

type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Class          CharacterClass     `protobuf:"varint,2,opt,name=class,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterClass" json:"class,omitempty"`
	Sex            Sex                `protobuf:"varint,3,opt,name=sex,proto3,enum=shikanime.elkia.eventing.v1alpha1.Sex" json:"sex,omitempty"`
	HairColor      CharacterHairColor `protobuf:"varint,4,opt,name=hair_color,json=hairColor,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterHairColor" json:"hair_color,omitempty"`
	HairStyle      CharacterHairStyle `protobuf:"varint,5,opt,name=hair_style,json=hairStyle,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterHairStyle" json:"hair_style,omitempty"`
	Faction        Faction            `protobuf:"varint,6,opt,name=faction,proto3,enum=shikanime.elkia.eventing.v1alpha1.Faction" json:"faction,omitempty"`
	Reputation     int32              `protobuf:"varint,7,opt,name=reputation,proto3" json:"reputation,omitempty"`
	Dignity        int32              `protobuf:"varint,8,opt,name=dignity,proto3" json:"dignity,omitempty"`
	Compliment     int32              `protobuf:"varint,9,opt,name=compliment,proto3" json:"compliment,omitempty"`
	Health         int32              `protobuf:"varint,10,opt,name=health,proto3" json:"health,omitempty"`
	Mana           int32              `protobuf:"varint,11,opt,name=mana,proto3" json:"mana,omitempty"`
	Name           string             `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	HeroExperience int32              `protobuf:"varint,13,opt,name=hero_experience,json=heroExperience,proto3" json:"hero_experience,omitempty"`
	HeroLevel      int32              `protobuf:"varint,14,opt,name=hero_level,json=heroLevel,proto3" json:"hero_level,omitempty"`
	JobExperience  int32              `protobuf:"varint,15,opt,name=job_experience,json=jobExperience,proto3" json:"job_experience,omitempty"`
	JobLevel       int32              `protobuf:"varint,16,opt,name=job_level,json=jobLevel,proto3" json:"job_level,omitempty"`
	Experience     int32              `protobuf:"varint,17,opt,name=experience,proto3" json:"experience,omitempty"`
	Level          int32              `protobuf:"varint,18,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{20}
}

func (x *Character) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Character) GetClass() CharacterClass {
	if x != nil {
		return x.Class
	}
	return CharacterClass_ADVENTURER
}

func (x *Character) GetSex() Sex {
	if x != nil {
		return x.Sex
	}
	return Sex_Male
}

func (x *Character) GetHairColor() CharacterHairColor {
	if x != nil {
		return x.HairColor
	}
	return CharacterHairColor_MauveTaupe
}

func (x *Character) GetHairStyle() CharacterHairStyle {
	if x != nil {
		return x.HairStyle
	}
	return CharacterHairStyle_StyleA
}

func (x *Character) GetFaction() Faction {
	if x != nil {
		return x.Faction
	}
	return Faction_Neutral
}

func (x *Character) GetReputation() int32 {
	if x != nil {
		return x.Reputation
	}
	return 0
}

func (x *Character) GetDignity() int32 {
	if x != nil {
		return x.Dignity
	}
	return 0
}

func (x *Character) GetCompliment() int32 {
	if x != nil {
		return x.Compliment
	}
	return 0
}

func (x *Character) GetHealth() int32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *Character) GetMana() int32 {
	if x != nil {
		return x.Mana
	}
	return 0
}

func (x *Character) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Character) GetHeroExperience() int32 {
	if x != nil {
		return x.HeroExperience
	}
	return 0
}

func (x *Character) GetHeroLevel() int32 {
	if x != nil {
		return x.HeroLevel
	}
	return 0
}

func (x *Character) GetJobExperience() int32 {
	if x != nil {
		return x.JobExperience
	}
	return 0
}

func (x *Character) GetJobLevel() int32 {
	if x != nil {
		return x.JobLevel
	}
	return 0
}

func (x *Character) GetExperience() int32 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *Character) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type CharacterListEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            uint32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	CharacterEvents []*Character `protobuf:"bytes,2,rep,name=character_events,json=characterEvents,proto3" json:"character_events,omitempty"`
}

func (x *CharacterListEvent) Reset() {
	*x = CharacterListEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterListEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterListEvent) ProtoMessage() {}

func (x *CharacterListEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterListEvent.ProtoReflect.Descriptor instead.
func (*CharacterListEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{21}
}

func (x *CharacterListEvent) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CharacterListEvent) GetCharacterEvents() []*Character {
	if x != nil {
		return x.CharacterEvents
	}
	return nil
}

type ChannelInteractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*ChannelInteractResponse_ErrorEvent
	//	*ChannelInteractResponse_InfoEvent
	//	*ChannelInteractResponse_CharacterListEvent
	Payload isChannelInteractResponse_Payload `protobuf_oneof:"payload"`
}

func (x *ChannelInteractResponse) Reset() {
	*x = ChannelInteractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInteractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInteractResponse) ProtoMessage() {}

func (x *ChannelInteractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInteractResponse.ProtoReflect.Descriptor instead.
func (*ChannelInteractResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{22}
}

func (m *ChannelInteractResponse) GetPayload() isChannelInteractResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ChannelInteractResponse) GetErrorEvent() *ErrorEvent {
	if x, ok := x.GetPayload().(*ChannelInteractResponse_ErrorEvent); ok {
		return x.ErrorEvent
	}
	return nil
}

func (x *ChannelInteractResponse) GetInfoEvent() *InfoEvent {
	if x, ok := x.GetPayload().(*ChannelInteractResponse_InfoEvent); ok {
		return x.InfoEvent
	}
	return nil
}

func (x *ChannelInteractResponse) GetCharacterListEvent() *CharacterListEvent {
	if x, ok := x.GetPayload().(*ChannelInteractResponse_CharacterListEvent); ok {
		return x.CharacterListEvent
	}
	return nil
}

type isChannelInteractResponse_Payload interface {
	isChannelInteractResponse_Payload()
}

type ChannelInteractResponse_ErrorEvent struct {
	ErrorEvent *ErrorEvent `protobuf:"bytes,1,opt,name=error_event,json=errorEvent,proto3,oneof"`
}

type ChannelInteractResponse_InfoEvent struct {
	InfoEvent *InfoEvent `protobuf:"bytes,2,opt,name=info_event,json=infoEvent,proto3,oneof"`
}

type ChannelInteractResponse_CharacterListEvent struct {
	CharacterListEvent *CharacterListEvent `protobuf:"bytes,3,opt,name=character_list_event,json=characterListEvent,proto3,oneof"`
}

func (*ChannelInteractResponse_ErrorEvent) isChannelInteractResponse_Payload() {}

func (*ChannelInteractResponse_InfoEvent) isChannelInteractResponse_Payload() {}

func (*ChannelInteractResponse_CharacterListEvent) isChannelInteractResponse_Payload() {}

type CharacterAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Class     CharacterClass     `protobuf:"varint,3,opt,name=class,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterClass" json:"class,omitempty"`
	Sex       Sex                `protobuf:"varint,4,opt,name=sex,proto3,enum=shikanime.elkia.eventing.v1alpha1.Sex" json:"sex,omitempty"`
	HairColor CharacterHairColor `protobuf:"varint,5,opt,name=hair_color,json=hairColor,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterHairColor" json:"hair_color,omitempty"`
	HairStyle CharacterHairStyle `protobuf:"varint,6,opt,name=hair_style,json=hairStyle,proto3,enum=shikanime.elkia.eventing.v1alpha1.CharacterHairStyle" json:"hair_style,omitempty"`
}

func (x *CharacterAddRequest) Reset() {
	*x = CharacterAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterAddRequest) ProtoMessage() {}

func (x *CharacterAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterAddRequest.ProtoReflect.Descriptor instead.
func (*CharacterAddRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{23}
}

func (x *CharacterAddRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CharacterAddRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharacterAddRequest) GetClass() CharacterClass {
	if x != nil {
		return x.Class
	}
	return CharacterClass_ADVENTURER
}

func (x *CharacterAddRequest) GetSex() Sex {
	if x != nil {
		return x.Sex
	}
	return Sex_Male
}

func (x *CharacterAddRequest) GetHairColor() CharacterHairColor {
	if x != nil {
		return x.HairColor
	}
	return CharacterHairColor_MauveTaupe
}

func (x *CharacterAddRequest) GetHairStyle() CharacterHairStyle {
	if x != nil {
		return x.HairStyle
	}
	return CharacterHairStyle_StyleA
}

type CharacterAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CharacterAddResponse) Reset() {
	*x = CharacterAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterAddResponse) ProtoMessage() {}

func (x *CharacterAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterAddResponse.ProtoReflect.Descriptor instead.
func (*CharacterAddResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{24}
}

type CharacterRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CharacterRemoveRequest) Reset() {
	*x = CharacterRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterRemoveRequest) ProtoMessage() {}

func (x *CharacterRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterRemoveRequest.ProtoReflect.Descriptor instead.
func (*CharacterRemoveRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{25}
}

func (x *CharacterRemoveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CharacterRemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CharacterRemoveResponse) Reset() {
	*x = CharacterRemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterRemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterRemoveResponse) ProtoMessage() {}

func (x *CharacterRemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterRemoveResponse.ProtoReflect.Descriptor instead.
func (*CharacterRemoveResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{26}
}

type CharacterUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WorldId    *uint32 `protobuf:"varint,2,opt,name=world_id,json=worldId,proto3,oneof" json:"world_id,omitempty"`
	ChannelId  *uint32 `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3,oneof" json:"channel_id,omitempty"`
	Name       *string `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Address    *string `protobuf:"bytes,5,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Population *uint32 `protobuf:"varint,6,opt,name=population,proto3,oneof" json:"population,omitempty"`
	Capacity   *uint32 `protobuf:"varint,7,opt,name=capacity,proto3,oneof" json:"capacity,omitempty"`
}

func (x *CharacterUpdateRequest) Reset() {
	*x = CharacterUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterUpdateRequest) ProtoMessage() {}

func (x *CharacterUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterUpdateRequest.ProtoReflect.Descriptor instead.
func (*CharacterUpdateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{27}
}

func (x *CharacterUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CharacterUpdateRequest) GetWorldId() uint32 {
	if x != nil && x.WorldId != nil {
		return *x.WorldId
	}
	return 0
}

func (x *CharacterUpdateRequest) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CharacterUpdateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CharacterUpdateRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *CharacterUpdateRequest) GetPopulation() uint32 {
	if x != nil && x.Population != nil {
		return *x.Population
	}
	return 0
}

func (x *CharacterUpdateRequest) GetCapacity() uint32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

type CharacterUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CharacterUpdateResponse) Reset() {
	*x = CharacterUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterUpdateResponse) ProtoMessage() {}

func (x *CharacterUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterUpdateResponse.ProtoReflect.Descriptor instead.
func (*CharacterUpdateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{28}
}

type CharacterListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityId string `protobuf:"bytes,1,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
}

func (x *CharacterListRequest) Reset() {
	*x = CharacterListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterListRequest) ProtoMessage() {}

func (x *CharacterListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterListRequest.ProtoReflect.Descriptor instead.
func (*CharacterListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{29}
}

func (x *CharacterListRequest) GetIdentityId() string {
	if x != nil {
		return x.IdentityId
	}
	return ""
}

type CharacterListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterEvents []*Character `protobuf:"bytes,1,rep,name=character_events,json=characterEvents,proto3" json:"character_events,omitempty"`
}

func (x *CharacterListResponse) Reset() {
	*x = CharacterListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterListResponse) ProtoMessage() {}

func (x *CharacterListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterListResponse.ProtoReflect.Descriptor instead.
func (*CharacterListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP(), []int{30}
}

func (x *CharacterListResponse) GetCharacterEvents() []*Character {
	if x != nil {
		return x.CharacterEvents
	}
	return nil
}

var File_pkg_api_eventing_v1alpha1_eventing_proto protoreflect.FileDescriptor

var file_pkg_api_eventing_v1alpha1_eventing_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x73, 0x68, 0x69, 0x6b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x49, 0x0a,
	0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x68, 0x69, 0x6b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x25, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x9a, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xa3, 0x01, 0x0a,
	0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x72, 0x0a, 0x11, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x56, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65,
	0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x4d, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e,
	0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x66,
	0x0a, 0x13, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x68,
	0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x3d, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x4f, 0x0a, 0x11, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x49, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x12, 0x0a, 0x10,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x22, 0x12, 0x0a, 0x10, 0x46, 0x53, 0x74, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x4c, 0x42, 0x53, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x68, 0x69, 0x6b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x63, 0x0a, 0x14, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x06, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x62, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c,
	0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x64, 0x0a, 0x13, 0x66, 0x5f,
	0x73, 0x74, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x53, 0x74, 0x61,
	0x73, 0x68, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10,
	0x66, 0x53, 0x74, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x5a, 0x0a, 0x0f, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69, 0x6b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x63,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x0b,
	0x6c, 0x62, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c,
	0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x42, 0x53, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x0a, 0x6c, 0x62, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x76,
	0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c,
	0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x16,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x6f, 0x0a, 0x16, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x9e, 0x03, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c,
	0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x65, 0x0a, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5f, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c,
	0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c,
	0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xec, 0x05, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x47, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x78, 0x52, 0x03, 0x73,
	0x65, 0x78, 0x12, 0x54, 0x0a, 0x0a, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x68,
	0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0a, 0x68, 0x61, 0x69, 0x72,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73,
	0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x48, 0x61, 0x69, 0x72, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x44,
	0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x65, 0x72, 0x6f, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x72,
	0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6a, 0x6f, 0x62, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6a, 0x6f, 0x62, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x81, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x69, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xe8, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65,
	0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x03,
	0x73, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x69, 0x6b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65,
	0x78, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x54, 0x0a, 0x0a, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x68, 0x69,
	0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0a,
	0x68, 0x61, 0x69, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b,
	0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x48, 0x61,
	0x69, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb7, 0x02, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0a, 0x70, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x70, 0x0a,
	0x15, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b,
	0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2a,
	0xc9, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x55, 0x54, 0x44,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x55, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4e, 0x54, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a,
	0x08, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x10, 0x08, 0x2a, 0x52, 0x0a, 0x0b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x2a,
	0xb6, 0x02, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x48, 0x49, 0x53, 0x50, 0x45, 0x52, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x55, 0x53, 0x45, 0x5f, 0x41,
	0x49, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x43, 0x4f, 0x4e, 0x53, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x49, 0x43, 0x4b,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x50, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x50, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x55, 0x46,
	0x46, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x4d,
	0x49, 0x4e, 0x49, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0c, 0x2a, 0x5c, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44,
	0x56, 0x45, 0x4e, 0x54, 0x55, 0x52, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f,
	0x52, 0x43, 0x45, 0x52, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x52, 0x43, 0x48,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x4d, 0x41, 0x4e,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x52,
	0x54, 0x49, 0x53, 0x54, 0x10, 0x04, 0x2a, 0x1b, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x61, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x65, 0x6d, 0x61, 0x6c,
	0x65, 0x10, 0x01, 0x2a, 0x91, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x61,
	0x75, 0x76, 0x65, 0x54, 0x61, 0x75, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x65,
	0x72, 0x69, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x61, 0x6e, 0x4d, 0x61, 0x72,
	0x69, 0x6e, 0x6f, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x66, 0x66, 0x61, 0x69, 0x72, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x69, 0x78, 0x69, 0x65, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x61, 0x76, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x69, 0x6c, 0x6c, 0x61,
	0x72, 0x6e, 0x65, 0x79, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x75, 0x74, 0x6d, 0x65, 0x67,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x10, 0x08, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x65, 0x64, 0x10, 0x09, 0x2a, 0x50, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x48, 0x61, 0x69, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x42, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x68, 0x61, 0x76, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x2c, 0x0a, 0x07, 0x46, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6e, 0x67, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x65, 0x6d, 0x6f, 0x6e, 0x10, 0x02, 0x32, 0xa0, 0x02, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x83, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x36, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c,
	0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x68, 0x69, 0x6b,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x91, 0x01, 0x0a, 0x23, 0x41, 0x75, 0x74, 0x68, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x66, 0x66, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x2f,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a,
	0x37, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x98, 0x01, 0x0a, 0x07, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x39, 0x2e, 0x73, 0x68, 0x69,
	0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x32, 0xa3, 0x04, 0x0a, 0x05, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12,
	0x7f, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12,
	0x36, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x88, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x39, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x39, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x68, 0x69,
	0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c,
	0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67,
	0x6f, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2f, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescOnce sync.Once
	file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescData = file_pkg_api_eventing_v1alpha1_eventing_proto_rawDesc
)

func file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescGZIP() []byte {
	file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescOnce.Do(func() {
		file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescData)
	})
	return file_pkg_api_eventing_v1alpha1_eventing_proto_rawDescData
}

var file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_pkg_api_eventing_v1alpha1_eventing_proto_goTypes = []interface{}{
	(Code)(0),                       // 0: shikanime.elkia.eventing.v1alpha1.Code
	(RequestType)(0),                // 1: shikanime.elkia.eventing.v1alpha1.RequestType
	(CharacterOptions)(0),           // 2: shikanime.elkia.eventing.v1alpha1.CharacterOptions
	(CharacterClass)(0),             // 3: shikanime.elkia.eventing.v1alpha1.CharacterClass
	(Sex)(0),                        // 4: shikanime.elkia.eventing.v1alpha1.Sex
	(CharacterHairColor)(0),         // 5: shikanime.elkia.eventing.v1alpha1.CharacterHairColor
	(CharacterHairStyle)(0),         // 6: shikanime.elkia.eventing.v1alpha1.CharacterHairStyle
	(Faction)(0),                    // 7: shikanime.elkia.eventing.v1alpha1.Faction
	(*ErrorEvent)(nil),              // 8: shikanime.elkia.eventing.v1alpha1.ErrorEvent
	(*InfoEvent)(nil),               // 9: shikanime.elkia.eventing.v1alpha1.InfoEvent
	(*LoginCommand)(nil),            // 10: shikanime.elkia.eventing.v1alpha1.LoginCommand
	(*Endpoint)(nil),                // 11: shikanime.elkia.eventing.v1alpha1.Endpoint
	(*EndpointListEvent)(nil),       // 12: shikanime.elkia.eventing.v1alpha1.EndpointListEvent
	(*AuthInteractRequest)(nil),     // 13: shikanime.elkia.eventing.v1alpha1.AuthInteractRequest
	(*AuthInteractResponse)(nil),    // 14: shikanime.elkia.eventing.v1alpha1.AuthInteractResponse
	(*SyncCommand)(nil),             // 15: shikanime.elkia.eventing.v1alpha1.SyncCommand
	(*IdentifierCommand)(nil),       // 16: shikanime.elkia.eventing.v1alpha1.IdentifierCommand
	(*PasswordCommand)(nil),         // 17: shikanime.elkia.eventing.v1alpha1.PasswordCommand
	(*HeartbeatCommand)(nil),        // 18: shikanime.elkia.eventing.v1alpha1.HeartbeatCommand
	(*FStashEndCommand)(nil),        // 19: shikanime.elkia.eventing.v1alpha1.FStashEndCommand
	(*CCloseCommand)(nil),           // 20: shikanime.elkia.eventing.v1alpha1.CCloseCommand
	(*LBSCommand)(nil),              // 21: shikanime.elkia.eventing.v1alpha1.LBSCommand
	(*MultiTargetCommand)(nil),      // 22: shikanime.elkia.eventing.v1alpha1.MultiTargetCommand
	(*MultiTargetListCommand)(nil),  // 23: shikanime.elkia.eventing.v1alpha1.MultiTargetListCommand
	(*RequestCommand)(nil),          // 24: shikanime.elkia.eventing.v1alpha1.RequestCommand
	(*GlobalOptionsCommand)(nil),    // 25: shikanime.elkia.eventing.v1alpha1.GlobalOptionsCommand
	(*CommandCommand)(nil),          // 26: shikanime.elkia.eventing.v1alpha1.CommandCommand
	(*ChannelInteractRequest)(nil),  // 27: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest
	(*Character)(nil),               // 28: shikanime.elkia.eventing.v1alpha1.Character
	(*CharacterListEvent)(nil),      // 29: shikanime.elkia.eventing.v1alpha1.CharacterListEvent
	(*ChannelInteractResponse)(nil), // 30: shikanime.elkia.eventing.v1alpha1.ChannelInteractResponse
	(*CharacterAddRequest)(nil),     // 31: shikanime.elkia.eventing.v1alpha1.CharacterAddRequest
	(*CharacterAddResponse)(nil),    // 32: shikanime.elkia.eventing.v1alpha1.CharacterAddResponse
	(*CharacterRemoveRequest)(nil),  // 33: shikanime.elkia.eventing.v1alpha1.CharacterRemoveRequest
	(*CharacterRemoveResponse)(nil), // 34: shikanime.elkia.eventing.v1alpha1.CharacterRemoveResponse
	(*CharacterUpdateRequest)(nil),  // 35: shikanime.elkia.eventing.v1alpha1.CharacterUpdateRequest
	(*CharacterUpdateResponse)(nil), // 36: shikanime.elkia.eventing.v1alpha1.CharacterUpdateResponse
	(*CharacterListRequest)(nil),    // 37: shikanime.elkia.eventing.v1alpha1.CharacterListRequest
	(*CharacterListResponse)(nil),   // 38: shikanime.elkia.eventing.v1alpha1.CharacterListResponse
}
var file_pkg_api_eventing_v1alpha1_eventing_proto_depIdxs = []int32{
	0,  // 0: shikanime.elkia.eventing.v1alpha1.ErrorEvent.code:type_name -> shikanime.elkia.eventing.v1alpha1.Code
	11, // 1: shikanime.elkia.eventing.v1alpha1.EndpointListEvent.endpoints:type_name -> shikanime.elkia.eventing.v1alpha1.Endpoint
	10, // 2: shikanime.elkia.eventing.v1alpha1.AuthInteractRequest.login_command:type_name -> shikanime.elkia.eventing.v1alpha1.LoginCommand
	8,  // 3: shikanime.elkia.eventing.v1alpha1.AuthInteractResponse.error_event:type_name -> shikanime.elkia.eventing.v1alpha1.ErrorEvent
	9,  // 4: shikanime.elkia.eventing.v1alpha1.AuthInteractResponse.info_event:type_name -> shikanime.elkia.eventing.v1alpha1.InfoEvent
	12, // 5: shikanime.elkia.eventing.v1alpha1.AuthInteractResponse.endpoint_list_event:type_name -> shikanime.elkia.eventing.v1alpha1.EndpointListEvent
	22, // 6: shikanime.elkia.eventing.v1alpha1.MultiTargetListCommand.targets:type_name -> shikanime.elkia.eventing.v1alpha1.MultiTargetCommand
	1,  // 7: shikanime.elkia.eventing.v1alpha1.RequestCommand.type:type_name -> shikanime.elkia.eventing.v1alpha1.RequestType
	2,  // 8: shikanime.elkia.eventing.v1alpha1.GlobalOptionsCommand.option:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterOptions
	18, // 9: shikanime.elkia.eventing.v1alpha1.CommandCommand.heartbeat_command:type_name -> shikanime.elkia.eventing.v1alpha1.HeartbeatCommand
	19, // 10: shikanime.elkia.eventing.v1alpha1.CommandCommand.f_stash_end_command:type_name -> shikanime.elkia.eventing.v1alpha1.FStashEndCommand
	20, // 11: shikanime.elkia.eventing.v1alpha1.CommandCommand.c_close_command:type_name -> shikanime.elkia.eventing.v1alpha1.CCloseCommand
	21, // 12: shikanime.elkia.eventing.v1alpha1.CommandCommand.lbs_command:type_name -> shikanime.elkia.eventing.v1alpha1.LBSCommand
	23, // 13: shikanime.elkia.eventing.v1alpha1.CommandCommand.multi_target_list_command:type_name -> shikanime.elkia.eventing.v1alpha1.MultiTargetListCommand
	24, // 14: shikanime.elkia.eventing.v1alpha1.CommandCommand.request_command:type_name -> shikanime.elkia.eventing.v1alpha1.RequestCommand
	25, // 15: shikanime.elkia.eventing.v1alpha1.CommandCommand.global_options_command:type_name -> shikanime.elkia.eventing.v1alpha1.GlobalOptionsCommand
	15, // 16: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest.sync_command:type_name -> shikanime.elkia.eventing.v1alpha1.SyncCommand
	16, // 17: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest.identifier_command:type_name -> shikanime.elkia.eventing.v1alpha1.IdentifierCommand
	17, // 18: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest.password_command:type_name -> shikanime.elkia.eventing.v1alpha1.PasswordCommand
	26, // 19: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest.command_command:type_name -> shikanime.elkia.eventing.v1alpha1.CommandCommand
	3,  // 20: shikanime.elkia.eventing.v1alpha1.Character.class:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterClass
	4,  // 21: shikanime.elkia.eventing.v1alpha1.Character.sex:type_name -> shikanime.elkia.eventing.v1alpha1.Sex
	5,  // 22: shikanime.elkia.eventing.v1alpha1.Character.hair_color:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterHairColor
	6,  // 23: shikanime.elkia.eventing.v1alpha1.Character.hair_style:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterHairStyle
	7,  // 24: shikanime.elkia.eventing.v1alpha1.Character.faction:type_name -> shikanime.elkia.eventing.v1alpha1.Faction
	28, // 25: shikanime.elkia.eventing.v1alpha1.CharacterListEvent.character_events:type_name -> shikanime.elkia.eventing.v1alpha1.Character
	8,  // 26: shikanime.elkia.eventing.v1alpha1.ChannelInteractResponse.error_event:type_name -> shikanime.elkia.eventing.v1alpha1.ErrorEvent
	9,  // 27: shikanime.elkia.eventing.v1alpha1.ChannelInteractResponse.info_event:type_name -> shikanime.elkia.eventing.v1alpha1.InfoEvent
	29, // 28: shikanime.elkia.eventing.v1alpha1.ChannelInteractResponse.character_list_event:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterListEvent
	3,  // 29: shikanime.elkia.eventing.v1alpha1.CharacterAddRequest.class:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterClass
	4,  // 30: shikanime.elkia.eventing.v1alpha1.CharacterAddRequest.sex:type_name -> shikanime.elkia.eventing.v1alpha1.Sex
	5,  // 31: shikanime.elkia.eventing.v1alpha1.CharacterAddRequest.hair_color:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterHairColor
	6,  // 32: shikanime.elkia.eventing.v1alpha1.CharacterAddRequest.hair_style:type_name -> shikanime.elkia.eventing.v1alpha1.CharacterHairStyle
	28, // 33: shikanime.elkia.eventing.v1alpha1.CharacterListResponse.character_events:type_name -> shikanime.elkia.eventing.v1alpha1.Character
	13, // 34: shikanime.elkia.eventing.v1alpha1.Auth.AuthInteract:input_type -> shikanime.elkia.eventing.v1alpha1.AuthInteractRequest
	10, // 35: shikanime.elkia.eventing.v1alpha1.Auth.AuthCreateHandoffFlowCommandProduce:input_type -> shikanime.elkia.eventing.v1alpha1.LoginCommand
	27, // 36: shikanime.elkia.eventing.v1alpha1.Gateway.ChannelInteract:input_type -> shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest
	31, // 37: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterAdd:input_type -> shikanime.elkia.eventing.v1alpha1.CharacterAddRequest
	33, // 38: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterRemove:input_type -> shikanime.elkia.eventing.v1alpha1.CharacterRemoveRequest
	35, // 39: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterUpdate:input_type -> shikanime.elkia.eventing.v1alpha1.CharacterUpdateRequest
	37, // 40: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterList:input_type -> shikanime.elkia.eventing.v1alpha1.CharacterListRequest
	14, // 41: shikanime.elkia.eventing.v1alpha1.Auth.AuthInteract:output_type -> shikanime.elkia.eventing.v1alpha1.AuthInteractResponse
	14, // 42: shikanime.elkia.eventing.v1alpha1.Auth.AuthCreateHandoffFlowCommandProduce:output_type -> shikanime.elkia.eventing.v1alpha1.AuthInteractResponse
	30, // 43: shikanime.elkia.eventing.v1alpha1.Gateway.ChannelInteract:output_type -> shikanime.elkia.eventing.v1alpha1.ChannelInteractResponse
	32, // 44: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterAdd:output_type -> shikanime.elkia.eventing.v1alpha1.CharacterAddResponse
	34, // 45: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterRemove:output_type -> shikanime.elkia.eventing.v1alpha1.CharacterRemoveResponse
	36, // 46: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterUpdate:output_type -> shikanime.elkia.eventing.v1alpha1.CharacterUpdateResponse
	38, // 47: shikanime.elkia.eventing.v1alpha1.Lobby.CharacterList:output_type -> shikanime.elkia.eventing.v1alpha1.CharacterListResponse
	41, // [41:48] is the sub-list for method output_type
	34, // [34:41] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_pkg_api_eventing_v1alpha1_eventing_proto_init() }
func file_pkg_api_eventing_v1alpha1_eventing_proto_init() {
	if File_pkg_api_eventing_v1alpha1_eventing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointListEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthInteractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthInteractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FStashEndCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloseCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LBSCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTargetCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTargetListCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalOptionsCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInteractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterListEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInteractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterRemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AuthInteractRequest_RawCommand)(nil),
		(*AuthInteractRequest_LoginCommand)(nil),
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*AuthInteractResponse_ErrorEvent)(nil),
		(*AuthInteractResponse_InfoEvent)(nil),
		(*AuthInteractResponse_EndpointListEvent)(nil),
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*CommandCommand_RawCommand)(nil),
		(*CommandCommand_HeartbeatCommand)(nil),
		(*CommandCommand_FStashEndCommand)(nil),
		(*CommandCommand_CCloseCommand)(nil),
		(*CommandCommand_LbsCommand)(nil),
		(*CommandCommand_MultiTargetListCommand)(nil),
		(*CommandCommand_RequestCommand)(nil),
		(*CommandCommand_GlobalOptionsCommand)(nil),
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ChannelInteractRequest_SyncCommand)(nil),
		(*ChannelInteractRequest_IdentifierCommand)(nil),
		(*ChannelInteractRequest_PasswordCommand)(nil),
		(*ChannelInteractRequest_CommandCommand)(nil),
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ChannelInteractResponse_ErrorEvent)(nil),
		(*ChannelInteractResponse_InfoEvent)(nil),
		(*ChannelInteractResponse_CharacterListEvent)(nil),
	}
	file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes[27].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_eventing_v1alpha1_eventing_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_pkg_api_eventing_v1alpha1_eventing_proto_goTypes,
		DependencyIndexes: file_pkg_api_eventing_v1alpha1_eventing_proto_depIdxs,
		EnumInfos:         file_pkg_api_eventing_v1alpha1_eventing_proto_enumTypes,
		MessageInfos:      file_pkg_api_eventing_v1alpha1_eventing_proto_msgTypes,
	}.Build()
	File_pkg_api_eventing_v1alpha1_eventing_proto = out.File
	file_pkg_api_eventing_v1alpha1_eventing_proto_rawDesc = nil
	file_pkg_api_eventing_v1alpha1_eventing_proto_goTypes = nil
	file_pkg_api_eventing_v1alpha1_eventing_proto_depIdxs = nil
}
