// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.21.12
// source: pkg/api/eventing/v1alpha1/channel.proto

package v1alpha1

import (
	v1alpha1 "go.shikanime.studio/elkia/pkg/api/fleet/v1alpha1"
	v1alpha11 "go.shikanime.studio/elkia/pkg/api/world/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChannelCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//
	//	*ChannelCommand_Client
	//	*ChannelCommand_Presence
	//	*ChannelCommand_Lobby
	//	*ChannelCommand_CombatEvent
	Command isChannelCommand_Command `protobuf_oneof:"command"`
}

func (x *ChannelCommand) Reset() {
	*x = ChannelCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCommand) ProtoMessage() {}

func (x *ChannelCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCommand.ProtoReflect.Descriptor instead.
func (*ChannelCommand) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_channel_proto_rawDescGZIP(), []int{0}
}

func (m *ChannelCommand) GetCommand() isChannelCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *ChannelCommand) GetClient() *ClientCommand {
	if x, ok := x.GetCommand().(*ChannelCommand_Client); ok {
		return x.Client
	}
	return nil
}

func (x *ChannelCommand) GetPresence() *v1alpha1.PresenceCommand {
	if x, ok := x.GetCommand().(*ChannelCommand_Presence); ok {
		return x.Presence
	}
	return nil
}

func (x *ChannelCommand) GetLobby() *v1alpha11.LobbyCommand {
	if x, ok := x.GetCommand().(*ChannelCommand_Lobby); ok {
		return x.Lobby
	}
	return nil
}

func (x *ChannelCommand) GetCombatEvent() *v1alpha11.CombatCommand {
	if x, ok := x.GetCommand().(*ChannelCommand_CombatEvent); ok {
		return x.CombatEvent
	}
	return nil
}

type isChannelCommand_Command interface {
	isChannelCommand_Command()
}

type ChannelCommand_Client struct {
	Client *ClientCommand `protobuf:"bytes,1,opt,name=client,proto3,oneof"`
}

type ChannelCommand_Presence struct {
	Presence *v1alpha1.PresenceCommand `protobuf:"bytes,2,opt,name=presence,proto3,oneof"`
}

type ChannelCommand_Lobby struct {
	Lobby *v1alpha11.LobbyCommand `protobuf:"bytes,3,opt,name=lobby,proto3,oneof"`
}

type ChannelCommand_CombatEvent struct {
	CombatEvent *v1alpha11.CombatCommand `protobuf:"bytes,4,opt,name=combat_event,json=combatEvent,proto3,oneof"`
}

func (*ChannelCommand_Client) isChannelCommand_Command() {}

func (*ChannelCommand_Presence) isChannelCommand_Command() {}

func (*ChannelCommand_Lobby) isChannelCommand_Command() {}

func (*ChannelCommand_CombatEvent) isChannelCommand_Command() {}

type ChannelInteractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint32          `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Command  *ChannelCommand `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *ChannelInteractRequest) Reset() {
	*x = ChannelInteractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInteractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInteractRequest) ProtoMessage() {}

func (x *ChannelInteractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInteractRequest.ProtoReflect.Descriptor instead.
func (*ChannelInteractRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_channel_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelInteractRequest) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ChannelInteractRequest) GetCommand() *ChannelCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

type ChannelEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*ChannelEvent_Client
	//	*ChannelEvent_Presence
	//	*ChannelEvent_Lobby
	//	*ChannelEvent_Combat
	Event isChannelEvent_Event `protobuf_oneof:"event"`
}

func (x *ChannelEvent) Reset() {
	*x = ChannelEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelEvent) ProtoMessage() {}

func (x *ChannelEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelEvent.ProtoReflect.Descriptor instead.
func (*ChannelEvent) Descriptor() ([]byte, []int) {
	return file_pkg_api_eventing_v1alpha1_channel_proto_rawDescGZIP(), []int{2}
}

func (m *ChannelEvent) GetEvent() isChannelEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ChannelEvent) GetClient() *ClientEvent {
	if x, ok := x.GetEvent().(*ChannelEvent_Client); ok {
		return x.Client
	}
	return nil
}

func (x *ChannelEvent) GetPresence() *v1alpha1.PresenceEvent {
	if x, ok := x.GetEvent().(*ChannelEvent_Presence); ok {
		return x.Presence
	}
	return nil
}

func (x *ChannelEvent) GetLobby() *v1alpha11.LobbyEvent {
	if x, ok := x.GetEvent().(*ChannelEvent_Lobby); ok {
		return x.Lobby
	}
	return nil
}

func (x *ChannelEvent) GetCombat() *v1alpha11.CombatEvent {
	if x, ok := x.GetEvent().(*ChannelEvent_Combat); ok {
		return x.Combat
	}
	return nil
}

type isChannelEvent_Event interface {
	isChannelEvent_Event()
}

type ChannelEvent_Client struct {
	Client *ClientEvent `protobuf:"bytes,1,opt,name=client,proto3,oneof"`
}

type ChannelEvent_Presence struct {
	Presence *v1alpha1.PresenceEvent `protobuf:"bytes,2,opt,name=presence,proto3,oneof"`
}

type ChannelEvent_Lobby struct {
	Lobby *v1alpha11.LobbyEvent `protobuf:"bytes,3,opt,name=lobby,proto3,oneof"`
}

type ChannelEvent_Combat struct {
	Combat *v1alpha11.CombatEvent `protobuf:"bytes,4,opt,name=combat,proto3,oneof"`
}

func (*ChannelEvent_Client) isChannelEvent_Event() {}

func (*ChannelEvent_Presence) isChannelEvent_Event() {}

func (*ChannelEvent_Lobby) isChannelEvent_Event() {}

func (*ChannelEvent_Combat) isChannelEvent_Event() {}

var File_pkg_api_eventing_v1alpha1_channel_proto protoreflect.FileDescriptor

var file_pkg_api_eventing_v1alpha1_channel_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x73, 0x68, 0x69, 0x6b, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x26, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c,
	0x6b, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x52, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61,
	0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4b,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xb9, 0x02, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73,
	0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65,
	0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x8d, 0x01, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x39, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x68, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x65,
	0x6c, 0x6b, 0x69, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x28, 0x01, 0x30, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x6f, 0x2e, 0x73, 0x68,
	0x69, 0x6b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x65,
	0x6c, 0x6b, 0x69, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_eventing_v1alpha1_channel_proto_rawDescOnce sync.Once
	file_pkg_api_eventing_v1alpha1_channel_proto_rawDescData = file_pkg_api_eventing_v1alpha1_channel_proto_rawDesc
)

func file_pkg_api_eventing_v1alpha1_channel_proto_rawDescGZIP() []byte {
	file_pkg_api_eventing_v1alpha1_channel_proto_rawDescOnce.Do(func() {
		file_pkg_api_eventing_v1alpha1_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_eventing_v1alpha1_channel_proto_rawDescData)
	})
	return file_pkg_api_eventing_v1alpha1_channel_proto_rawDescData
}

var file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pkg_api_eventing_v1alpha1_channel_proto_goTypes = []interface{}{
	(*ChannelCommand)(nil),           // 0: shikanime.elkia.eventing.v1alpha1.ChannelCommand
	(*ChannelInteractRequest)(nil),   // 1: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest
	(*ChannelEvent)(nil),             // 2: shikanime.elkia.eventing.v1alpha1.ChannelEvent
	(*ClientCommand)(nil),            // 3: shikanime.elkia.eventing.v1alpha1.ClientCommand
	(*v1alpha1.PresenceCommand)(nil), // 4: shikanime.elkia.fleet.v1alpha1.PresenceCommand
	(*v1alpha11.LobbyCommand)(nil),   // 5: shikanime.elkia.world.v1alpha1.LobbyCommand
	(*v1alpha11.CombatCommand)(nil),  // 6: shikanime.elkia.world.v1alpha1.CombatCommand
	(*ClientEvent)(nil),              // 7: shikanime.elkia.eventing.v1alpha1.ClientEvent
	(*v1alpha1.PresenceEvent)(nil),   // 8: shikanime.elkia.fleet.v1alpha1.PresenceEvent
	(*v1alpha11.LobbyEvent)(nil),     // 9: shikanime.elkia.world.v1alpha1.LobbyEvent
	(*v1alpha11.CombatEvent)(nil),    // 10: shikanime.elkia.world.v1alpha1.CombatEvent
}
var file_pkg_api_eventing_v1alpha1_channel_proto_depIdxs = []int32{
	3,  // 0: shikanime.elkia.eventing.v1alpha1.ChannelCommand.client:type_name -> shikanime.elkia.eventing.v1alpha1.ClientCommand
	4,  // 1: shikanime.elkia.eventing.v1alpha1.ChannelCommand.presence:type_name -> shikanime.elkia.fleet.v1alpha1.PresenceCommand
	5,  // 2: shikanime.elkia.eventing.v1alpha1.ChannelCommand.lobby:type_name -> shikanime.elkia.world.v1alpha1.LobbyCommand
	6,  // 3: shikanime.elkia.eventing.v1alpha1.ChannelCommand.combat_event:type_name -> shikanime.elkia.world.v1alpha1.CombatCommand
	0,  // 4: shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest.command:type_name -> shikanime.elkia.eventing.v1alpha1.ChannelCommand
	7,  // 5: shikanime.elkia.eventing.v1alpha1.ChannelEvent.client:type_name -> shikanime.elkia.eventing.v1alpha1.ClientEvent
	8,  // 6: shikanime.elkia.eventing.v1alpha1.ChannelEvent.presence:type_name -> shikanime.elkia.fleet.v1alpha1.PresenceEvent
	9,  // 7: shikanime.elkia.eventing.v1alpha1.ChannelEvent.lobby:type_name -> shikanime.elkia.world.v1alpha1.LobbyEvent
	10, // 8: shikanime.elkia.eventing.v1alpha1.ChannelEvent.combat:type_name -> shikanime.elkia.world.v1alpha1.CombatEvent
	1,  // 9: shikanime.elkia.eventing.v1alpha1.Gateway.ChannelInteract:input_type -> shikanime.elkia.eventing.v1alpha1.ChannelInteractRequest
	2,  // 10: shikanime.elkia.eventing.v1alpha1.Gateway.ChannelInteract:output_type -> shikanime.elkia.eventing.v1alpha1.ChannelEvent
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_pkg_api_eventing_v1alpha1_channel_proto_init() }
func file_pkg_api_eventing_v1alpha1_channel_proto_init() {
	if File_pkg_api_eventing_v1alpha1_channel_proto != nil {
		return
	}
	file_pkg_api_eventing_v1alpha1_client_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInteractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ChannelCommand_Client)(nil),
		(*ChannelCommand_Presence)(nil),
		(*ChannelCommand_Lobby)(nil),
		(*ChannelCommand_CombatEvent)(nil),
	}
	file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ChannelEvent_Client)(nil),
		(*ChannelEvent_Presence)(nil),
		(*ChannelEvent_Lobby)(nil),
		(*ChannelEvent_Combat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_eventing_v1alpha1_channel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_eventing_v1alpha1_channel_proto_goTypes,
		DependencyIndexes: file_pkg_api_eventing_v1alpha1_channel_proto_depIdxs,
		MessageInfos:      file_pkg_api_eventing_v1alpha1_channel_proto_msgTypes,
	}.Build()
	File_pkg_api_eventing_v1alpha1_channel_proto = out.File
	file_pkg_api_eventing_v1alpha1_channel_proto_rawDesc = nil
	file_pkg_api_eventing_v1alpha1_channel_proto_goTypes = nil
	file_pkg_api_eventing_v1alpha1_channel_proto_depIdxs = nil
}
