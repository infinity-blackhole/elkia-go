// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/api/eventing/v1alpha1/auth.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_AuthInteract_FullMethodName                    = "/shikanime.elkia.eventing.v1alpha1.Auth/AuthInteract"
	Auth_ProduceCreateHandoffFlowCommand_FullMethodName = "/shikanime.elkia.eventing.v1alpha1.Auth/ProduceCreateHandoffFlowCommand"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// AuthInteract is a bi-directional stream that is used to interact with the
	// auth server
	AuthInteract(ctx context.Context, opts ...grpc.CallOption) (Auth_AuthInteractClient, error)
	// ProduceCreateHandoffFlowCommand send a login frame to the auth server and returns a
	// stream of events
	ProduceCreateHandoffFlowCommand(ctx context.Context, in *CreateHandoffFlowCommand, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) AuthInteract(ctx context.Context, opts ...grpc.CallOption) (Auth_AuthInteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &Auth_ServiceDesc.Streams[0], Auth_AuthInteract_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &authAuthInteractClient{stream}
	return x, nil
}

type Auth_AuthInteractClient interface {
	Send(*AuthInteractRequest) error
	Recv() (*AuthEvent, error)
	grpc.ClientStream
}

type authAuthInteractClient struct {
	grpc.ClientStream
}

func (x *authAuthInteractClient) Send(m *AuthInteractRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authAuthInteractClient) Recv() (*AuthEvent, error) {
	m := new(AuthEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authClient) ProduceCreateHandoffFlowCommand(ctx context.Context, in *CreateHandoffFlowCommand, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Auth_ProduceCreateHandoffFlowCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// AuthInteract is a bi-directional stream that is used to interact with the
	// auth server
	AuthInteract(Auth_AuthInteractServer) error
	// ProduceCreateHandoffFlowCommand send a login frame to the auth server and returns a
	// stream of events
	ProduceCreateHandoffFlowCommand(context.Context, *CreateHandoffFlowCommand) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) AuthInteract(Auth_AuthInteractServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthInteract not implemented")
}
func (UnimplementedAuthServer) ProduceCreateHandoffFlowCommand(context.Context, *CreateHandoffFlowCommand) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceCreateHandoffFlowCommand not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_AuthInteract_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServer).AuthInteract(&authAuthInteractServer{stream})
}

type Auth_AuthInteractServer interface {
	Send(*AuthEvent) error
	Recv() (*AuthInteractRequest, error)
	grpc.ServerStream
}

type authAuthInteractServer struct {
	grpc.ServerStream
}

func (x *authAuthInteractServer) Send(m *AuthEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authAuthInteractServer) Recv() (*AuthInteractRequest, error) {
	m := new(AuthInteractRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Auth_ProduceCreateHandoffFlowCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHandoffFlowCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ProduceCreateHandoffFlowCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ProduceCreateHandoffFlowCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ProduceCreateHandoffFlowCommand(ctx, req.(*CreateHandoffFlowCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shikanime.elkia.eventing.v1alpha1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProduceCreateHandoffFlowCommand",
			Handler:    _Auth_ProduceCreateHandoffFlowCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AuthInteract",
			Handler:       _Auth_AuthInteract_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/eventing/v1alpha1/auth.proto",
}
