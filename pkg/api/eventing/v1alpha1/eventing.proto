syntax = "proto3";
package shikanime.elkia.eventing.v1alpha1;

option go_package = "go.shikanime.studio/elkia/pkg/api/eventing/v1alpha1";

enum Code {
  OUTDATED_CLIENT = 0;
  UNEXPECTED_ERROR = 1;
  MAINTENANCE = 2;
  SESSION_ALREADY_USED = 3;
  UNVALID_CREDENTIALS = 4;
  CANT_AUTHENTICATE = 5;
  USER_BLOCKLISTED = 6;
  COUNTRY_BLACKLISTED = 7;
  BAD_CASE = 8;
}

message ErrorFrame { Code code = 1; }

message InfoFrame { string content = 1; }

message LoginFrame {
  string identifier = 2;
  string password = 3;
  string client_version = 5;
  string client_checksum = 7;
}

message Endpoint {
  string host = 1;
  string port = 2;
  uint32 weight = 3;
  uint32 world_id = 4;
  uint32 channel_id = 5;
  string world_name = 6;
}

message EndpointListFrame {
  uint32 code = 1;
  repeated Endpoint endpoints = 2;
}

message AuthInteractRequest {
  oneof payload {
    bytes raw_frame = 1;
    LoginFrame login_frame = 2;
  }
}

message AuthInteractResponse {
  oneof payload {
    ErrorFrame error_frame = 1;
    InfoFrame info_frame = 2;
    EndpointListFrame endpoint_list_frame = 3;
  }
}

service Auth {
  // AuthInteract is a bi-directional stream that is used to interact with the
  // auth server
  rpc AuthInteract(stream AuthInteractRequest)
      returns (stream AuthInteractResponse);

  // AuthCreateHandoffFlowFrameProduce send a login frame to the auth server and returns a
  // stream of events
  rpc AuthCreateHandoffFlowFrameProduce(LoginFrame) returns (stream AuthInteractResponse);
}

message SyncFrame {
  uint32 sequence = 1;
  uint32 code = 2;
}

message IdentifierFrame {
  uint32 sequence = 1;
  string identifier = 2;
}

message PasswordFrame {
  uint32 sequence = 1;
  string password = 2;
}

message HeartbeatFrame {}

// TODO: unidentified f_stash_end frame
message FStashEndFrame {}

// TODO: unidentified c_close frame
message CCloseFrame {}

// TODO: unidentified lbs frame
message LBSFrame { int32 type = 1; }

message MultiTargetFrame {
  string skill_id = 1;
  uint32 target_id = 2;
}

message MultiTargetListFrame {
  uint32 target_amount = 1;
  repeated MultiTargetFrame targets = 2;
}

enum RequestType {
  REQUESTED = 0;
  LIST = 1;
  CONFIRMED = 2;
  CANCELLED = 3;
  DECLINED = 4;
}

message RequestFrame {
  uint32 character_id = 1;
  RequestType type = 2;
}

enum CharacterOptions {
  EXCHANGE_BLOCKED = 0;
  FRIEND_REQUEST_BLOCKED = 1;
  FAMILY_REQUEST_BLOCKED = 2;
  WHISPER_BLOCKED = 3;
  GROUP_REQUEST_BLOCKED = 4;
  GROUP_SHARING = 5;
  MOUSE_AIM_LOCK = 6;
  HERO_CHAT_BLOCKED = 7;
  EMOTICONS_BLOCKED = 8;
  QUICK_GET_UP = 9;
  HP_BLOCKED = 10;
  BUFF_BLOCKED = 11;
  MINILAND_INVITE_BLOCKED = 12;
}

message GlobalOptionsFrame { CharacterOptions option = 1; }

message CommandFrame {
  uint32 sequence = 1;
  oneof payload {
    bytes raw_frame = 2;
    HeartbeatFrame heartbeat_frame = 3;
    FStashEndFrame f_stash_end_frame = 4;
    CCloseFrame c_close_frame = 5;
    LBSFrame lbs_frame = 6;
    MultiTargetListFrame multi_target_list_frame = 7;
    RequestFrame request_frame = 8;
    GlobalOptionsFrame global_options_frame = 9;
  }
}

message ChannelInteractRequest {
  oneof payload {
    SyncFrame sync_frame = 1;
    IdentifierFrame identifier_frame = 2;
    PasswordFrame password_frame = 3;
    CommandFrame command_frame = 5;
  }
}

enum CharacterClass {
  ADVENTURER = 0;
  SORCERER = 1;
  ARCHER = 2;
  SWORDMAN = 3;
  MARTIAL_ARTIST = 4;
}

enum Sex {
  Male = 0;
  Female = 1;
}

enum CharacterHairColor {
  MauveTaupe = 0;
  Cerise = 1;
  SanMarino = 2;
  Affair = 3;
  Dixie = 4;
  Raven = 5;
  Killarney = 6;
  Nutmeg = 7;
  Saddle = 8;
  Red = 9;
}

enum CharacterHairStyle {
  StyleA = 0;
  StyleB = 1;
  StyleC = 2;
  StyleD = 3;
  Shaved = 4;
}

enum Faction {
  Neutral = 0;
  Angel = 1;
  Demon = 2;
}

message Character {
  string id = 1;
  CharacterClass class = 2;
  Sex sex = 3;
  CharacterHairColor hair_color = 4;
  CharacterHairStyle hair_style = 5;
  Faction faction = 6;
  int32 reputation = 7;
  int32 dignity = 8;
  int32 compliment = 9;
  int32 health = 10;
  int32 mana = 11;
  string name = 12;
  int32 hero_experience = 13;
  int32 hero_level = 14;
  int32 job_experience = 15;
  int32 job_level = 16;
  int32 experience = 17;
  int32 level = 18;
}


message CharacterFrame {
  string id = 1;
  CharacterClass class = 2;
  Sex sex = 3;
  CharacterHairColor hair_color = 4;
  CharacterHairStyle hair_style = 5;
  Faction faction = 6;
  int32 reputation = 7;
  int32 dignity = 8;
  int32 compliment = 9;
  int32 health = 10;
  int32 mana = 11;
  string name = 12;
  int32 hero_experience = 13;
  int32 hero_level = 14;
  int32 job_experience = 15;
  int32 job_level = 16;
  int32 experience = 17;
  int32 level = 18;
}

message CharacterListFrame {
  uint32 code = 1;
  repeated CharacterFrame characters = 2;
}

message ChannelInteractResponse {
  oneof payload {
    ErrorFrame error_frame = 1;
    InfoFrame info_frame = 2;
    CharacterListFrame character_list_frame = 3;
  }
}

service Gateway {
  // ChannelInteract is a bi-directional stream that is used to interact with
  // the channel server
  rpc ChannelInteract(stream ChannelInteractRequest)
      returns (stream ChannelInteractResponse);
}

message CharacterAddRequest {
  string id = 1;
  string name = 2;
  CharacterClass class = 3;
  Sex sex = 4;
  CharacterHairColor hair_color = 5;
  CharacterHairStyle hair_style = 6;
}

message CharacterAddResponse {}

message CharacterRemoveRequest { string id = 1; }

message CharacterRemoveResponse {}

message CharacterUpdateRequest {
  string id = 1;
  optional uint32 world_id = 2;
  optional uint32 channel_id = 3;
  optional string name = 4;
  optional string address = 5;
  optional uint32 population = 6;
  optional uint32 capacity = 7;
}

message CharacterUpdateResponse {}

message CharacterListRequest { string identity_id = 1; }

message CharacterListResponse { repeated Character characters = 1; }

service Lobby {
  // CharacterAdd adds a new character to the world.
  rpc CharacterAdd(CharacterAddRequest) returns (CharacterAddResponse);

  // CharacterRemove removes an existing character from the world.
  rpc CharacterRemove(CharacterRemoveRequest) returns (CharacterRemoveResponse);

  // CharacterUpdate updates an existing character in the world.
  rpc CharacterUpdate(CharacterUpdateRequest) returns (CharacterUpdateResponse);

  // CharacterList lists all characters in the world.
  rpc CharacterList(CharacterListRequest) returns (CharacterListResponse);
}

