syntax = "proto3";
package shikanime.elkia.eventing.v1alpha1;

import "pkg/api/world/v1alpha1/world.proto";

option go_package = "go.shikanime.studio/elkia/pkg/api/eventing/v1alpha1";

enum Code {
  OUTDATED_CLIENT = 0;
  UNEXPECTED_ERROR = 1;
  MAINTENANCE = 2;
  SESSION_ALREADY_USED = 3;
  UNVALID_CREDENTIALS = 4;
  CANT_AUTHENTICATE = 5;
  USER_BLOCKLISTED = 6;
  COUNTRY_BLACKLISTED = 7;
  BAD_CASE = 8;
}

message Error { Code code = 1; }

message Info { string content = 1; }

message CreateLoginFlowRequest {
  string identifier = 2;
  string password = 3;
  string client_version = 5;
  string client_checksum = 7;
}

message Endpoint {
  string host = 1;
  string port = 2;
  uint32 weight = 3;
  uint32 world_id = 4;
  uint32 channel_id = 5;
  string world_name = 6;
}

message AuthInteractRequest {
  oneof request {
    CreateLoginFlowRequest create_login_flow = 1;
  }
}

message CreateLoginFlowResponse {
  uint32 code = 1;
  repeated Endpoint endpoints = 2;
}

message AuthInteractResponse {
  oneof response {
    Error error = 1;
    Info info = 2;
    CreateLoginFlowResponse create_login_flow = 3;
  }
}

service Auth {
  // AuthInteract is a bi-directional stream that is used to interact with the
  // auth server
  rpc AuthInteract(stream AuthInteractRequest)
      returns (stream AuthInteractResponse);

  // CreateLoginFlow send a login frame to the auth server
  rpc CreateLoginFlow(CreateLoginFlowRequest) returns (CreateLoginFlowResponse);
}

message SyncRequest {
  uint32 sequence = 1;
  uint32 code = 2;
}

message Identifier {
  uint32 sequence = 1;
  string value = 2;
}

message Password {
  uint32 sequence = 1;
  string value = 2;
}

message HeartbeatRequest {}

// TODO: unidentified f_stash_end frame
message FStashEndRequest {}

// TODO: unidentified c_close frame
message CCloseRequest {}

// TODO: unidentified lbs frame
message LBSRequest { int32 type = 1; }

message MultiTarget {
  string skill_id = 1;
  uint32 target_id = 2;
}

message MultiTargetListRequest {
  uint32 target_amount = 1;
  repeated MultiTarget targets = 2;
}

enum RequestType {
  REQUESTED = 0;
  LIST = 1;
  CONFIRMED = 2;
  CANCELLED = 3;
  DECLINED = 4;
}

message CharacterRequestRequest {
  uint32 character_id = 1;
  RequestType type = 2;
}

enum CharacterOptions {
  EXCHANGE_BLOCKED = 0;
  FRIEND_REQUEST_BLOCKED = 1;
  FAMILY_REQUEST_BLOCKED = 2;
  WHISPER_BLOCKED = 3;
  GROUP_REQUEST_BLOCKED = 4;
  GROUP_SHARING = 5;
  MOUSE_AIM_LOCK = 6;
  HERO_CHAT_BLOCKED = 7;
  EMOTICONS_BLOCKED = 8;
  QUICK_GET_UP = 9;
  HP_BLOCKED = 10;
  BUFF_BLOCKED = 11;
  MINILAND_INVITE_BLOCKED = 12;
}

message GlobalOptions { CharacterOptions option = 1; }

message CoreInteractRequest {
  uint32 sequence = 1;
  oneof request {
    bytes raw = 2;
    HeartbeatRequest heartbeat = 3;
  }
}

message ClientInteractRequest {
  uint32 sequence = 1;
  oneof request {
    FStashEndRequest f_stash_end = 2;
    CCloseRequest c_close = 3;
    LBSRequest lbs = 4;
    MultiTargetListRequest multi_target_list = 5;
    CharacterRequestRequest character_request = 6;
    GlobalOptions global_options = 7;
  }
}

message ChannelInteractRequest {
  oneof request {
    SyncRequest sync = 1;
    Identifier identifier = 2;
    Password password = 3;
    CoreInteractRequest core_interact = 4;
    ClientInteractRequest client_interact = 5;
    shikanime.elkia.world.v1alpha1.LobbyInteractRequest lobby_interact = 6;
  }
}

message ChannelInteractResponse {
  oneof response {
    Error error = 1;
    Info info = 2;
    shikanime.elkia.world.v1alpha1.LobbyInteractResponse lobby_interact = 3;
  }
}

service Gateway {
  // ChannelInteract is a bi-directional stream that is used to interact with
  // the channel server
  rpc ChannelInteract(stream ChannelInteractRequest)
      returns (stream ChannelInteractResponse);
}
