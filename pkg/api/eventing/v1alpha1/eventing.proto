syntax = "proto3";
package io.elkia.eventing.v1alpha1;

option go_package = "pkg/api/eventing/v1alpha1";

enum Code {
  OUTDATED_CLIENT = 0;
  UNEXPECTED_ERROR = 1;
  MAINTENANCE = 2;
  SESSION_ALREADY_USED = 3;
  UNVALID_CREDENTIALS = 4;
  CANT_AUTHENTICATE = 5;
  USER_BLOCKLISTED = 6;
  COUNTRY_BLACKLISTED = 7;
  BAD_CASE = 8;
}

message ErrorFrame { Code code = 1; }

message InfoFrame { string content = 1; }

message LoginFrame {
  string identifier = 2;
  string password = 3;
  string client_version = 5;
  string client_checksum = 7;
}

message Endpoint {
  string host = 1;
  string port = 2;
  uint32 weight = 3;
  uint32 world_id = 4;
  uint32 channel_id = 5;
  string world_name = 6;
}

message EndpointListFrame {
  uint32 code = 1;
  repeated Endpoint endpoints = 2;
}

message AuthInteractRequest {
  oneof payload {
    bytes raw_frame = 1;
    LoginFrame login_frame = 2;
  }
}

message AuthInteractResponse {
  oneof payload {
    ErrorFrame error_frame = 1;
    InfoFrame info_frame = 2;
    EndpointListFrame endpoint_list_frame = 3;
  }
}

service Auth {
  // AuthInteract is a bi-directional stream that is used to interact with the
  // auth server
  rpc AuthInteract(stream AuthInteractRequest)
      returns (stream AuthInteractResponse);

  // AuthLoginFrameProduce send a login frame to the auth server and returns a
  // stream of events
  rpc AuthLoginFrameProduce(LoginFrame) returns (stream AuthInteractResponse);
}

message SyncFrame {
  uint32 sequence = 1;
  uint32 code = 2;
}

message IdentifierFrame {
  uint32 sequence = 1;
  string identifier = 2;
}

message PasswordFrame {
  uint32 sequence = 1;
  string password = 2;
}

message HeartbeatFrame { uint32 sequence = 1; }

message ChannelFrame {
  uint32 sequence = 1;
  oneof payload { bytes raw_frame = 2; }
}

message ChannelInteractRequest {
  oneof payload {
    SyncFrame sync_frame = 1;
    IdentifierFrame identifier_frame = 2;
    PasswordFrame password_frame = 3;
    HeartbeatFrame heartbeat_frame = 4;
    ChannelFrame channel_frame = 5;
  }
}

message ChannelInteractResponse {
  oneof payload {
    ErrorFrame error_frame = 1;
    InfoFrame info_frame = 2;
  }
}

service Gateway {
  // ChannelInteract is a bi-directional stream that is used to interact with
  // the channel server
  rpc ChannelInteract(stream ChannelInteractRequest)
      returns (stream ChannelInteractResponse);
}