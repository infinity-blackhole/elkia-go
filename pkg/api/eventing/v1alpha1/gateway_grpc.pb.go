// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/api/eventing/v1alpha1/gateway.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_GatewayInteract_FullMethodName = "/shikanime.elkia.eventing.v1alpha1.Gateway/GatewayInteract"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// GatewayInteract is a bi-directional stream that is used to interact with
	// the channel server
	GatewayInteract(ctx context.Context, opts ...grpc.CallOption) (Gateway_GatewayInteractClient, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GatewayInteract(ctx context.Context, opts ...grpc.CallOption) (Gateway_GatewayInteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], Gateway_GatewayInteract_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayGatewayInteractClient{stream}
	return x, nil
}

type Gateway_GatewayInteractClient interface {
	Send(*GatewayCommand) error
	Recv() (*GatewayEvent, error)
	grpc.ClientStream
}

type gatewayGatewayInteractClient struct {
	grpc.ClientStream
}

func (x *gatewayGatewayInteractClient) Send(m *GatewayCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayGatewayInteractClient) Recv() (*GatewayEvent, error) {
	m := new(GatewayEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	// GatewayInteract is a bi-directional stream that is used to interact with
	// the channel server
	GatewayInteract(Gateway_GatewayInteractServer) error
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GatewayInteract(Gateway_GatewayInteractServer) error {
	return status.Errorf(codes.Unimplemented, "method GatewayInteract not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GatewayInteract_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).GatewayInteract(&gatewayGatewayInteractServer{stream})
}

type Gateway_GatewayInteractServer interface {
	Send(*GatewayEvent) error
	Recv() (*GatewayCommand, error)
	grpc.ServerStream
}

type gatewayGatewayInteractServer struct {
	grpc.ServerStream
}

func (x *gatewayGatewayInteractServer) Send(m *GatewayEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayGatewayInteractServer) Recv() (*GatewayCommand, error) {
	m := new(GatewayCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shikanime.elkia.eventing.v1alpha1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GatewayInteract",
			Handler:       _Gateway_GatewayInteract_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/eventing/v1alpha1/gateway.proto",
}
