syntax = "proto3";
package io.elkia.world.v1alpha1;

option go_package = "elkia-api-go/pkg/world/v1alpha1";

enum CharacterClass {
  ADVENTURER = 0;
  SORCERER = 1;
  ARCHER = 2;
  SWORDMAN = 3;
  MARTIAL_ARTIST = 4;
}

enum Sex {
  Male = 0;
  Female = 1;
}

enum CharacterHairColor {
  MauveTaupe = 0;
  Cerise = 1;
  SanMarino = 2;
  Affair = 3;
  Dixie = 4;
  Raven = 5;
  Killarney = 6;
  Nutmeg = 7;
  Saddle = 8;
  Red = 9;
}

enum CharacterHairStyle {
  StyleA = 0;
  StyleB = 1;
  StyleC = 2;
  StyleD = 3;
  Shaved = 4;
}

enum Faction {
  Neutral = 0;
  Angel = 1;
  Demon = 2;
}

message Character {
  string id = 1;
  CharacterClass class = 2;
  Sex sex = 3;
  CharacterHairColor hair_color = 4;
  CharacterHairStyle hair_style = 5;
  Faction faction = 6;
  int32 reputation = 7;
  int32 dignity = 8;
  int32 compliment = 9;
  int32 health = 10;
  int32 mana = 11;
  string name = 12;
  int32 hero_experience = 13;
  int32 hero_level = 14;
  int32 job_experience = 15;
  int32 job_level = 16;
  int32 experience = 17;
  int32 level = 18;
}

message CharacterAddRequest {
  string id = 1;
  string name = 2;
  CharacterClass class = 3;
  Sex sex = 4;
  CharacterHairColor hair_color = 5;
  CharacterHairStyle hair_style = 6;
}

message CharacterAddResponse {}

message CharacterRemoveRequest { string id = 1; }

message CharacterRemoveResponse {}

message CharacterUpdateRequest {
  string id = 1;
  optional uint32 world_id = 2;
  optional uint32 channel_id = 3;
  optional string name = 4;
  optional string address = 5;
  optional uint32 population = 6;
  optional uint32 capacity = 7;
}

message CharacterUpdateResponse {}

message CharacterListRequest { string identity_id = 1; }

message CharacterListResponse { repeated Character characters = 1; }

service Bridge {
  // CharacterAdd adds a new character to the world.
  rpc CharacterAdd(CharacterAddRequest) returns (CharacterAddResponse);

  // CharacterRemove removes an existing character from the world.
  rpc CharacterRemove(CharacterRemoveRequest) returns (CharacterRemoveResponse);

  // CharacterUpdate updates an existing character in the world.
  rpc CharacterUpdate(CharacterUpdateRequest) returns (CharacterUpdateResponse);

  // CharacterList lists all characters in the world.
  rpc CharacterList(CharacterListRequest) returns (CharacterListResponse);
}
