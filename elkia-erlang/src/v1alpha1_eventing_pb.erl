%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.7
%% Version source: file
-module(v1alpha1_eventing_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_io.elkia.eventing.v1alpha1.Code'/1, 'enum_value_by_symbol_io.elkia.eventing.v1alpha1.Code'/1]).
-export(['enum_symbol_by_value_io.elkia.eventing.v1alpha1.RequestType'/1, 'enum_value_by_symbol_io.elkia.eventing.v1alpha1.RequestType'/1]).
-export(['enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'/1, 'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types
-type 'io.elkia.eventing.v1alpha1.Code'() :: 'OUTDATED_CLIENT' | 'UNEXPECTED_ERROR' | 'MAINTENANCE' | 'SESSION_ALREADY_USED' | 'UNVALID_CREDENTIALS' | 'CANT_AUTHENTICATE' | 'USER_BLOCKLISTED' | 'COUNTRY_BLACKLISTED' | 'BAD_CASE'.
-type 'io.elkia.eventing.v1alpha1.RequestType'() :: 'REQUESTED' | 'LIST' | 'CONFIRMED' | 'CANCELLED' | 'DECLINED'.
-type 'io.elkia.eventing.v1alpha1.CharacterOptions'() :: 'EXCHANGE_BLOCKED' | 'FRIEND_REQUEST_BLOCKED' | 'FAMILY_REQUEST_BLOCKED' | 'WHISPER_BLOCKED' | 'GROUP_REQUEST_BLOCKED' | 'GROUP_SHARING' | 'MOUSE_AIM_LOCK' | 'HERO_CHAT_BLOCKED' | 'EMOTICONS_BLOCKED' | 'QUICK_GET_UP' | 'HP_BLOCKED' | 'BUFF_BLOCKED' | 'MINILAND_INVITE_BLOCKED'.
-export_type(['io.elkia.eventing.v1alpha1.Code'/0, 'io.elkia.eventing.v1alpha1.RequestType'/0, 'io.elkia.eventing.v1alpha1.CharacterOptions'/0]).

%% message types
-type error_frame() ::
      #{code                    => 'OUTDATED_CLIENT' | 'UNEXPECTED_ERROR' | 'MAINTENANCE' | 'SESSION_ALREADY_USED' | 'UNVALID_CREDENTIALS' | 'CANT_AUTHENTICATE' | 'USER_BLOCKLISTED' | 'COUNTRY_BLACKLISTED' | 'BAD_CASE' | integer() % = 1, optional, enum io.elkia.eventing.v1alpha1.Code
       }.

-type info_frame() ::
      #{content                 => unicode:chardata() % = 1, optional
       }.

-type login_frame() ::
      #{identifier              => unicode:chardata(), % = 2, optional
        password                => unicode:chardata(), % = 3, optional
        client_version          => unicode:chardata(), % = 5, optional
        client_checksum         => unicode:chardata() % = 7, optional
       }.

-type endpoint_frame() ::
      #{host                    => unicode:chardata(), % = 1, optional
        port                    => unicode:chardata(), % = 2, optional
        weight                  => non_neg_integer(), % = 3, optional, 32 bits
        world_id                => non_neg_integer(), % = 4, optional, 32 bits
        channel_id              => non_neg_integer(), % = 5, optional, 32 bits
        world_name              => unicode:chardata() % = 6, optional
       }.

-type endpoint_list_frame() ::
      #{code                    => non_neg_integer(), % = 1, optional, 32 bits
        endpoint_frames         => [endpoint_frame()] % = 2, repeated
       }.

-type auth_interact_request() ::
      #{payload                 => {raw_frame, iodata()} | {login_frame, login_frame()} % oneof
       }.

-type auth_interact_response() ::
      #{payload                 => {error_frame, error_frame()} | {info_frame, info_frame()} | {endpoint_list_frame, endpoint_list_frame()} % oneof
       }.

-type auth_watch_request() ::
      #{identifier              => unicode:chardata(), % = 1, optional
        password                => unicode:chardata(), % = 2, optional
        client_version          => unicode:chardata(), % = 3, optional
        client_checksum         => unicode:chardata() % = 4, optional
       }.

-type sync_frame() ::
      #{sequence                => non_neg_integer(), % = 1, optional, 32 bits
        code                    => non_neg_integer() % = 2, optional, 32 bits
       }.

-type identifier_frame() ::
      #{sequence                => non_neg_integer(), % = 1, optional, 32 bits
        identifier              => unicode:chardata() % = 2, optional
       }.

-type password_frame() ::
      #{sequence                => non_neg_integer(), % = 1, optional, 32 bits
        password                => unicode:chardata() % = 2, optional
       }.

-type heartbeat_frame() ::
      #{
       }.

-type f_stash_end_frame() ::
      #{
       }.

-type c_close_frame() ::
      #{
       }.

-type lbs_frame() ::
      #{type                    => integer()        % = 1, optional, 32 bits
       }.

-type multi_target_frame() ::
      #{skill_id                => unicode:chardata(), % = 1, optional
        target_id               => non_neg_integer() % = 2, optional, 32 bits
       }.

-type multi_target_list_frame() ::
      #{target_amount           => non_neg_integer(), % = 1, optional, 32 bits
        targets                 => [multi_target_frame()] % = 2, repeated
       }.

-type request_frame() ::
      #{character_id            => non_neg_integer(), % = 1, optional, 32 bits
        type                    => 'REQUESTED' | 'LIST' | 'CONFIRMED' | 'CANCELLED' | 'DECLINED' | integer() % = 2, optional, enum io.elkia.eventing.v1alpha1.RequestType
       }.

-type global_options_frame() ::
      #{option                  => 'EXCHANGE_BLOCKED' | 'FRIEND_REQUEST_BLOCKED' | 'FAMILY_REQUEST_BLOCKED' | 'WHISPER_BLOCKED' | 'GROUP_REQUEST_BLOCKED' | 'GROUP_SHARING' | 'MOUSE_AIM_LOCK' | 'HERO_CHAT_BLOCKED' | 'EMOTICONS_BLOCKED' | 'QUICK_GET_UP' | 'HP_BLOCKED' | 'BUFF_BLOCKED' | 'MINILAND_INVITE_BLOCKED' | integer() % = 1, optional, enum io.elkia.eventing.v1alpha1.CharacterOptions
       }.

-type command_frame() ::
      #{sequence                => non_neg_integer(), % = 1, optional, 32 bits
        payload                 => {raw_frame, iodata()} | {heartbeat_frame, heartbeat_frame()} | {f_stash_end_frame, f_stash_end_frame()} | {c_close_frame, c_close_frame()} | {lbs_frame, lbs_frame()} | {multi_target_list_frame, multi_target_list_frame()} | {request_frame, request_frame()} | {global_options_frame, global_options_frame()} % oneof
       }.

-type channel_interact_request() ::
      #{payload                 => {sync_frame, sync_frame()} | {identifier_frame, identifier_frame()} | {password_frame, password_frame()} | {command_frame, command_frame()} % oneof
       }.

-type channel_interact_response() ::
      #{payload                 => {error_frame, error_frame()} | {info_frame, info_frame()} % oneof
       }.

-type channel_watch_request() ::
      #{sequence                => non_neg_integer(), % = 1, optional, 32 bits
        code                    => non_neg_integer(), % = 2, optional, 32 bits
        identifier              => unicode:chardata(), % = 3, optional
        password                => unicode:chardata() % = 4, optional
       }.

-export_type(['error_frame'/0, 'info_frame'/0, 'login_frame'/0, 'endpoint_frame'/0, 'endpoint_list_frame'/0, 'auth_interact_request'/0, 'auth_interact_response'/0, 'auth_watch_request'/0, 'sync_frame'/0, 'identifier_frame'/0, 'password_frame'/0, 'heartbeat_frame'/0, 'f_stash_end_frame'/0, 'c_close_frame'/0, 'lbs_frame'/0, 'multi_target_frame'/0, 'multi_target_list_frame'/0, 'request_frame'/0, 'global_options_frame'/0, 'command_frame'/0, 'channel_interact_request'/0, 'channel_interact_response'/0, 'channel_watch_request'/0]).
-type '$msg_name'() :: error_frame | info_frame | login_frame | endpoint_frame | endpoint_list_frame | auth_interact_request | auth_interact_response | auth_watch_request | sync_frame | identifier_frame | password_frame | heartbeat_frame | f_stash_end_frame | c_close_frame | lbs_frame | multi_target_frame | multi_target_list_frame | request_frame | global_options_frame | command_frame | channel_interact_request | channel_interact_response | channel_watch_request.
-type '$msg'() :: error_frame() | info_frame() | login_frame() | endpoint_frame() | endpoint_list_frame() | auth_interact_request() | auth_interact_response() | auth_watch_request() | sync_frame() | identifier_frame() | password_frame() | heartbeat_frame() | f_stash_end_frame() | c_close_frame() | lbs_frame() | multi_target_frame() | multi_target_list_frame() | request_frame() | global_options_frame() | command_frame() | channel_interact_request() | channel_interact_response() | channel_watch_request().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        error_frame -> encode_msg_error_frame(id(Msg, TrUserData), TrUserData);
        info_frame -> encode_msg_info_frame(id(Msg, TrUserData), TrUserData);
        login_frame -> encode_msg_login_frame(id(Msg, TrUserData), TrUserData);
        endpoint_frame -> encode_msg_endpoint_frame(id(Msg, TrUserData), TrUserData);
        endpoint_list_frame -> encode_msg_endpoint_list_frame(id(Msg, TrUserData), TrUserData);
        auth_interact_request -> encode_msg_auth_interact_request(id(Msg, TrUserData), TrUserData);
        auth_interact_response -> encode_msg_auth_interact_response(id(Msg, TrUserData), TrUserData);
        auth_watch_request -> encode_msg_auth_watch_request(id(Msg, TrUserData), TrUserData);
        sync_frame -> encode_msg_sync_frame(id(Msg, TrUserData), TrUserData);
        identifier_frame -> encode_msg_identifier_frame(id(Msg, TrUserData), TrUserData);
        password_frame -> encode_msg_password_frame(id(Msg, TrUserData), TrUserData);
        heartbeat_frame -> encode_msg_heartbeat_frame(id(Msg, TrUserData), TrUserData);
        f_stash_end_frame -> encode_msg_f_stash_end_frame(id(Msg, TrUserData), TrUserData);
        c_close_frame -> encode_msg_c_close_frame(id(Msg, TrUserData), TrUserData);
        lbs_frame -> encode_msg_lbs_frame(id(Msg, TrUserData), TrUserData);
        multi_target_frame -> encode_msg_multi_target_frame(id(Msg, TrUserData), TrUserData);
        multi_target_list_frame -> encode_msg_multi_target_list_frame(id(Msg, TrUserData), TrUserData);
        request_frame -> encode_msg_request_frame(id(Msg, TrUserData), TrUserData);
        global_options_frame -> encode_msg_global_options_frame(id(Msg, TrUserData), TrUserData);
        command_frame -> encode_msg_command_frame(id(Msg, TrUserData), TrUserData);
        channel_interact_request -> encode_msg_channel_interact_request(id(Msg, TrUserData), TrUserData);
        channel_interact_response -> encode_msg_channel_interact_response(id(Msg, TrUserData), TrUserData);
        channel_watch_request -> encode_msg_channel_watch_request(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_error_frame(Msg, TrUserData) -> encode_msg_error_frame(Msg, <<>>, TrUserData).


encode_msg_error_frame(#{} = M, Bin, TrUserData) ->
    case M of
        #{code := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 'OUTDATED_CLIENT'; TrF1 =:= 0 -> Bin;
                   true -> 'e_enum_io.elkia.eventing.v1alpha1.Code'(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_info_frame(Msg, TrUserData) -> encode_msg_info_frame(Msg, <<>>, TrUserData).


encode_msg_info_frame(#{} = M, Bin, TrUserData) ->
    case M of
        #{content := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_login_frame(Msg, TrUserData) -> encode_msg_login_frame(Msg, <<>>, TrUserData).


encode_msg_login_frame(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{identifier := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{password := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{client_version := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false -> e_type_string(TrF3, <<B2/binary, 42>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{client_checksum := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case is_empty_string(TrF4) of
                    true -> B3;
                    false -> e_type_string(TrF4, <<B3/binary, 58>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_endpoint_frame(Msg, TrUserData) -> encode_msg_endpoint_frame(Msg, <<>>, TrUserData).


encode_msg_endpoint_frame(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{host := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{port := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{weight := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{world_id := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     if TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{channel_id := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     if TrF5 =:= 0 -> B4;
                        true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    case M of
        #{world_name := F6} ->
            begin
                TrF6 = id(F6, TrUserData),
                case is_empty_string(TrF6) of
                    true -> B5;
                    false -> e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
                end
            end;
        _ -> B5
    end.

encode_msg_endpoint_list_frame(Msg, TrUserData) -> encode_msg_endpoint_list_frame(Msg, <<>>, TrUserData).


encode_msg_endpoint_list_frame(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{code := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{endpoint_frames := F2} ->
            TrF2 = id(F2, TrUserData),
            if TrF2 == [] -> B1;
               true -> e_field_endpoint_list_frame_endpoint_frames(TrF2, B1, TrUserData)
            end;
        _ -> B1
    end.

encode_msg_auth_interact_request(Msg, TrUserData) -> encode_msg_auth_interact_request(Msg, <<>>, TrUserData).


encode_msg_auth_interact_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{payload := F1} ->
            case id(F1, TrUserData) of
                {raw_frame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_type_bytes(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {login_frame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_auth_interact_request_login_frame(TrTF1, <<Bin/binary, 18>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_auth_interact_response(Msg, TrUserData) -> encode_msg_auth_interact_response(Msg, <<>>, TrUserData).


encode_msg_auth_interact_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{payload := F1} ->
            case id(F1, TrUserData) of
                {error_frame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_auth_interact_response_error_frame(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {info_frame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_auth_interact_response_info_frame(TrTF1, <<Bin/binary, 18>>, TrUserData) end;
                {endpoint_list_frame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_auth_interact_response_endpoint_list_frame(TrTF1, <<Bin/binary, 26>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_auth_watch_request(Msg, TrUserData) -> encode_msg_auth_watch_request(Msg, <<>>, TrUserData).


encode_msg_auth_watch_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{identifier := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{password := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{client_version := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{client_checksum := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case is_empty_string(TrF4) of
                    true -> B3;
                    false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_sync_frame(Msg, TrUserData) -> encode_msg_sync_frame(Msg, <<>>, TrUserData).


encode_msg_sync_frame(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{sequence := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{code := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_identifier_frame(Msg, TrUserData) -> encode_msg_identifier_frame(Msg, <<>>, TrUserData).


encode_msg_identifier_frame(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{sequence := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{identifier := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_password_frame(Msg, TrUserData) -> encode_msg_password_frame(Msg, <<>>, TrUserData).


encode_msg_password_frame(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{sequence := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{password := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_heartbeat_frame(_Msg, _TrUserData) -> <<>>.

encode_msg_f_stash_end_frame(_Msg, _TrUserData) -> <<>>.

encode_msg_c_close_frame(_Msg, _TrUserData) -> <<>>.

encode_msg_lbs_frame(Msg, TrUserData) -> encode_msg_lbs_frame(Msg, <<>>, TrUserData).


encode_msg_lbs_frame(#{} = M, Bin, TrUserData) ->
    case M of
        #{type := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_multi_target_frame(Msg, TrUserData) -> encode_msg_multi_target_frame(Msg, <<>>, TrUserData).


encode_msg_multi_target_frame(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{skill_id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{target_id := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_multi_target_list_frame(Msg, TrUserData) -> encode_msg_multi_target_list_frame(Msg, <<>>, TrUserData).


encode_msg_multi_target_list_frame(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{target_amount := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{targets := F2} ->
            TrF2 = id(F2, TrUserData),
            if TrF2 == [] -> B1;
               true -> e_field_multi_target_list_frame_targets(TrF2, B1, TrUserData)
            end;
        _ -> B1
    end.

encode_msg_request_frame(Msg, TrUserData) -> encode_msg_request_frame(Msg, <<>>, TrUserData).


encode_msg_request_frame(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{character_id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{type := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 'REQUESTED'; TrF2 =:= 0 -> B1;
                   true -> 'e_enum_io.elkia.eventing.v1alpha1.RequestType'(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_global_options_frame(Msg, TrUserData) -> encode_msg_global_options_frame(Msg, <<>>, TrUserData).


encode_msg_global_options_frame(#{} = M, Bin, TrUserData) ->
    case M of
        #{option := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 'EXCHANGE_BLOCKED'; TrF1 =:= 0 -> Bin;
                   true -> 'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_command_frame(Msg, TrUserData) -> encode_msg_command_frame(Msg, <<>>, TrUserData).


encode_msg_command_frame(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{sequence := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{payload := F2} ->
            case id(F2, TrUserData) of
                {raw_frame, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_type_bytes(TrTF2, <<B1/binary, 18>>, TrUserData) end;
                {heartbeat_frame, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_command_frame_heartbeat_frame(TrTF2, <<B1/binary, 26>>, TrUserData) end;
                {f_stash_end_frame, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_command_frame_f_stash_end_frame(TrTF2, <<B1/binary, 34>>, TrUserData) end;
                {c_close_frame, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_command_frame_c_close_frame(TrTF2, <<B1/binary, 42>>, TrUserData) end;
                {lbs_frame, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_command_frame_lbs_frame(TrTF2, <<B1/binary, 50>>, TrUserData) end;
                {multi_target_list_frame, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_command_frame_multi_target_list_frame(TrTF2, <<B1/binary, 58>>, TrUserData) end;
                {request_frame, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_command_frame_request_frame(TrTF2, <<B1/binary, 66>>, TrUserData) end;
                {global_options_frame, TF2} -> begin TrTF2 = id(TF2, TrUserData), e_mfield_command_frame_global_options_frame(TrTF2, <<B1/binary, 74>>, TrUserData) end
            end;
        _ -> B1
    end.

encode_msg_channel_interact_request(Msg, TrUserData) -> encode_msg_channel_interact_request(Msg, <<>>, TrUserData).


encode_msg_channel_interact_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{payload := F1} ->
            case id(F1, TrUserData) of
                {sync_frame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_channel_interact_request_sync_frame(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {identifier_frame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_channel_interact_request_identifier_frame(TrTF1, <<Bin/binary, 18>>, TrUserData) end;
                {password_frame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_channel_interact_request_password_frame(TrTF1, <<Bin/binary, 26>>, TrUserData) end;
                {command_frame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_channel_interact_request_command_frame(TrTF1, <<Bin/binary, 42>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_channel_interact_response(Msg, TrUserData) -> encode_msg_channel_interact_response(Msg, <<>>, TrUserData).


encode_msg_channel_interact_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{payload := F1} ->
            case id(F1, TrUserData) of
                {error_frame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_channel_interact_response_error_frame(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {info_frame, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_channel_interact_response_info_frame(TrTF1, <<Bin/binary, 18>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_channel_watch_request(Msg, TrUserData) -> encode_msg_channel_watch_request(Msg, <<>>, TrUserData).


encode_msg_channel_watch_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{sequence := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{code := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{identifier := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{password := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case is_empty_string(TrF4) of
                    true -> B3;
                    false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

e_mfield_endpoint_list_frame_endpoint_frames(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_endpoint_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_endpoint_list_frame_endpoint_frames([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_endpoint_list_frame_endpoint_frames(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_endpoint_list_frame_endpoint_frames(Rest, Bin3, TrUserData);
e_field_endpoint_list_frame_endpoint_frames([], Bin, _TrUserData) -> Bin.

e_mfield_auth_interact_request_login_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_login_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_auth_interact_response_error_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_error_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_auth_interact_response_info_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_info_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_auth_interact_response_endpoint_list_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_endpoint_list_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_multi_target_list_frame_targets(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_multi_target_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_multi_target_list_frame_targets([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_multi_target_list_frame_targets(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_multi_target_list_frame_targets(Rest, Bin3, TrUserData);
e_field_multi_target_list_frame_targets([], Bin, _TrUserData) -> Bin.

e_mfield_command_frame_heartbeat_frame(_Msg, Bin, _TrUserData) -> <<Bin/binary, 0>>.

e_mfield_command_frame_f_stash_end_frame(_Msg, Bin, _TrUserData) -> <<Bin/binary, 0>>.

e_mfield_command_frame_c_close_frame(_Msg, Bin, _TrUserData) -> <<Bin/binary, 0>>.

e_mfield_command_frame_lbs_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_lbs_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_command_frame_multi_target_list_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_multi_target_list_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_command_frame_request_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_request_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_command_frame_global_options_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_global_options_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_interact_request_sync_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_sync_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_interact_request_identifier_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_identifier_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_interact_request_password_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_password_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_interact_request_command_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_command_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_interact_response_error_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_error_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_channel_interact_response_info_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_info_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_io.elkia.eventing.v1alpha1.Code'('OUTDATED_CLIENT', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_io.elkia.eventing.v1alpha1.Code'('UNEXPECTED_ERROR', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_io.elkia.eventing.v1alpha1.Code'('MAINTENANCE', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_io.elkia.eventing.v1alpha1.Code'('SESSION_ALREADY_USED', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_io.elkia.eventing.v1alpha1.Code'('UNVALID_CREDENTIALS', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_io.elkia.eventing.v1alpha1.Code'('CANT_AUTHENTICATE', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_io.elkia.eventing.v1alpha1.Code'('USER_BLOCKLISTED', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_io.elkia.eventing.v1alpha1.Code'('COUNTRY_BLACKLISTED', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_io.elkia.eventing.v1alpha1.Code'('BAD_CASE', Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_io.elkia.eventing.v1alpha1.Code'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_io.elkia.eventing.v1alpha1.RequestType'('REQUESTED', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_io.elkia.eventing.v1alpha1.RequestType'('LIST', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_io.elkia.eventing.v1alpha1.RequestType'('CONFIRMED', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_io.elkia.eventing.v1alpha1.RequestType'('CANCELLED', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_io.elkia.eventing.v1alpha1.RequestType'('DECLINED', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_io.elkia.eventing.v1alpha1.RequestType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('EXCHANGE_BLOCKED', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('FRIEND_REQUEST_BLOCKED', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('FAMILY_REQUEST_BLOCKED', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('WHISPER_BLOCKED', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('GROUP_REQUEST_BLOCKED', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('GROUP_SHARING', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('MOUSE_AIM_LOCK', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('HERO_CHAT_BLOCKED', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('EMOTICONS_BLOCKED', Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('QUICK_GET_UP', Bin, _TrUserData) -> <<Bin/binary, 9>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('HP_BLOCKED', Bin, _TrUserData) -> <<Bin/binary, 10>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('BUFF_BLOCKED', Bin, _TrUserData) -> <<Bin/binary, 11>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('MINILAND_INVITE_BLOCKED', Bin, _TrUserData) -> <<Bin/binary, 12>>;
'e_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(error_frame, Bin, TrUserData) -> id(decode_msg_error_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(info_frame, Bin, TrUserData) -> id(decode_msg_info_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(login_frame, Bin, TrUserData) -> id(decode_msg_login_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(endpoint_frame, Bin, TrUserData) -> id(decode_msg_endpoint_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(endpoint_list_frame, Bin, TrUserData) -> id(decode_msg_endpoint_list_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_interact_request, Bin, TrUserData) -> id(decode_msg_auth_interact_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_interact_response, Bin, TrUserData) -> id(decode_msg_auth_interact_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_watch_request, Bin, TrUserData) -> id(decode_msg_auth_watch_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(sync_frame, Bin, TrUserData) -> id(decode_msg_sync_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(identifier_frame, Bin, TrUserData) -> id(decode_msg_identifier_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(password_frame, Bin, TrUserData) -> id(decode_msg_password_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(heartbeat_frame, Bin, TrUserData) -> id(decode_msg_heartbeat_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(f_stash_end_frame, Bin, TrUserData) -> id(decode_msg_f_stash_end_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(c_close_frame, Bin, TrUserData) -> id(decode_msg_c_close_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(lbs_frame, Bin, TrUserData) -> id(decode_msg_lbs_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(multi_target_frame, Bin, TrUserData) -> id(decode_msg_multi_target_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(multi_target_list_frame, Bin, TrUserData) -> id(decode_msg_multi_target_list_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(request_frame, Bin, TrUserData) -> id(decode_msg_request_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(global_options_frame, Bin, TrUserData) -> id(decode_msg_global_options_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(command_frame, Bin, TrUserData) -> id(decode_msg_command_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(channel_interact_request, Bin, TrUserData) -> id(decode_msg_channel_interact_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(channel_interact_response, Bin, TrUserData) -> id(decode_msg_channel_interact_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(channel_watch_request, Bin, TrUserData) -> id(decode_msg_channel_watch_request(Bin, TrUserData), TrUserData).



decode_msg_error_frame(Bin, TrUserData) -> dfp_read_field_def_error_frame(Bin, 0, 0, 0, id('OUTDATED_CLIENT', TrUserData), TrUserData).

dfp_read_field_def_error_frame(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_error_frame_code(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_error_frame(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1};
dfp_read_field_def_error_frame(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_error_frame(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_error_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_error_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_error_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_error_frame_code(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_error_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_error_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_error_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_error_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_error_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_error_frame(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1}.

d_field_error_frame_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_error_frame_code(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_error_frame_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.eventing.v1alpha1.Code'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_error_frame(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_error_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_error_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_error_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_error_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_error_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_error_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_error_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_error_frame(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_error_frame(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_error_frame(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_error_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_error_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_error_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_error_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_info_frame(Bin, TrUserData) -> dfp_read_field_def_info_frame(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_info_frame(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_info_frame_content(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_info_frame(<<>>, 0, 0, _, F@_1, _) -> #{content => F@_1};
dfp_read_field_def_info_frame(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_info_frame(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_info_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_info_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_info_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_info_frame_content(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_info_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_info_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_info_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_info_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_info_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_info_frame(<<>>, 0, 0, _, F@_1, _) -> #{content => F@_1}.

d_field_info_frame_content(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_info_frame_content(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_info_frame_content(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_info_frame(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_info_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_info_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_info_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_info_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_info_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_info_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_info_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_info_frame(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_info_frame(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_info_frame(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_info_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_info_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_info_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_info_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_login_frame(Bin, TrUserData) -> dfp_read_field_def_login_frame(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_login_frame(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_login_frame_identifier(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_login_frame(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_login_frame_password(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_login_frame(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_login_frame_client_version(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_login_frame(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_login_frame_client_checksum(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_login_frame(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{identifier => F@_1, password => F@_2, client_version => F@_3, client_checksum => F@_4};
dfp_read_field_def_login_frame(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_login_frame(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_login_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_login_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_login_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        18 -> d_field_login_frame_identifier(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_login_frame_password(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        42 -> d_field_login_frame_client_version(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        58 -> d_field_login_frame_client_checksum(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_login_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_login_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_login_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_login_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_login_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_login_frame(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{identifier => F@_1, password => F@_2, client_version => F@_3, client_checksum => F@_4}.

d_field_login_frame_identifier(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_login_frame_identifier(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_login_frame_identifier(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_login_frame(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_login_frame_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_login_frame_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_login_frame_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_login_frame(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_login_frame_client_version(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_login_frame_client_version(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_login_frame_client_version(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_login_frame(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_login_frame_client_checksum(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_login_frame_client_checksum(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_login_frame_client_checksum(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_login_frame(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_login_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_login_frame(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_login_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_login_frame(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_login_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_login_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_login_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_login_frame(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_login_frame(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_login_frame(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_login_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_login_frame(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_login_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_login_frame(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_endpoint_frame(Bin, TrUserData) -> dfp_read_field_def_endpoint_frame(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(0, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_endpoint_frame(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_endpoint_frame_host(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_endpoint_frame(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_endpoint_frame_port(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_endpoint_frame(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_endpoint_frame_weight(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_endpoint_frame(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_endpoint_frame_world_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_endpoint_frame(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_endpoint_frame_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_endpoint_frame(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_endpoint_frame_world_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_endpoint_frame(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #{host => F@_1, port => F@_2, weight => F@_3, world_id => F@_4, channel_id => F@_5, world_name => F@_6};
dfp_read_field_def_endpoint_frame(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_endpoint_frame(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_endpoint_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 -> dg_read_field_def_endpoint_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_endpoint_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_endpoint_frame_host(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        18 -> d_field_endpoint_frame_port(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        24 -> d_field_endpoint_frame_weight(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        32 -> d_field_endpoint_frame_world_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        40 -> d_field_endpoint_frame_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        50 -> d_field_endpoint_frame_world_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_endpoint_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_endpoint_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_endpoint_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_endpoint_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_endpoint_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_endpoint_frame(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #{host => F@_1, port => F@_2, weight => F@_3, world_id => F@_4, channel_id => F@_5, world_name => F@_6}.

d_field_endpoint_frame_host(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_endpoint_frame_host(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_endpoint_frame_host(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_endpoint_frame(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_endpoint_frame_port(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_endpoint_frame_port(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_endpoint_frame_port(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_endpoint_frame(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_endpoint_frame_weight(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_endpoint_frame_weight(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_endpoint_frame_weight(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_endpoint_frame(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_endpoint_frame_world_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_endpoint_frame_world_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_endpoint_frame_world_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_endpoint_frame(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_endpoint_frame_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_endpoint_frame_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_endpoint_frame_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_endpoint_frame(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_endpoint_frame_world_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_endpoint_frame_world_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_endpoint_frame_world_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_endpoint_frame(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_endpoint_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_endpoint_frame(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_endpoint_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_endpoint_frame(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_endpoint_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    skip_length_delimited_endpoint_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_endpoint_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_endpoint_frame(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_endpoint_frame(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_endpoint_frame(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_endpoint_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_endpoint_frame(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_endpoint_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_endpoint_frame(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_endpoint_list_frame(Bin, TrUserData) -> dfp_read_field_def_endpoint_list_frame(Bin, 0, 0, 0, id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_endpoint_list_frame(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_endpoint_list_frame_code(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_endpoint_list_frame(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_endpoint_list_frame_endpoint_frames(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_endpoint_list_frame(<<>>, 0, 0, _, F@_1, R1, TrUserData) ->
    S1 = #{code => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{endpoint_frames => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_endpoint_list_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_endpoint_list_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_endpoint_list_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_endpoint_list_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_endpoint_list_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_endpoint_list_frame_code(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_endpoint_list_frame_endpoint_frames(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_endpoint_list_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_endpoint_list_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_endpoint_list_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_endpoint_list_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_endpoint_list_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_endpoint_list_frame(<<>>, 0, 0, _, F@_1, R1, TrUserData) ->
    S1 = #{code => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{endpoint_frames => lists_reverse(R1, TrUserData)}
    end.

d_field_endpoint_list_frame_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_endpoint_list_frame_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_endpoint_list_frame_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_endpoint_list_frame(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_endpoint_list_frame_endpoint_frames(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_endpoint_list_frame_endpoint_frames(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_endpoint_list_frame_endpoint_frames(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_endpoint_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_endpoint_list_frame(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_endpoint_list_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_endpoint_list_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_endpoint_list_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_endpoint_list_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_endpoint_list_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_endpoint_list_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_endpoint_list_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_endpoint_list_frame(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_endpoint_list_frame(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_endpoint_list_frame(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_endpoint_list_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_endpoint_list_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_endpoint_list_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_endpoint_list_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_auth_interact_request(Bin, TrUserData) -> dfp_read_field_def_auth_interact_request(Bin, 0, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_auth_interact_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_auth_interact_request_raw_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_auth_interact_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_auth_interact_request_login_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_auth_interact_request(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{payload => F@_1}
    end;
dfp_read_field_def_auth_interact_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_auth_interact_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_auth_interact_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_interact_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_auth_interact_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_auth_interact_request_raw_frame(Rest, 0, 0, 0, F@_1, TrUserData);
        18 -> d_field_auth_interact_request_login_frame(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_interact_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_auth_interact_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_auth_interact_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_auth_interact_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_auth_interact_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_auth_interact_request(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{payload => F@_1}
    end.

d_field_auth_interact_request_raw_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_auth_interact_request_raw_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_auth_interact_request_raw_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_interact_request(RestF, 0, 0, F, id({raw_frame, NewFValue}, TrUserData), TrUserData).

d_field_auth_interact_request_login_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_auth_interact_request_login_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_auth_interact_request_login_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_login_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_auth_interact_request(RestF,
                                             0,
                                             0,
                                             F,
                                             case Prev of
                                                 '$undef' -> id({login_frame, NewFValue}, TrUserData);
                                                 {login_frame, MVPrev} -> id({login_frame, merge_msg_login_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                 _ -> id({login_frame, NewFValue}, TrUserData)
                                             end,
                                             TrUserData).

skip_varint_auth_interact_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_auth_interact_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_auth_interact_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_interact_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_auth_interact_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_auth_interact_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_auth_interact_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_interact_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_auth_interact_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_interact_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_auth_interact_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_interact_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_auth_interact_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_interact_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_auth_interact_response(Bin, TrUserData) -> dfp_read_field_def_auth_interact_response(Bin, 0, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_auth_interact_response(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_auth_interact_response_error_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_auth_interact_response(<<18, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_auth_interact_response_info_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_auth_interact_response(<<26, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_auth_interact_response_endpoint_list_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_auth_interact_response(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{payload => F@_1}
    end;
dfp_read_field_def_auth_interact_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_auth_interact_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_auth_interact_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_interact_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_auth_interact_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_auth_interact_response_error_frame(Rest, 0, 0, 0, F@_1, TrUserData);
        18 -> d_field_auth_interact_response_info_frame(Rest, 0, 0, 0, F@_1, TrUserData);
        26 -> d_field_auth_interact_response_endpoint_list_frame(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_interact_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_auth_interact_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_auth_interact_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_auth_interact_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_auth_interact_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_auth_interact_response(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{payload => F@_1}
    end.

d_field_auth_interact_response_error_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_auth_interact_response_error_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_auth_interact_response_error_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_error_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_auth_interact_response(RestF,
                                              0,
                                              0,
                                              F,
                                              case Prev of
                                                  '$undef' -> id({error_frame, NewFValue}, TrUserData);
                                                  {error_frame, MVPrev} -> id({error_frame, merge_msg_error_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                  _ -> id({error_frame, NewFValue}, TrUserData)
                                              end,
                                              TrUserData).

d_field_auth_interact_response_info_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_auth_interact_response_info_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_auth_interact_response_info_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_info_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_auth_interact_response(RestF,
                                              0,
                                              0,
                                              F,
                                              case Prev of
                                                  '$undef' -> id({info_frame, NewFValue}, TrUserData);
                                                  {info_frame, MVPrev} -> id({info_frame, merge_msg_info_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                  _ -> id({info_frame, NewFValue}, TrUserData)
                                              end,
                                              TrUserData).

d_field_auth_interact_response_endpoint_list_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_auth_interact_response_endpoint_list_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_auth_interact_response_endpoint_list_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_endpoint_list_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_auth_interact_response(RestF,
                                              0,
                                              0,
                                              F,
                                              case Prev of
                                                  '$undef' -> id({endpoint_list_frame, NewFValue}, TrUserData);
                                                  {endpoint_list_frame, MVPrev} -> id({endpoint_list_frame, merge_msg_endpoint_list_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                  _ -> id({endpoint_list_frame, NewFValue}, TrUserData)
                                              end,
                                              TrUserData).

skip_varint_auth_interact_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_auth_interact_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_auth_interact_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_interact_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_auth_interact_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_auth_interact_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_auth_interact_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_interact_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_auth_interact_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_interact_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_auth_interact_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_interact_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_auth_interact_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_interact_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_auth_watch_request(Bin, TrUserData) -> dfp_read_field_def_auth_watch_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_auth_watch_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_auth_watch_request_identifier(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_auth_watch_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_auth_watch_request_password(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_auth_watch_request(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_auth_watch_request_client_version(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_auth_watch_request(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_auth_watch_request_client_checksum(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_auth_watch_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{identifier => F@_1, password => F@_2, client_version => F@_3, client_checksum => F@_4};
dfp_read_field_def_auth_watch_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_auth_watch_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_auth_watch_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_watch_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_auth_watch_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_auth_watch_request_identifier(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_auth_watch_request_password(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_auth_watch_request_client_version(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_auth_watch_request_client_checksum(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_watch_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_auth_watch_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_auth_watch_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_auth_watch_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_auth_watch_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_auth_watch_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{identifier => F@_1, password => F@_2, client_version => F@_3, client_checksum => F@_4}.

d_field_auth_watch_request_identifier(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_auth_watch_request_identifier(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_auth_watch_request_identifier(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_watch_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_auth_watch_request_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_auth_watch_request_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_auth_watch_request_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_watch_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_auth_watch_request_client_version(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_auth_watch_request_client_version(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_auth_watch_request_client_version(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_watch_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_auth_watch_request_client_checksum(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_auth_watch_request_client_checksum(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_auth_watch_request_client_checksum(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_watch_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_auth_watch_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_auth_watch_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_auth_watch_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_auth_watch_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_auth_watch_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_auth_watch_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_auth_watch_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_watch_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_auth_watch_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_watch_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_auth_watch_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_auth_watch_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_auth_watch_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_auth_watch_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_sync_frame(Bin, TrUserData) -> dfp_read_field_def_sync_frame(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_sync_frame(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_sync_frame_sequence(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_sync_frame(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_sync_frame_code(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_sync_frame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{sequence => F@_1, code => F@_2};
dfp_read_field_def_sync_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_sync_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_sync_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_sync_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_sync_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_sync_frame_sequence(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_sync_frame_code(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_sync_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_sync_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_sync_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_sync_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_sync_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_sync_frame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{sequence => F@_1, code => F@_2}.

d_field_sync_frame_sequence(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_sync_frame_sequence(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_sync_frame_sequence(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_sync_frame(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_sync_frame_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_sync_frame_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_sync_frame_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_sync_frame(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_sync_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_sync_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_sync_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_sync_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_sync_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_sync_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_sync_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sync_frame(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_sync_frame(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sync_frame(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_sync_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_sync_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_sync_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_sync_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_identifier_frame(Bin, TrUserData) -> dfp_read_field_def_identifier_frame(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_identifier_frame(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_identifier_frame_sequence(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_identifier_frame(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_identifier_frame_identifier(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_identifier_frame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{sequence => F@_1, identifier => F@_2};
dfp_read_field_def_identifier_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_identifier_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_identifier_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_identifier_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_identifier_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_identifier_frame_sequence(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_identifier_frame_identifier(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_identifier_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_identifier_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_identifier_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_identifier_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_identifier_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_identifier_frame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{sequence => F@_1, identifier => F@_2}.

d_field_identifier_frame_sequence(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_identifier_frame_sequence(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_identifier_frame_sequence(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_identifier_frame(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_identifier_frame_identifier(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_identifier_frame_identifier(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_identifier_frame_identifier(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_identifier_frame(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_identifier_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_identifier_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_identifier_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_identifier_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_identifier_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_identifier_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_identifier_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_identifier_frame(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_identifier_frame(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_identifier_frame(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_identifier_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_identifier_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_identifier_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_identifier_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_password_frame(Bin, TrUserData) -> dfp_read_field_def_password_frame(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_password_frame(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_password_frame_sequence(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_password_frame(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_password_frame_password(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_password_frame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{sequence => F@_1, password => F@_2};
dfp_read_field_def_password_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_password_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_password_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_password_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_password_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_password_frame_sequence(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_password_frame_password(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_password_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_password_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_password_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_password_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_password_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_password_frame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{sequence => F@_1, password => F@_2}.

d_field_password_frame_sequence(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_password_frame_sequence(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_password_frame_sequence(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_password_frame(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_password_frame_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_password_frame_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_password_frame_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_password_frame(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_password_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_password_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_password_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_password_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_password_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_password_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_password_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_password_frame(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_password_frame(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_password_frame(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_password_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_password_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_password_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_password_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_heartbeat_frame(Bin, TrUserData) -> dfp_read_field_def_heartbeat_frame(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_heartbeat_frame(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_heartbeat_frame(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_heartbeat_frame(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_heartbeat_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_heartbeat_frame(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_heartbeat_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_heartbeat_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_heartbeat_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_heartbeat_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_heartbeat_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_heartbeat_frame(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_heartbeat_frame(<<>>, 0, 0, _, _) -> #{}.

skip_varint_heartbeat_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_heartbeat_frame(Rest, Z1, Z2, F, TrUserData);
skip_varint_heartbeat_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_heartbeat_frame(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_heartbeat_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_heartbeat_frame(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_heartbeat_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_heartbeat_frame(Rest2, 0, 0, F, TrUserData).

skip_group_heartbeat_frame(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_heartbeat_frame(Rest, 0, Z2, FNum, TrUserData).

skip_32_heartbeat_frame(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_heartbeat_frame(Rest, Z1, Z2, F, TrUserData).

skip_64_heartbeat_frame(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_heartbeat_frame(Rest, Z1, Z2, F, TrUserData).

decode_msg_f_stash_end_frame(Bin, TrUserData) -> dfp_read_field_def_f_stash_end_frame(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_f_stash_end_frame(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_f_stash_end_frame(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_f_stash_end_frame(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_f_stash_end_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_f_stash_end_frame(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_f_stash_end_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_f_stash_end_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_f_stash_end_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_f_stash_end_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_f_stash_end_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_f_stash_end_frame(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_f_stash_end_frame(<<>>, 0, 0, _, _) -> #{}.

skip_varint_f_stash_end_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_f_stash_end_frame(Rest, Z1, Z2, F, TrUserData);
skip_varint_f_stash_end_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_f_stash_end_frame(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_f_stash_end_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_f_stash_end_frame(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_f_stash_end_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_f_stash_end_frame(Rest2, 0, 0, F, TrUserData).

skip_group_f_stash_end_frame(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_f_stash_end_frame(Rest, 0, Z2, FNum, TrUserData).

skip_32_f_stash_end_frame(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_f_stash_end_frame(Rest, Z1, Z2, F, TrUserData).

skip_64_f_stash_end_frame(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_f_stash_end_frame(Rest, Z1, Z2, F, TrUserData).

decode_msg_c_close_frame(Bin, TrUserData) -> dfp_read_field_def_c_close_frame(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_c_close_frame(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_c_close_frame(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_c_close_frame(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_c_close_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_c_close_frame(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_c_close_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_c_close_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_c_close_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_c_close_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_c_close_frame(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_c_close_frame(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_c_close_frame(<<>>, 0, 0, _, _) -> #{}.

skip_varint_c_close_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_c_close_frame(Rest, Z1, Z2, F, TrUserData);
skip_varint_c_close_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_c_close_frame(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_c_close_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_c_close_frame(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_c_close_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c_close_frame(Rest2, 0, 0, F, TrUserData).

skip_group_c_close_frame(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c_close_frame(Rest, 0, Z2, FNum, TrUserData).

skip_32_c_close_frame(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_c_close_frame(Rest, Z1, Z2, F, TrUserData).

skip_64_c_close_frame(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_c_close_frame(Rest, Z1, Z2, F, TrUserData).

decode_msg_lbs_frame(Bin, TrUserData) -> dfp_read_field_def_lbs_frame(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_lbs_frame(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_lbs_frame_type(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_lbs_frame(<<>>, 0, 0, _, F@_1, _) -> #{type => F@_1};
dfp_read_field_def_lbs_frame(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_lbs_frame(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_lbs_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_lbs_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_lbs_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_lbs_frame_type(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_lbs_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_lbs_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_lbs_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_lbs_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_lbs_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_lbs_frame(<<>>, 0, 0, _, F@_1, _) -> #{type => F@_1}.

d_field_lbs_frame_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_lbs_frame_type(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_lbs_frame_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_lbs_frame(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_lbs_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_lbs_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_lbs_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_lbs_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_lbs_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_lbs_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_lbs_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_lbs_frame(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_lbs_frame(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_lbs_frame(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_lbs_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_lbs_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_lbs_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_lbs_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_multi_target_frame(Bin, TrUserData) -> dfp_read_field_def_multi_target_frame(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_multi_target_frame(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_multi_target_frame_skill_id(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_multi_target_frame(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_multi_target_frame_target_id(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_multi_target_frame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{skill_id => F@_1, target_id => F@_2};
dfp_read_field_def_multi_target_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_multi_target_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_multi_target_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_multi_target_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_multi_target_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_multi_target_frame_skill_id(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_multi_target_frame_target_id(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_multi_target_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_multi_target_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_multi_target_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_multi_target_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_multi_target_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_multi_target_frame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{skill_id => F@_1, target_id => F@_2}.

d_field_multi_target_frame_skill_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_multi_target_frame_skill_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_multi_target_frame_skill_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_multi_target_frame(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_multi_target_frame_target_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_multi_target_frame_target_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_multi_target_frame_target_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_multi_target_frame(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_multi_target_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_multi_target_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_multi_target_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_multi_target_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_multi_target_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_multi_target_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_multi_target_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_multi_target_frame(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_multi_target_frame(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_multi_target_frame(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_multi_target_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_multi_target_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_multi_target_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_multi_target_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_multi_target_list_frame(Bin, TrUserData) -> dfp_read_field_def_multi_target_list_frame(Bin, 0, 0, 0, id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_multi_target_list_frame(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_multi_target_list_frame_target_amount(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_multi_target_list_frame(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_multi_target_list_frame_targets(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_multi_target_list_frame(<<>>, 0, 0, _, F@_1, R1, TrUserData) ->
    S1 = #{target_amount => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{targets => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_multi_target_list_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_multi_target_list_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_multi_target_list_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_multi_target_list_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_multi_target_list_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_multi_target_list_frame_target_amount(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_multi_target_list_frame_targets(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_multi_target_list_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_multi_target_list_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_multi_target_list_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_multi_target_list_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_multi_target_list_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_multi_target_list_frame(<<>>, 0, 0, _, F@_1, R1, TrUserData) ->
    S1 = #{target_amount => F@_1},
    if R1 == '$undef' -> S1;
       true -> S1#{targets => lists_reverse(R1, TrUserData)}
    end.

d_field_multi_target_list_frame_target_amount(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_multi_target_list_frame_target_amount(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_multi_target_list_frame_target_amount(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_multi_target_list_frame(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_multi_target_list_frame_targets(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_multi_target_list_frame_targets(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_multi_target_list_frame_targets(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_multi_target_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_multi_target_list_frame(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_multi_target_list_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_multi_target_list_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_multi_target_list_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_multi_target_list_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_multi_target_list_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_multi_target_list_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_multi_target_list_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_multi_target_list_frame(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_multi_target_list_frame(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_multi_target_list_frame(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_multi_target_list_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_multi_target_list_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_multi_target_list_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_multi_target_list_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_request_frame(Bin, TrUserData) -> dfp_read_field_def_request_frame(Bin, 0, 0, 0, id(0, TrUserData), id('REQUESTED', TrUserData), TrUserData).

dfp_read_field_def_request_frame(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_request_frame_character_id(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_request_frame(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_request_frame_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_request_frame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{character_id => F@_1, type => F@_2};
dfp_read_field_def_request_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_request_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_request_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_request_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_request_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_request_frame_character_id(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_request_frame_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_request_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_request_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_request_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_request_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_request_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_request_frame(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{character_id => F@_1, type => F@_2}.

d_field_request_frame_character_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_request_frame_character_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_request_frame_character_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_request_frame(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_request_frame_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_request_frame_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_request_frame_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.eventing.v1alpha1.RequestType'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_request_frame(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_request_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_request_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_request_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_request_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_request_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_request_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_request_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_request_frame(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_request_frame(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_request_frame(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_request_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_request_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_request_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_request_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_global_options_frame(Bin, TrUserData) -> dfp_read_field_def_global_options_frame(Bin, 0, 0, 0, id('EXCHANGE_BLOCKED', TrUserData), TrUserData).

dfp_read_field_def_global_options_frame(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_global_options_frame_option(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_global_options_frame(<<>>, 0, 0, _, F@_1, _) -> #{option => F@_1};
dfp_read_field_def_global_options_frame(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_global_options_frame(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_global_options_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_global_options_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_global_options_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_global_options_frame_option(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_global_options_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_global_options_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_global_options_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_global_options_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_global_options_frame(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_global_options_frame(<<>>, 0, 0, _, F@_1, _) -> #{option => F@_1}.

d_field_global_options_frame_option(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_global_options_frame_option(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_global_options_frame_option(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_global_options_frame(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_global_options_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_global_options_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_global_options_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_global_options_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_global_options_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_global_options_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_global_options_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_global_options_frame(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_global_options_frame(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_global_options_frame(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_global_options_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_global_options_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_global_options_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_global_options_frame(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_command_frame(Bin, TrUserData) -> dfp_read_field_def_command_frame(Bin, 0, 0, 0, id(0, TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_command_frame(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_command_frame_sequence(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_command_frame(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_command_frame_raw_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_command_frame(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_command_frame_heartbeat_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_command_frame(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_command_frame_f_stash_end_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_command_frame(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_command_frame_c_close_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_command_frame(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_command_frame_lbs_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_command_frame(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_command_frame_multi_target_list_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_command_frame(<<66, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_command_frame_request_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_command_frame(<<74, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_command_frame_global_options_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_command_frame(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{sequence => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{payload => F@_2}
    end;
dfp_read_field_def_command_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_command_frame(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_command_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_command_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_command_frame(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_command_frame_sequence(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_command_frame_raw_frame(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        26 -> d_field_command_frame_heartbeat_frame(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        34 -> d_field_command_frame_f_stash_end_frame(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        42 -> d_field_command_frame_c_close_frame(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        50 -> d_field_command_frame_lbs_frame(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        58 -> d_field_command_frame_multi_target_list_frame(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        66 -> d_field_command_frame_request_frame(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        74 -> d_field_command_frame_global_options_frame(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_command_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_command_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_command_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_command_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_command_frame(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_command_frame(<<>>, 0, 0, _, F@_1, F@_2, _) ->
    S1 = #{sequence => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{payload => F@_2}
    end.

d_field_command_frame_sequence(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_command_frame_sequence(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_command_frame_sequence(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_command_frame(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_command_frame_raw_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_command_frame_raw_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_command_frame_raw_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_command_frame(RestF, 0, 0, F, F@_1, id({raw_frame, NewFValue}, TrUserData), TrUserData).

d_field_command_frame_heartbeat_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_command_frame_heartbeat_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_command_frame_heartbeat_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_heartbeat_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_command_frame(RestF,
                                     0,
                                     0,
                                     F,
                                     F@_1,
                                     case Prev of
                                         '$undef' -> id({heartbeat_frame, NewFValue}, TrUserData);
                                         {heartbeat_frame, MVPrev} -> id({heartbeat_frame, merge_msg_heartbeat_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                         _ -> id({heartbeat_frame, NewFValue}, TrUserData)
                                     end,
                                     TrUserData).

d_field_command_frame_f_stash_end_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_command_frame_f_stash_end_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_command_frame_f_stash_end_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_f_stash_end_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_command_frame(RestF,
                                     0,
                                     0,
                                     F,
                                     F@_1,
                                     case Prev of
                                         '$undef' -> id({f_stash_end_frame, NewFValue}, TrUserData);
                                         {f_stash_end_frame, MVPrev} -> id({f_stash_end_frame, merge_msg_f_stash_end_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                         _ -> id({f_stash_end_frame, NewFValue}, TrUserData)
                                     end,
                                     TrUserData).

d_field_command_frame_c_close_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_command_frame_c_close_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_command_frame_c_close_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_c_close_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_command_frame(RestF,
                                     0,
                                     0,
                                     F,
                                     F@_1,
                                     case Prev of
                                         '$undef' -> id({c_close_frame, NewFValue}, TrUserData);
                                         {c_close_frame, MVPrev} -> id({c_close_frame, merge_msg_c_close_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                         _ -> id({c_close_frame, NewFValue}, TrUserData)
                                     end,
                                     TrUserData).

d_field_command_frame_lbs_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_command_frame_lbs_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_command_frame_lbs_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_lbs_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_command_frame(RestF,
                                     0,
                                     0,
                                     F,
                                     F@_1,
                                     case Prev of
                                         '$undef' -> id({lbs_frame, NewFValue}, TrUserData);
                                         {lbs_frame, MVPrev} -> id({lbs_frame, merge_msg_lbs_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                         _ -> id({lbs_frame, NewFValue}, TrUserData)
                                     end,
                                     TrUserData).

d_field_command_frame_multi_target_list_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_command_frame_multi_target_list_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_command_frame_multi_target_list_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_multi_target_list_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_command_frame(RestF,
                                     0,
                                     0,
                                     F,
                                     F@_1,
                                     case Prev of
                                         '$undef' -> id({multi_target_list_frame, NewFValue}, TrUserData);
                                         {multi_target_list_frame, MVPrev} -> id({multi_target_list_frame, merge_msg_multi_target_list_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                         _ -> id({multi_target_list_frame, NewFValue}, TrUserData)
                                     end,
                                     TrUserData).

d_field_command_frame_request_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_command_frame_request_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_command_frame_request_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_request_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_command_frame(RestF,
                                     0,
                                     0,
                                     F,
                                     F@_1,
                                     case Prev of
                                         '$undef' -> id({request_frame, NewFValue}, TrUserData);
                                         {request_frame, MVPrev} -> id({request_frame, merge_msg_request_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                         _ -> id({request_frame, NewFValue}, TrUserData)
                                     end,
                                     TrUserData).

d_field_command_frame_global_options_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_command_frame_global_options_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_command_frame_global_options_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_global_options_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_command_frame(RestF,
                                     0,
                                     0,
                                     F,
                                     F@_1,
                                     case Prev of
                                         '$undef' -> id({global_options_frame, NewFValue}, TrUserData);
                                         {global_options_frame, MVPrev} -> id({global_options_frame, merge_msg_global_options_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                         _ -> id({global_options_frame, NewFValue}, TrUserData)
                                     end,
                                     TrUserData).

skip_varint_command_frame(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_command_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_command_frame(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_command_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_command_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_command_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_command_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_command_frame(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_command_frame(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_command_frame(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_command_frame(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_command_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_command_frame(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_command_frame(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_channel_interact_request(Bin, TrUserData) -> dfp_read_field_def_channel_interact_request(Bin, 0, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_channel_interact_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_channel_interact_request_sync_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_channel_interact_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_channel_interact_request_identifier_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_channel_interact_request(<<26, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_channel_interact_request_password_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_channel_interact_request(<<42, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_channel_interact_request_command_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_channel_interact_request(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{payload => F@_1}
    end;
dfp_read_field_def_channel_interact_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_channel_interact_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_channel_interact_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_channel_interact_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_channel_interact_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_channel_interact_request_sync_frame(Rest, 0, 0, 0, F@_1, TrUserData);
        18 -> d_field_channel_interact_request_identifier_frame(Rest, 0, 0, 0, F@_1, TrUserData);
        26 -> d_field_channel_interact_request_password_frame(Rest, 0, 0, 0, F@_1, TrUserData);
        42 -> d_field_channel_interact_request_command_frame(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_channel_interact_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_channel_interact_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_channel_interact_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_channel_interact_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_channel_interact_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_channel_interact_request(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{payload => F@_1}
    end.

d_field_channel_interact_request_sync_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_channel_interact_request_sync_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_channel_interact_request_sync_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_sync_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_channel_interact_request(RestF,
                                                0,
                                                0,
                                                F,
                                                case Prev of
                                                    '$undef' -> id({sync_frame, NewFValue}, TrUserData);
                                                    {sync_frame, MVPrev} -> id({sync_frame, merge_msg_sync_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                    _ -> id({sync_frame, NewFValue}, TrUserData)
                                                end,
                                                TrUserData).

d_field_channel_interact_request_identifier_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_channel_interact_request_identifier_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_channel_interact_request_identifier_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_identifier_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_channel_interact_request(RestF,
                                                0,
                                                0,
                                                F,
                                                case Prev of
                                                    '$undef' -> id({identifier_frame, NewFValue}, TrUserData);
                                                    {identifier_frame, MVPrev} -> id({identifier_frame, merge_msg_identifier_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                    _ -> id({identifier_frame, NewFValue}, TrUserData)
                                                end,
                                                TrUserData).

d_field_channel_interact_request_password_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_channel_interact_request_password_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_channel_interact_request_password_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_password_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_channel_interact_request(RestF,
                                                0,
                                                0,
                                                F,
                                                case Prev of
                                                    '$undef' -> id({password_frame, NewFValue}, TrUserData);
                                                    {password_frame, MVPrev} -> id({password_frame, merge_msg_password_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                    _ -> id({password_frame, NewFValue}, TrUserData)
                                                end,
                                                TrUserData).

d_field_channel_interact_request_command_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_channel_interact_request_command_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_channel_interact_request_command_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_command_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_channel_interact_request(RestF,
                                                0,
                                                0,
                                                F,
                                                case Prev of
                                                    '$undef' -> id({command_frame, NewFValue}, TrUserData);
                                                    {command_frame, MVPrev} -> id({command_frame, merge_msg_command_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                    _ -> id({command_frame, NewFValue}, TrUserData)
                                                end,
                                                TrUserData).

skip_varint_channel_interact_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_channel_interact_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_channel_interact_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_channel_interact_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_channel_interact_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_channel_interact_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_channel_interact_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_channel_interact_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_channel_interact_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_channel_interact_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_channel_interact_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_channel_interact_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_channel_interact_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_channel_interact_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_channel_interact_response(Bin, TrUserData) -> dfp_read_field_def_channel_interact_response(Bin, 0, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_channel_interact_response(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_channel_interact_response_error_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_channel_interact_response(<<18, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_channel_interact_response_info_frame(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_channel_interact_response(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{payload => F@_1}
    end;
dfp_read_field_def_channel_interact_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_channel_interact_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_channel_interact_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_channel_interact_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_channel_interact_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_channel_interact_response_error_frame(Rest, 0, 0, 0, F@_1, TrUserData);
        18 -> d_field_channel_interact_response_info_frame(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_channel_interact_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_channel_interact_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_channel_interact_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_channel_interact_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_channel_interact_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_channel_interact_response(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{payload => F@_1}
    end.

d_field_channel_interact_response_error_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_channel_interact_response_error_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_channel_interact_response_error_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_error_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_channel_interact_response(RestF,
                                                 0,
                                                 0,
                                                 F,
                                                 case Prev of
                                                     '$undef' -> id({error_frame, NewFValue}, TrUserData);
                                                     {error_frame, MVPrev} -> id({error_frame, merge_msg_error_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                     _ -> id({error_frame, NewFValue}, TrUserData)
                                                 end,
                                                 TrUserData).

d_field_channel_interact_response_info_frame(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_channel_interact_response_info_frame(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_channel_interact_response_info_frame(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_info_frame(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_channel_interact_response(RestF,
                                                 0,
                                                 0,
                                                 F,
                                                 case Prev of
                                                     '$undef' -> id({info_frame, NewFValue}, TrUserData);
                                                     {info_frame, MVPrev} -> id({info_frame, merge_msg_info_frame(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                                     _ -> id({info_frame, NewFValue}, TrUserData)
                                                 end,
                                                 TrUserData).

skip_varint_channel_interact_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_channel_interact_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_channel_interact_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_channel_interact_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_channel_interact_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_channel_interact_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_channel_interact_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_channel_interact_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_channel_interact_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_channel_interact_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_channel_interact_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_channel_interact_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_channel_interact_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_channel_interact_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_channel_watch_request(Bin, TrUserData) -> dfp_read_field_def_channel_watch_request(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_channel_watch_request(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_channel_watch_request_sequence(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_channel_watch_request(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_channel_watch_request_code(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_channel_watch_request(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_channel_watch_request_identifier(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_channel_watch_request(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_channel_watch_request_password(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_channel_watch_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{sequence => F@_1, code => F@_2, identifier => F@_3, password => F@_4};
dfp_read_field_def_channel_watch_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_channel_watch_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_channel_watch_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_channel_watch_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_channel_watch_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_channel_watch_request_sequence(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_channel_watch_request_code(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_channel_watch_request_identifier(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_channel_watch_request_password(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_channel_watch_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_channel_watch_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_channel_watch_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_channel_watch_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_channel_watch_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_channel_watch_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{sequence => F@_1, code => F@_2, identifier => F@_3, password => F@_4}.

d_field_channel_watch_request_sequence(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_channel_watch_request_sequence(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_channel_watch_request_sequence(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_channel_watch_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_channel_watch_request_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_channel_watch_request_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_channel_watch_request_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_channel_watch_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_channel_watch_request_identifier(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_channel_watch_request_identifier(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_channel_watch_request_identifier(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_channel_watch_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_channel_watch_request_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_channel_watch_request_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_channel_watch_request_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_channel_watch_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_channel_watch_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_channel_watch_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_channel_watch_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_channel_watch_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_channel_watch_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_channel_watch_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_channel_watch_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_channel_watch_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_channel_watch_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_channel_watch_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_channel_watch_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_channel_watch_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_channel_watch_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_channel_watch_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'd_enum_io.elkia.eventing.v1alpha1.Code'(0) -> 'OUTDATED_CLIENT';
'd_enum_io.elkia.eventing.v1alpha1.Code'(1) -> 'UNEXPECTED_ERROR';
'd_enum_io.elkia.eventing.v1alpha1.Code'(2) -> 'MAINTENANCE';
'd_enum_io.elkia.eventing.v1alpha1.Code'(3) -> 'SESSION_ALREADY_USED';
'd_enum_io.elkia.eventing.v1alpha1.Code'(4) -> 'UNVALID_CREDENTIALS';
'd_enum_io.elkia.eventing.v1alpha1.Code'(5) -> 'CANT_AUTHENTICATE';
'd_enum_io.elkia.eventing.v1alpha1.Code'(6) -> 'USER_BLOCKLISTED';
'd_enum_io.elkia.eventing.v1alpha1.Code'(7) -> 'COUNTRY_BLACKLISTED';
'd_enum_io.elkia.eventing.v1alpha1.Code'(8) -> 'BAD_CASE';
'd_enum_io.elkia.eventing.v1alpha1.Code'(V) -> V.

'd_enum_io.elkia.eventing.v1alpha1.RequestType'(0) -> 'REQUESTED';
'd_enum_io.elkia.eventing.v1alpha1.RequestType'(1) -> 'LIST';
'd_enum_io.elkia.eventing.v1alpha1.RequestType'(2) -> 'CONFIRMED';
'd_enum_io.elkia.eventing.v1alpha1.RequestType'(3) -> 'CANCELLED';
'd_enum_io.elkia.eventing.v1alpha1.RequestType'(4) -> 'DECLINED';
'd_enum_io.elkia.eventing.v1alpha1.RequestType'(V) -> V.

'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(0) -> 'EXCHANGE_BLOCKED';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(1) -> 'FRIEND_REQUEST_BLOCKED';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(2) -> 'FAMILY_REQUEST_BLOCKED';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(3) -> 'WHISPER_BLOCKED';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(4) -> 'GROUP_REQUEST_BLOCKED';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(5) -> 'GROUP_SHARING';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(6) -> 'MOUSE_AIM_LOCK';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(7) -> 'HERO_CHAT_BLOCKED';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(8) -> 'EMOTICONS_BLOCKED';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(9) -> 'QUICK_GET_UP';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(10) -> 'HP_BLOCKED';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(11) -> 'BUFF_BLOCKED';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(12) -> 'MINILAND_INVITE_BLOCKED';
'd_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        error_frame -> merge_msg_error_frame(Prev, New, TrUserData);
        info_frame -> merge_msg_info_frame(Prev, New, TrUserData);
        login_frame -> merge_msg_login_frame(Prev, New, TrUserData);
        endpoint_frame -> merge_msg_endpoint_frame(Prev, New, TrUserData);
        endpoint_list_frame -> merge_msg_endpoint_list_frame(Prev, New, TrUserData);
        auth_interact_request -> merge_msg_auth_interact_request(Prev, New, TrUserData);
        auth_interact_response -> merge_msg_auth_interact_response(Prev, New, TrUserData);
        auth_watch_request -> merge_msg_auth_watch_request(Prev, New, TrUserData);
        sync_frame -> merge_msg_sync_frame(Prev, New, TrUserData);
        identifier_frame -> merge_msg_identifier_frame(Prev, New, TrUserData);
        password_frame -> merge_msg_password_frame(Prev, New, TrUserData);
        heartbeat_frame -> merge_msg_heartbeat_frame(Prev, New, TrUserData);
        f_stash_end_frame -> merge_msg_f_stash_end_frame(Prev, New, TrUserData);
        c_close_frame -> merge_msg_c_close_frame(Prev, New, TrUserData);
        lbs_frame -> merge_msg_lbs_frame(Prev, New, TrUserData);
        multi_target_frame -> merge_msg_multi_target_frame(Prev, New, TrUserData);
        multi_target_list_frame -> merge_msg_multi_target_list_frame(Prev, New, TrUserData);
        request_frame -> merge_msg_request_frame(Prev, New, TrUserData);
        global_options_frame -> merge_msg_global_options_frame(Prev, New, TrUserData);
        command_frame -> merge_msg_command_frame(Prev, New, TrUserData);
        channel_interact_request -> merge_msg_channel_interact_request(Prev, New, TrUserData);
        channel_interact_response -> merge_msg_channel_interact_response(Prev, New, TrUserData);
        channel_watch_request -> merge_msg_channel_watch_request(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_error_frame/3}).
merge_msg_error_frame(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{code := NFcode}} -> S1#{code => NFcode};
        {#{code := PFcode}, _} -> S1#{code => PFcode};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_info_frame/3}).
merge_msg_info_frame(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{content := NFcontent}} -> S1#{content => NFcontent};
        {#{content := PFcontent}, _} -> S1#{content => PFcontent};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_login_frame/3}).
merge_msg_login_frame(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{identifier := NFidentifier}} -> S1#{identifier => NFidentifier};
             {#{identifier := PFidentifier}, _} -> S1#{identifier => PFidentifier};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{password := NFpassword}} -> S2#{password => NFpassword};
             {#{password := PFpassword}, _} -> S2#{password => PFpassword};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{client_version := NFclient_version}} -> S3#{client_version => NFclient_version};
             {#{client_version := PFclient_version}, _} -> S3#{client_version => PFclient_version};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{client_checksum := NFclient_checksum}} -> S4#{client_checksum => NFclient_checksum};
        {#{client_checksum := PFclient_checksum}, _} -> S4#{client_checksum => PFclient_checksum};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_endpoint_frame/3}).
merge_msg_endpoint_frame(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{host := NFhost}} -> S1#{host => NFhost};
             {#{host := PFhost}, _} -> S1#{host => PFhost};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{port := NFport}} -> S2#{port => NFport};
             {#{port := PFport}, _} -> S2#{port => PFport};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{weight := NFweight}} -> S3#{weight => NFweight};
             {#{weight := PFweight}, _} -> S3#{weight => PFweight};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{world_id := NFworld_id}} -> S4#{world_id => NFworld_id};
             {#{world_id := PFworld_id}, _} -> S4#{world_id => PFworld_id};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{channel_id := NFchannel_id}} -> S5#{channel_id => NFchannel_id};
             {#{channel_id := PFchannel_id}, _} -> S5#{channel_id => PFchannel_id};
             _ -> S5
         end,
    case {PMsg, NMsg} of
        {_, #{world_name := NFworld_name}} -> S6#{world_name => NFworld_name};
        {#{world_name := PFworld_name}, _} -> S6#{world_name => PFworld_name};
        _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_endpoint_list_frame/3}).
merge_msg_endpoint_list_frame(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{code := NFcode}} -> S1#{code => NFcode};
             {#{code := PFcode}, _} -> S1#{code => PFcode};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{endpoint_frames := PFendpoint_frames}, #{endpoint_frames := NFendpoint_frames}} -> S2#{endpoint_frames => 'erlang_++'(PFendpoint_frames, NFendpoint_frames, TrUserData)};
        {_, #{endpoint_frames := NFendpoint_frames}} -> S2#{endpoint_frames => NFendpoint_frames};
        {#{endpoint_frames := PFendpoint_frames}, _} -> S2#{endpoint_frames => PFendpoint_frames};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_auth_interact_request/3}).
merge_msg_auth_interact_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{payload := {login_frame, OPFpayload}}, #{payload := {login_frame, ONFpayload}}} -> S1#{payload => {login_frame, merge_msg_login_frame(OPFpayload, ONFpayload, TrUserData)}};
        {_, #{payload := NFpayload}} -> S1#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S1#{payload => PFpayload};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_auth_interact_response/3}).
merge_msg_auth_interact_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{payload := {error_frame, OPFpayload}}, #{payload := {error_frame, ONFpayload}}} -> S1#{payload => {error_frame, merge_msg_error_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {info_frame, OPFpayload}}, #{payload := {info_frame, ONFpayload}}} -> S1#{payload => {info_frame, merge_msg_info_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {endpoint_list_frame, OPFpayload}}, #{payload := {endpoint_list_frame, ONFpayload}}} -> S1#{payload => {endpoint_list_frame, merge_msg_endpoint_list_frame(OPFpayload, ONFpayload, TrUserData)}};
        {_, #{payload := NFpayload}} -> S1#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S1#{payload => PFpayload};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_auth_watch_request/3}).
merge_msg_auth_watch_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{identifier := NFidentifier}} -> S1#{identifier => NFidentifier};
             {#{identifier := PFidentifier}, _} -> S1#{identifier => PFidentifier};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{password := NFpassword}} -> S2#{password => NFpassword};
             {#{password := PFpassword}, _} -> S2#{password => PFpassword};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{client_version := NFclient_version}} -> S3#{client_version => NFclient_version};
             {#{client_version := PFclient_version}, _} -> S3#{client_version => PFclient_version};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{client_checksum := NFclient_checksum}} -> S4#{client_checksum => NFclient_checksum};
        {#{client_checksum := PFclient_checksum}, _} -> S4#{client_checksum => PFclient_checksum};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_sync_frame/3}).
merge_msg_sync_frame(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{sequence := NFsequence}} -> S1#{sequence => NFsequence};
             {#{sequence := PFsequence}, _} -> S1#{sequence => PFsequence};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{code := NFcode}} -> S2#{code => NFcode};
        {#{code := PFcode}, _} -> S2#{code => PFcode};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_identifier_frame/3}).
merge_msg_identifier_frame(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{sequence := NFsequence}} -> S1#{sequence => NFsequence};
             {#{sequence := PFsequence}, _} -> S1#{sequence => PFsequence};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{identifier := NFidentifier}} -> S2#{identifier => NFidentifier};
        {#{identifier := PFidentifier}, _} -> S2#{identifier => PFidentifier};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_password_frame/3}).
merge_msg_password_frame(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{sequence := NFsequence}} -> S1#{sequence => NFsequence};
             {#{sequence := PFsequence}, _} -> S1#{sequence => PFsequence};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{password := NFpassword}} -> S2#{password => NFpassword};
        {#{password := PFpassword}, _} -> S2#{password => PFpassword};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_heartbeat_frame/3}).
merge_msg_heartbeat_frame(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_f_stash_end_frame/3}).
merge_msg_f_stash_end_frame(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_c_close_frame/3}).
merge_msg_c_close_frame(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_lbs_frame/3}).
merge_msg_lbs_frame(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{type := NFtype}} -> S1#{type => NFtype};
        {#{type := PFtype}, _} -> S1#{type => PFtype};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_multi_target_frame/3}).
merge_msg_multi_target_frame(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{skill_id := NFskill_id}} -> S1#{skill_id => NFskill_id};
             {#{skill_id := PFskill_id}, _} -> S1#{skill_id => PFskill_id};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{target_id := NFtarget_id}} -> S2#{target_id => NFtarget_id};
        {#{target_id := PFtarget_id}, _} -> S2#{target_id => PFtarget_id};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_multi_target_list_frame/3}).
merge_msg_multi_target_list_frame(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{target_amount := NFtarget_amount}} -> S1#{target_amount => NFtarget_amount};
             {#{target_amount := PFtarget_amount}, _} -> S1#{target_amount => PFtarget_amount};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{targets := PFtargets}, #{targets := NFtargets}} -> S2#{targets => 'erlang_++'(PFtargets, NFtargets, TrUserData)};
        {_, #{targets := NFtargets}} -> S2#{targets => NFtargets};
        {#{targets := PFtargets}, _} -> S2#{targets => PFtargets};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_request_frame/3}).
merge_msg_request_frame(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{character_id := NFcharacter_id}} -> S1#{character_id => NFcharacter_id};
             {#{character_id := PFcharacter_id}, _} -> S1#{character_id => PFcharacter_id};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{type := NFtype}} -> S2#{type => NFtype};
        {#{type := PFtype}, _} -> S2#{type => PFtype};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_global_options_frame/3}).
merge_msg_global_options_frame(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{option := NFoption}} -> S1#{option => NFoption};
        {#{option := PFoption}, _} -> S1#{option => PFoption};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_command_frame/3}).
merge_msg_command_frame(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{sequence := NFsequence}} -> S1#{sequence => NFsequence};
             {#{sequence := PFsequence}, _} -> S1#{sequence => PFsequence};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{payload := {heartbeat_frame, OPFpayload}}, #{payload := {heartbeat_frame, ONFpayload}}} -> S2#{payload => {heartbeat_frame, merge_msg_heartbeat_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {f_stash_end_frame, OPFpayload}}, #{payload := {f_stash_end_frame, ONFpayload}}} -> S2#{payload => {f_stash_end_frame, merge_msg_f_stash_end_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {c_close_frame, OPFpayload}}, #{payload := {c_close_frame, ONFpayload}}} -> S2#{payload => {c_close_frame, merge_msg_c_close_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {lbs_frame, OPFpayload}}, #{payload := {lbs_frame, ONFpayload}}} -> S2#{payload => {lbs_frame, merge_msg_lbs_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {multi_target_list_frame, OPFpayload}}, #{payload := {multi_target_list_frame, ONFpayload}}} -> S2#{payload => {multi_target_list_frame, merge_msg_multi_target_list_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {request_frame, OPFpayload}}, #{payload := {request_frame, ONFpayload}}} -> S2#{payload => {request_frame, merge_msg_request_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {global_options_frame, OPFpayload}}, #{payload := {global_options_frame, ONFpayload}}} -> S2#{payload => {global_options_frame, merge_msg_global_options_frame(OPFpayload, ONFpayload, TrUserData)}};
        {_, #{payload := NFpayload}} -> S2#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S2#{payload => PFpayload};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_channel_interact_request/3}).
merge_msg_channel_interact_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{payload := {sync_frame, OPFpayload}}, #{payload := {sync_frame, ONFpayload}}} -> S1#{payload => {sync_frame, merge_msg_sync_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {identifier_frame, OPFpayload}}, #{payload := {identifier_frame, ONFpayload}}} -> S1#{payload => {identifier_frame, merge_msg_identifier_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {password_frame, OPFpayload}}, #{payload := {password_frame, ONFpayload}}} -> S1#{payload => {password_frame, merge_msg_password_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {command_frame, OPFpayload}}, #{payload := {command_frame, ONFpayload}}} -> S1#{payload => {command_frame, merge_msg_command_frame(OPFpayload, ONFpayload, TrUserData)}};
        {_, #{payload := NFpayload}} -> S1#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S1#{payload => PFpayload};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_channel_interact_response/3}).
merge_msg_channel_interact_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{payload := {error_frame, OPFpayload}}, #{payload := {error_frame, ONFpayload}}} -> S1#{payload => {error_frame, merge_msg_error_frame(OPFpayload, ONFpayload, TrUserData)}};
        {#{payload := {info_frame, OPFpayload}}, #{payload := {info_frame, ONFpayload}}} -> S1#{payload => {info_frame, merge_msg_info_frame(OPFpayload, ONFpayload, TrUserData)}};
        {_, #{payload := NFpayload}} -> S1#{payload => NFpayload};
        {#{payload := PFpayload}, _} -> S1#{payload => PFpayload};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_channel_watch_request/3}).
merge_msg_channel_watch_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{sequence := NFsequence}} -> S1#{sequence => NFsequence};
             {#{sequence := PFsequence}, _} -> S1#{sequence => PFsequence};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{code := NFcode}} -> S2#{code => NFcode};
             {#{code := PFcode}, _} -> S2#{code => PFcode};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{identifier := NFidentifier}} -> S3#{identifier => NFidentifier};
             {#{identifier := PFidentifier}, _} -> S3#{identifier => PFidentifier};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{password := NFpassword}} -> S4#{password => NFpassword};
        {#{password := PFpassword}, _} -> S4#{password => PFpassword};
        _ -> S4
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        error_frame -> v_msg_error_frame(Msg, [MsgName], TrUserData);
        info_frame -> v_msg_info_frame(Msg, [MsgName], TrUserData);
        login_frame -> v_msg_login_frame(Msg, [MsgName], TrUserData);
        endpoint_frame -> v_msg_endpoint_frame(Msg, [MsgName], TrUserData);
        endpoint_list_frame -> v_msg_endpoint_list_frame(Msg, [MsgName], TrUserData);
        auth_interact_request -> v_msg_auth_interact_request(Msg, [MsgName], TrUserData);
        auth_interact_response -> v_msg_auth_interact_response(Msg, [MsgName], TrUserData);
        auth_watch_request -> v_msg_auth_watch_request(Msg, [MsgName], TrUserData);
        sync_frame -> v_msg_sync_frame(Msg, [MsgName], TrUserData);
        identifier_frame -> v_msg_identifier_frame(Msg, [MsgName], TrUserData);
        password_frame -> v_msg_password_frame(Msg, [MsgName], TrUserData);
        heartbeat_frame -> v_msg_heartbeat_frame(Msg, [MsgName], TrUserData);
        f_stash_end_frame -> v_msg_f_stash_end_frame(Msg, [MsgName], TrUserData);
        c_close_frame -> v_msg_c_close_frame(Msg, [MsgName], TrUserData);
        lbs_frame -> v_msg_lbs_frame(Msg, [MsgName], TrUserData);
        multi_target_frame -> v_msg_multi_target_frame(Msg, [MsgName], TrUserData);
        multi_target_list_frame -> v_msg_multi_target_list_frame(Msg, [MsgName], TrUserData);
        request_frame -> v_msg_request_frame(Msg, [MsgName], TrUserData);
        global_options_frame -> v_msg_global_options_frame(Msg, [MsgName], TrUserData);
        command_frame -> v_msg_command_frame(Msg, [MsgName], TrUserData);
        channel_interact_request -> v_msg_channel_interact_request(Msg, [MsgName], TrUserData);
        channel_interact_response -> v_msg_channel_interact_response(Msg, [MsgName], TrUserData);
        channel_watch_request -> v_msg_channel_watch_request(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_error_frame/3}).
-dialyzer({nowarn_function,v_msg_error_frame/3}).
v_msg_error_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{code := F1} -> 'v_enum_io.elkia.eventing.v1alpha1.Code'(F1, [code | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_error_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), error_frame}, M, Path);
v_msg_error_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, error_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_info_frame/3}).
-dialyzer({nowarn_function,v_msg_info_frame/3}).
v_msg_info_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{content := F1} -> v_type_string(F1, [content | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (content) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_info_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), info_frame}, M, Path);
v_msg_info_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, info_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_login_frame/3}).
-dialyzer({nowarn_function,v_msg_login_frame/3}).
v_msg_login_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{identifier := F1} -> v_type_string(F1, [identifier | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F2} -> v_type_string(F2, [password | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{client_version := F3} -> v_type_string(F3, [client_version | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{client_checksum := F4} -> v_type_string(F4, [client_checksum | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (identifier) -> ok;
                      (password) -> ok;
                      (client_version) -> ok;
                      (client_checksum) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_login_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), login_frame}, M, Path);
v_msg_login_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, login_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_endpoint_frame/3}).
-dialyzer({nowarn_function,v_msg_endpoint_frame/3}).
v_msg_endpoint_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{host := F1} -> v_type_string(F1, [host | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{port := F2} -> v_type_string(F2, [port | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{weight := F3} -> v_type_uint32(F3, [weight | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{world_id := F4} -> v_type_uint32(F4, [world_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{channel_id := F5} -> v_type_uint32(F5, [channel_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{world_name := F6} -> v_type_string(F6, [world_name | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (host) -> ok;
                      (port) -> ok;
                      (weight) -> ok;
                      (world_id) -> ok;
                      (channel_id) -> ok;
                      (world_name) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_endpoint_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), endpoint_frame}, M, Path);
v_msg_endpoint_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, endpoint_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_endpoint_list_frame/3}).
-dialyzer({nowarn_function,v_msg_endpoint_list_frame/3}).
v_msg_endpoint_list_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{code := F1} -> v_type_uint32(F1, [code | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{endpoint_frames := F2} ->
            if is_list(F2) ->
                   _ = [v_msg_endpoint_frame(Elem, [endpoint_frames | Path], TrUserData) || Elem <- F2],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, endpoint_frame}}, F2, [endpoint_frames | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
                      (endpoint_frames) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_endpoint_list_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), endpoint_list_frame}, M, Path);
v_msg_endpoint_list_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, endpoint_list_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_interact_request/3}).
-dialyzer({nowarn_function,v_msg_auth_interact_request/3}).
v_msg_auth_interact_request(#{} = M, Path, TrUserData) ->
    case M of
        #{payload := {raw_frame, OF1}} -> v_type_bytes(OF1, [raw_frame, payload | Path], TrUserData);
        #{payload := {login_frame, OF1}} -> v_msg_login_frame(OF1, [login_frame, payload | Path], TrUserData);
        #{payload := F1} -> mk_type_error(invalid_oneof, F1, [payload | Path]);
        _ -> ok
    end,
    lists:foreach(fun (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_interact_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_interact_request}, M, Path);
v_msg_auth_interact_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_interact_request}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_interact_response/3}).
-dialyzer({nowarn_function,v_msg_auth_interact_response/3}).
v_msg_auth_interact_response(#{} = M, Path, TrUserData) ->
    case M of
        #{payload := {error_frame, OF1}} -> v_msg_error_frame(OF1, [error_frame, payload | Path], TrUserData);
        #{payload := {info_frame, OF1}} -> v_msg_info_frame(OF1, [info_frame, payload | Path], TrUserData);
        #{payload := {endpoint_list_frame, OF1}} -> v_msg_endpoint_list_frame(OF1, [endpoint_list_frame, payload | Path], TrUserData);
        #{payload := F1} -> mk_type_error(invalid_oneof, F1, [payload | Path]);
        _ -> ok
    end,
    lists:foreach(fun (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_interact_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_interact_response}, M, Path);
v_msg_auth_interact_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_interact_response}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_watch_request/3}).
-dialyzer({nowarn_function,v_msg_auth_watch_request/3}).
v_msg_auth_watch_request(#{} = M, Path, TrUserData) ->
    case M of
        #{identifier := F1} -> v_type_string(F1, [identifier | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F2} -> v_type_string(F2, [password | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{client_version := F3} -> v_type_string(F3, [client_version | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{client_checksum := F4} -> v_type_string(F4, [client_checksum | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (identifier) -> ok;
                      (password) -> ok;
                      (client_version) -> ok;
                      (client_checksum) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_watch_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_watch_request}, M, Path);
v_msg_auth_watch_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_watch_request}, X, Path).

-compile({nowarn_unused_function,v_msg_sync_frame/3}).
-dialyzer({nowarn_function,v_msg_sync_frame/3}).
v_msg_sync_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{sequence := F1} -> v_type_uint32(F1, [sequence | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{code := F2} -> v_type_uint32(F2, [code | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (sequence) -> ok;
                      (code) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_sync_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), sync_frame}, M, Path);
v_msg_sync_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, sync_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_identifier_frame/3}).
-dialyzer({nowarn_function,v_msg_identifier_frame/3}).
v_msg_identifier_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{sequence := F1} -> v_type_uint32(F1, [sequence | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{identifier := F2} -> v_type_string(F2, [identifier | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (sequence) -> ok;
                      (identifier) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_identifier_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), identifier_frame}, M, Path);
v_msg_identifier_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, identifier_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_password_frame/3}).
-dialyzer({nowarn_function,v_msg_password_frame/3}).
v_msg_password_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{sequence := F1} -> v_type_uint32(F1, [sequence | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F2} -> v_type_string(F2, [password | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (sequence) -> ok;
                      (password) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_password_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), password_frame}, M, Path);
v_msg_password_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, password_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_heartbeat_frame/3}).
-dialyzer({nowarn_function,v_msg_heartbeat_frame/3}).
v_msg_heartbeat_frame(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_heartbeat_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), heartbeat_frame}, M, Path);
v_msg_heartbeat_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, heartbeat_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_f_stash_end_frame/3}).
-dialyzer({nowarn_function,v_msg_f_stash_end_frame/3}).
v_msg_f_stash_end_frame(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_f_stash_end_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), f_stash_end_frame}, M, Path);
v_msg_f_stash_end_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, f_stash_end_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_c_close_frame/3}).
-dialyzer({nowarn_function,v_msg_c_close_frame/3}).
v_msg_c_close_frame(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_c_close_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), c_close_frame}, M, Path);
v_msg_c_close_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, c_close_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_lbs_frame/3}).
-dialyzer({nowarn_function,v_msg_lbs_frame/3}).
v_msg_lbs_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{type := F1} -> v_type_int32(F1, [type | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_lbs_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), lbs_frame}, M, Path);
v_msg_lbs_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, lbs_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_multi_target_frame/3}).
-dialyzer({nowarn_function,v_msg_multi_target_frame/3}).
v_msg_multi_target_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{skill_id := F1} -> v_type_string(F1, [skill_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{target_id := F2} -> v_type_uint32(F2, [target_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (skill_id) -> ok;
                      (target_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_multi_target_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), multi_target_frame}, M, Path);
v_msg_multi_target_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, multi_target_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_multi_target_list_frame/3}).
-dialyzer({nowarn_function,v_msg_multi_target_list_frame/3}).
v_msg_multi_target_list_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{target_amount := F1} -> v_type_uint32(F1, [target_amount | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{targets := F2} ->
            if is_list(F2) ->
                   _ = [v_msg_multi_target_frame(Elem, [targets | Path], TrUserData) || Elem <- F2],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, multi_target_frame}}, F2, [targets | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (target_amount) -> ok;
                      (targets) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_multi_target_list_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), multi_target_list_frame}, M, Path);
v_msg_multi_target_list_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, multi_target_list_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_request_frame/3}).
-dialyzer({nowarn_function,v_msg_request_frame/3}).
v_msg_request_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{character_id := F1} -> v_type_uint32(F1, [character_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{type := F2} -> 'v_enum_io.elkia.eventing.v1alpha1.RequestType'(F2, [type | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (character_id) -> ok;
                      (type) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_request_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), request_frame}, M, Path);
v_msg_request_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, request_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_global_options_frame/3}).
-dialyzer({nowarn_function,v_msg_global_options_frame/3}).
v_msg_global_options_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{option := F1} -> 'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(F1, [option | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (option) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_global_options_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), global_options_frame}, M, Path);
v_msg_global_options_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, global_options_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_command_frame/3}).
-dialyzer({nowarn_function,v_msg_command_frame/3}).
v_msg_command_frame(#{} = M, Path, TrUserData) ->
    case M of
        #{sequence := F1} -> v_type_uint32(F1, [sequence | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := {raw_frame, OF2}} -> v_type_bytes(OF2, [raw_frame, payload | Path], TrUserData);
        #{payload := {heartbeat_frame, OF2}} -> v_msg_heartbeat_frame(OF2, [heartbeat_frame, payload | Path], TrUserData);
        #{payload := {f_stash_end_frame, OF2}} -> v_msg_f_stash_end_frame(OF2, [f_stash_end_frame, payload | Path], TrUserData);
        #{payload := {c_close_frame, OF2}} -> v_msg_c_close_frame(OF2, [c_close_frame, payload | Path], TrUserData);
        #{payload := {lbs_frame, OF2}} -> v_msg_lbs_frame(OF2, [lbs_frame, payload | Path], TrUserData);
        #{payload := {multi_target_list_frame, OF2}} -> v_msg_multi_target_list_frame(OF2, [multi_target_list_frame, payload | Path], TrUserData);
        #{payload := {request_frame, OF2}} -> v_msg_request_frame(OF2, [request_frame, payload | Path], TrUserData);
        #{payload := {global_options_frame, OF2}} -> v_msg_global_options_frame(OF2, [global_options_frame, payload | Path], TrUserData);
        #{payload := F2} -> mk_type_error(invalid_oneof, F2, [payload | Path]);
        _ -> ok
    end,
    lists:foreach(fun (sequence) -> ok;
                      (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_command_frame(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), command_frame}, M, Path);
v_msg_command_frame(X, Path, _TrUserData) -> mk_type_error({expected_msg, command_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_channel_interact_request/3}).
-dialyzer({nowarn_function,v_msg_channel_interact_request/3}).
v_msg_channel_interact_request(#{} = M, Path, TrUserData) ->
    case M of
        #{payload := {sync_frame, OF1}} -> v_msg_sync_frame(OF1, [sync_frame, payload | Path], TrUserData);
        #{payload := {identifier_frame, OF1}} -> v_msg_identifier_frame(OF1, [identifier_frame, payload | Path], TrUserData);
        #{payload := {password_frame, OF1}} -> v_msg_password_frame(OF1, [password_frame, payload | Path], TrUserData);
        #{payload := {command_frame, OF1}} -> v_msg_command_frame(OF1, [command_frame, payload | Path], TrUserData);
        #{payload := F1} -> mk_type_error(invalid_oneof, F1, [payload | Path]);
        _ -> ok
    end,
    lists:foreach(fun (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_channel_interact_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), channel_interact_request}, M, Path);
v_msg_channel_interact_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, channel_interact_request}, X, Path).

-compile({nowarn_unused_function,v_msg_channel_interact_response/3}).
-dialyzer({nowarn_function,v_msg_channel_interact_response/3}).
v_msg_channel_interact_response(#{} = M, Path, TrUserData) ->
    case M of
        #{payload := {error_frame, OF1}} -> v_msg_error_frame(OF1, [error_frame, payload | Path], TrUserData);
        #{payload := {info_frame, OF1}} -> v_msg_info_frame(OF1, [info_frame, payload | Path], TrUserData);
        #{payload := F1} -> mk_type_error(invalid_oneof, F1, [payload | Path]);
        _ -> ok
    end,
    lists:foreach(fun (payload) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_channel_interact_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), channel_interact_response}, M, Path);
v_msg_channel_interact_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, channel_interact_response}, X, Path).

-compile({nowarn_unused_function,v_msg_channel_watch_request/3}).
-dialyzer({nowarn_function,v_msg_channel_watch_request/3}).
v_msg_channel_watch_request(#{} = M, Path, TrUserData) ->
    case M of
        #{sequence := F1} -> v_type_uint32(F1, [sequence | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{code := F2} -> v_type_uint32(F2, [code | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{identifier := F3} -> v_type_string(F3, [identifier | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F4} -> v_type_string(F4, [password | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (sequence) -> ok;
                      (code) -> ok;
                      (identifier) -> ok;
                      (password) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_channel_watch_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), channel_watch_request}, M, Path);
v_msg_channel_watch_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, channel_watch_request}, X, Path).

-compile({nowarn_unused_function,'v_enum_io.elkia.eventing.v1alpha1.Code'/3}).
-dialyzer({nowarn_function,'v_enum_io.elkia.eventing.v1alpha1.Code'/3}).
'v_enum_io.elkia.eventing.v1alpha1.Code'('OUTDATED_CLIENT', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.Code'('UNEXPECTED_ERROR', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.Code'('MAINTENANCE', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.Code'('SESSION_ALREADY_USED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.Code'('UNVALID_CREDENTIALS', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.Code'('CANT_AUTHENTICATE', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.Code'('USER_BLOCKLISTED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.Code'('COUNTRY_BLACKLISTED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.Code'('BAD_CASE', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.Code'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.Code'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'io.elkia.eventing.v1alpha1.Code'}, X, Path).

-compile({nowarn_unused_function,'v_enum_io.elkia.eventing.v1alpha1.RequestType'/3}).
-dialyzer({nowarn_function,'v_enum_io.elkia.eventing.v1alpha1.RequestType'/3}).
'v_enum_io.elkia.eventing.v1alpha1.RequestType'('REQUESTED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.RequestType'('LIST', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.RequestType'('CONFIRMED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.RequestType'('CANCELLED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.RequestType'('DECLINED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.RequestType'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.RequestType'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'io.elkia.eventing.v1alpha1.RequestType'}, X, Path).

-compile({nowarn_unused_function,'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'/3}).
-dialyzer({nowarn_function,'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'/3}).
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('EXCHANGE_BLOCKED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('FRIEND_REQUEST_BLOCKED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('FAMILY_REQUEST_BLOCKED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('WHISPER_BLOCKED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('GROUP_REQUEST_BLOCKED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('GROUP_SHARING', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('MOUSE_AIM_LOCK', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('HERO_CHAT_BLOCKED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('EMOTICONS_BLOCKED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('QUICK_GET_UP', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('HP_BLOCKED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('BUFF_BLOCKED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'('MINILAND_INVITE_BLOCKED', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_io.elkia.eventing.v1alpha1.CharacterOptions'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'io.elkia.eventing.v1alpha1.CharacterOptions'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'io.elkia.eventing.v1alpha1.Code'},
      [{'OUTDATED_CLIENT', 0}, {'UNEXPECTED_ERROR', 1}, {'MAINTENANCE', 2}, {'SESSION_ALREADY_USED', 3}, {'UNVALID_CREDENTIALS', 4}, {'CANT_AUTHENTICATE', 5}, {'USER_BLOCKLISTED', 6}, {'COUNTRY_BLACKLISTED', 7}, {'BAD_CASE', 8}]},
     {{enum, 'io.elkia.eventing.v1alpha1.RequestType'}, [{'REQUESTED', 0}, {'LIST', 1}, {'CONFIRMED', 2}, {'CANCELLED', 3}, {'DECLINED', 4}]},
     {{enum, 'io.elkia.eventing.v1alpha1.CharacterOptions'},
      [{'EXCHANGE_BLOCKED', 0},
       {'FRIEND_REQUEST_BLOCKED', 1},
       {'FAMILY_REQUEST_BLOCKED', 2},
       {'WHISPER_BLOCKED', 3},
       {'GROUP_REQUEST_BLOCKED', 4},
       {'GROUP_SHARING', 5},
       {'MOUSE_AIM_LOCK', 6},
       {'HERO_CHAT_BLOCKED', 7},
       {'EMOTICONS_BLOCKED', 8},
       {'QUICK_GET_UP', 9},
       {'HP_BLOCKED', 10},
       {'BUFF_BLOCKED', 11},
       {'MINILAND_INVITE_BLOCKED', 12}]},
     {{msg, error_frame}, [#{name => code, fnum => 1, rnum => 2, type => {enum, 'io.elkia.eventing.v1alpha1.Code'}, occurrence => optional, opts => []}]},
     {{msg, info_frame}, [#{name => content, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}]},
     {{msg, login_frame},
      [#{name => identifier, fnum => 2, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => password, fnum => 3, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => client_version, fnum => 5, rnum => 4, type => string, occurrence => optional, opts => []},
       #{name => client_checksum, fnum => 7, rnum => 5, type => string, occurrence => optional, opts => []}]},
     {{msg, endpoint_frame},
      [#{name => host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => port, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => weight, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
       #{name => world_id, fnum => 4, rnum => 5, type => uint32, occurrence => optional, opts => []},
       #{name => channel_id, fnum => 5, rnum => 6, type => uint32, occurrence => optional, opts => []},
       #{name => world_name, fnum => 6, rnum => 7, type => string, occurrence => optional, opts => []}]},
     {{msg, endpoint_list_frame}, [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => endpoint_frames, fnum => 2, rnum => 3, type => {msg, endpoint_frame}, occurrence => repeated, opts => []}]},
     {{msg, auth_interact_request},
      [#{name => payload, rnum => 2, fields => [#{name => raw_frame, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => login_frame, fnum => 2, rnum => 2, type => {msg, login_frame}, occurrence => optional, opts => []}],
         opts => []}]},
     {{msg, auth_interact_response},
      [#{name => payload, rnum => 2,
         fields =>
             [#{name => error_frame, fnum => 1, rnum => 2, type => {msg, error_frame}, occurrence => optional, opts => []},
              #{name => info_frame, fnum => 2, rnum => 2, type => {msg, info_frame}, occurrence => optional, opts => []},
              #{name => endpoint_list_frame, fnum => 3, rnum => 2, type => {msg, endpoint_list_frame}, occurrence => optional, opts => []}],
         opts => []}]},
     {{msg, auth_watch_request},
      [#{name => identifier, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => password, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => client_version, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
       #{name => client_checksum, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []}]},
     {{msg, sync_frame}, [#{name => sequence, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => code, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []}]},
     {{msg, identifier_frame}, [#{name => sequence, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => identifier, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]},
     {{msg, password_frame}, [#{name => sequence, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => password, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]},
     {{msg, heartbeat_frame}, []},
     {{msg, f_stash_end_frame}, []},
     {{msg, c_close_frame}, []},
     {{msg, lbs_frame}, [#{name => type, fnum => 1, rnum => 2, type => int32, occurrence => optional, opts => []}]},
     {{msg, multi_target_frame}, [#{name => skill_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => target_id, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []}]},
     {{msg, multi_target_list_frame}, [#{name => target_amount, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => targets, fnum => 2, rnum => 3, type => {msg, multi_target_frame}, occurrence => repeated, opts => []}]},
     {{msg, request_frame},
      [#{name => character_id, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => type, fnum => 2, rnum => 3, type => {enum, 'io.elkia.eventing.v1alpha1.RequestType'}, occurrence => optional, opts => []}]},
     {{msg, global_options_frame}, [#{name => option, fnum => 1, rnum => 2, type => {enum, 'io.elkia.eventing.v1alpha1.CharacterOptions'}, occurrence => optional, opts => []}]},
     {{msg, command_frame},
      [#{name => sequence, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []},
       #{name => payload, rnum => 3,
         fields =>
             [#{name => raw_frame, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
              #{name => heartbeat_frame, fnum => 3, rnum => 3, type => {msg, heartbeat_frame}, occurrence => optional, opts => []},
              #{name => f_stash_end_frame, fnum => 4, rnum => 3, type => {msg, f_stash_end_frame}, occurrence => optional, opts => []},
              #{name => c_close_frame, fnum => 5, rnum => 3, type => {msg, c_close_frame}, occurrence => optional, opts => []},
              #{name => lbs_frame, fnum => 6, rnum => 3, type => {msg, lbs_frame}, occurrence => optional, opts => []},
              #{name => multi_target_list_frame, fnum => 7, rnum => 3, type => {msg, multi_target_list_frame}, occurrence => optional, opts => []},
              #{name => request_frame, fnum => 8, rnum => 3, type => {msg, request_frame}, occurrence => optional, opts => []},
              #{name => global_options_frame, fnum => 9, rnum => 3, type => {msg, global_options_frame}, occurrence => optional, opts => []}],
         opts => []}]},
     {{msg, channel_interact_request},
      [#{name => payload, rnum => 2,
         fields =>
             [#{name => sync_frame, fnum => 1, rnum => 2, type => {msg, sync_frame}, occurrence => optional, opts => []},
              #{name => identifier_frame, fnum => 2, rnum => 2, type => {msg, identifier_frame}, occurrence => optional, opts => []},
              #{name => password_frame, fnum => 3, rnum => 2, type => {msg, password_frame}, occurrence => optional, opts => []},
              #{name => command_frame, fnum => 5, rnum => 2, type => {msg, command_frame}, occurrence => optional, opts => []}],
         opts => []}]},
     {{msg, channel_interact_response},
      [#{name => payload, rnum => 2,
         fields => [#{name => error_frame, fnum => 1, rnum => 2, type => {msg, error_frame}, occurrence => optional, opts => []}, #{name => info_frame, fnum => 2, rnum => 2, type => {msg, info_frame}, occurrence => optional, opts => []}], opts => []}]},
     {{msg, channel_watch_request},
      [#{name => sequence, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []},
       #{name => code, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []},
       #{name => identifier, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
       #{name => password, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []}]}].


get_msg_names() ->
    [error_frame,
     info_frame,
     login_frame,
     endpoint_frame,
     endpoint_list_frame,
     auth_interact_request,
     auth_interact_response,
     auth_watch_request,
     sync_frame,
     identifier_frame,
     password_frame,
     heartbeat_frame,
     f_stash_end_frame,
     c_close_frame,
     lbs_frame,
     multi_target_frame,
     multi_target_list_frame,
     request_frame,
     global_options_frame,
     command_frame,
     channel_interact_request,
     channel_interact_response,
     channel_watch_request].


get_group_names() -> [].


get_msg_or_group_names() ->
    [error_frame,
     info_frame,
     login_frame,
     endpoint_frame,
     endpoint_list_frame,
     auth_interact_request,
     auth_interact_response,
     auth_watch_request,
     sync_frame,
     identifier_frame,
     password_frame,
     heartbeat_frame,
     f_stash_end_frame,
     c_close_frame,
     lbs_frame,
     multi_target_frame,
     multi_target_list_frame,
     request_frame,
     global_options_frame,
     command_frame,
     channel_interact_request,
     channel_interact_response,
     channel_watch_request].


get_enum_names() -> ['io.elkia.eventing.v1alpha1.Code', 'io.elkia.eventing.v1alpha1.RequestType', 'io.elkia.eventing.v1alpha1.CharacterOptions'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(error_frame) -> [#{name => code, fnum => 1, rnum => 2, type => {enum, 'io.elkia.eventing.v1alpha1.Code'}, occurrence => optional, opts => []}];
find_msg_def(info_frame) -> [#{name => content, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}];
find_msg_def(login_frame) ->
    [#{name => identifier, fnum => 2, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => password, fnum => 3, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => client_version, fnum => 5, rnum => 4, type => string, occurrence => optional, opts => []},
     #{name => client_checksum, fnum => 7, rnum => 5, type => string, occurrence => optional, opts => []}];
find_msg_def(endpoint_frame) ->
    [#{name => host, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => port, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => weight, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
     #{name => world_id, fnum => 4, rnum => 5, type => uint32, occurrence => optional, opts => []},
     #{name => channel_id, fnum => 5, rnum => 6, type => uint32, occurrence => optional, opts => []},
     #{name => world_name, fnum => 6, rnum => 7, type => string, occurrence => optional, opts => []}];
find_msg_def(endpoint_list_frame) -> [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => endpoint_frames, fnum => 2, rnum => 3, type => {msg, endpoint_frame}, occurrence => repeated, opts => []}];
find_msg_def(auth_interact_request) ->
    [#{name => payload, rnum => 2, fields => [#{name => raw_frame, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => login_frame, fnum => 2, rnum => 2, type => {msg, login_frame}, occurrence => optional, opts => []}],
       opts => []}];
find_msg_def(auth_interact_response) ->
    [#{name => payload, rnum => 2,
       fields =>
           [#{name => error_frame, fnum => 1, rnum => 2, type => {msg, error_frame}, occurrence => optional, opts => []},
            #{name => info_frame, fnum => 2, rnum => 2, type => {msg, info_frame}, occurrence => optional, opts => []},
            #{name => endpoint_list_frame, fnum => 3, rnum => 2, type => {msg, endpoint_list_frame}, occurrence => optional, opts => []}],
       opts => []}];
find_msg_def(auth_watch_request) ->
    [#{name => identifier, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => password, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => client_version, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
     #{name => client_checksum, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []}];
find_msg_def(sync_frame) -> [#{name => sequence, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => code, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []}];
find_msg_def(identifier_frame) -> [#{name => sequence, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => identifier, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(password_frame) -> [#{name => sequence, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => password, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(heartbeat_frame) -> [];
find_msg_def(f_stash_end_frame) -> [];
find_msg_def(c_close_frame) -> [];
find_msg_def(lbs_frame) -> [#{name => type, fnum => 1, rnum => 2, type => int32, occurrence => optional, opts => []}];
find_msg_def(multi_target_frame) -> [#{name => skill_id, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}, #{name => target_id, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []}];
find_msg_def(multi_target_list_frame) ->
    [#{name => target_amount, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => targets, fnum => 2, rnum => 3, type => {msg, multi_target_frame}, occurrence => repeated, opts => []}];
find_msg_def(request_frame) ->
    [#{name => character_id, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => type, fnum => 2, rnum => 3, type => {enum, 'io.elkia.eventing.v1alpha1.RequestType'}, occurrence => optional, opts => []}];
find_msg_def(global_options_frame) -> [#{name => option, fnum => 1, rnum => 2, type => {enum, 'io.elkia.eventing.v1alpha1.CharacterOptions'}, occurrence => optional, opts => []}];
find_msg_def(command_frame) ->
    [#{name => sequence, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []},
     #{name => payload, rnum => 3,
       fields =>
           [#{name => raw_frame, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
            #{name => heartbeat_frame, fnum => 3, rnum => 3, type => {msg, heartbeat_frame}, occurrence => optional, opts => []},
            #{name => f_stash_end_frame, fnum => 4, rnum => 3, type => {msg, f_stash_end_frame}, occurrence => optional, opts => []},
            #{name => c_close_frame, fnum => 5, rnum => 3, type => {msg, c_close_frame}, occurrence => optional, opts => []},
            #{name => lbs_frame, fnum => 6, rnum => 3, type => {msg, lbs_frame}, occurrence => optional, opts => []},
            #{name => multi_target_list_frame, fnum => 7, rnum => 3, type => {msg, multi_target_list_frame}, occurrence => optional, opts => []},
            #{name => request_frame, fnum => 8, rnum => 3, type => {msg, request_frame}, occurrence => optional, opts => []},
            #{name => global_options_frame, fnum => 9, rnum => 3, type => {msg, global_options_frame}, occurrence => optional, opts => []}],
       opts => []}];
find_msg_def(channel_interact_request) ->
    [#{name => payload, rnum => 2,
       fields =>
           [#{name => sync_frame, fnum => 1, rnum => 2, type => {msg, sync_frame}, occurrence => optional, opts => []},
            #{name => identifier_frame, fnum => 2, rnum => 2, type => {msg, identifier_frame}, occurrence => optional, opts => []},
            #{name => password_frame, fnum => 3, rnum => 2, type => {msg, password_frame}, occurrence => optional, opts => []},
            #{name => command_frame, fnum => 5, rnum => 2, type => {msg, command_frame}, occurrence => optional, opts => []}],
       opts => []}];
find_msg_def(channel_interact_response) ->
    [#{name => payload, rnum => 2,
       fields => [#{name => error_frame, fnum => 1, rnum => 2, type => {msg, error_frame}, occurrence => optional, opts => []}, #{name => info_frame, fnum => 2, rnum => 2, type => {msg, info_frame}, occurrence => optional, opts => []}], opts => []}];
find_msg_def(channel_watch_request) ->
    [#{name => sequence, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []},
     #{name => code, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []},
     #{name => identifier, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
     #{name => password, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('io.elkia.eventing.v1alpha1.Code') ->
    [{'OUTDATED_CLIENT', 0}, {'UNEXPECTED_ERROR', 1}, {'MAINTENANCE', 2}, {'SESSION_ALREADY_USED', 3}, {'UNVALID_CREDENTIALS', 4}, {'CANT_AUTHENTICATE', 5}, {'USER_BLOCKLISTED', 6}, {'COUNTRY_BLACKLISTED', 7}, {'BAD_CASE', 8}];
find_enum_def('io.elkia.eventing.v1alpha1.RequestType') -> [{'REQUESTED', 0}, {'LIST', 1}, {'CONFIRMED', 2}, {'CANCELLED', 3}, {'DECLINED', 4}];
find_enum_def('io.elkia.eventing.v1alpha1.CharacterOptions') ->
    [{'EXCHANGE_BLOCKED', 0},
     {'FRIEND_REQUEST_BLOCKED', 1},
     {'FAMILY_REQUEST_BLOCKED', 2},
     {'WHISPER_BLOCKED', 3},
     {'GROUP_REQUEST_BLOCKED', 4},
     {'GROUP_SHARING', 5},
     {'MOUSE_AIM_LOCK', 6},
     {'HERO_CHAT_BLOCKED', 7},
     {'EMOTICONS_BLOCKED', 8},
     {'QUICK_GET_UP', 9},
     {'HP_BLOCKED', 10},
     {'BUFF_BLOCKED', 11},
     {'MINILAND_INVITE_BLOCKED', 12}];
find_enum_def(_) -> error.


enum_symbol_by_value('io.elkia.eventing.v1alpha1.Code', Value) -> 'enum_symbol_by_value_io.elkia.eventing.v1alpha1.Code'(Value);
enum_symbol_by_value('io.elkia.eventing.v1alpha1.RequestType', Value) -> 'enum_symbol_by_value_io.elkia.eventing.v1alpha1.RequestType'(Value);
enum_symbol_by_value('io.elkia.eventing.v1alpha1.CharacterOptions', Value) -> 'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(Value).


enum_value_by_symbol('io.elkia.eventing.v1alpha1.Code', Sym) -> 'enum_value_by_symbol_io.elkia.eventing.v1alpha1.Code'(Sym);
enum_value_by_symbol('io.elkia.eventing.v1alpha1.RequestType', Sym) -> 'enum_value_by_symbol_io.elkia.eventing.v1alpha1.RequestType'(Sym);
enum_value_by_symbol('io.elkia.eventing.v1alpha1.CharacterOptions', Sym) -> 'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'(Sym).


'enum_symbol_by_value_io.elkia.eventing.v1alpha1.Code'(0) -> 'OUTDATED_CLIENT';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.Code'(1) -> 'UNEXPECTED_ERROR';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.Code'(2) -> 'MAINTENANCE';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.Code'(3) -> 'SESSION_ALREADY_USED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.Code'(4) -> 'UNVALID_CREDENTIALS';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.Code'(5) -> 'CANT_AUTHENTICATE';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.Code'(6) -> 'USER_BLOCKLISTED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.Code'(7) -> 'COUNTRY_BLACKLISTED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.Code'(8) -> 'BAD_CASE'.


'enum_value_by_symbol_io.elkia.eventing.v1alpha1.Code'('OUTDATED_CLIENT') -> 0;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.Code'('UNEXPECTED_ERROR') -> 1;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.Code'('MAINTENANCE') -> 2;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.Code'('SESSION_ALREADY_USED') -> 3;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.Code'('UNVALID_CREDENTIALS') -> 4;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.Code'('CANT_AUTHENTICATE') -> 5;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.Code'('USER_BLOCKLISTED') -> 6;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.Code'('COUNTRY_BLACKLISTED') -> 7;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.Code'('BAD_CASE') -> 8.

'enum_symbol_by_value_io.elkia.eventing.v1alpha1.RequestType'(0) -> 'REQUESTED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.RequestType'(1) -> 'LIST';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.RequestType'(2) -> 'CONFIRMED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.RequestType'(3) -> 'CANCELLED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.RequestType'(4) -> 'DECLINED'.


'enum_value_by_symbol_io.elkia.eventing.v1alpha1.RequestType'('REQUESTED') -> 0;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.RequestType'('LIST') -> 1;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.RequestType'('CONFIRMED') -> 2;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.RequestType'('CANCELLED') -> 3;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.RequestType'('DECLINED') -> 4.

'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(0) -> 'EXCHANGE_BLOCKED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(1) -> 'FRIEND_REQUEST_BLOCKED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(2) -> 'FAMILY_REQUEST_BLOCKED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(3) -> 'WHISPER_BLOCKED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(4) -> 'GROUP_REQUEST_BLOCKED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(5) -> 'GROUP_SHARING';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(6) -> 'MOUSE_AIM_LOCK';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(7) -> 'HERO_CHAT_BLOCKED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(8) -> 'EMOTICONS_BLOCKED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(9) -> 'QUICK_GET_UP';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(10) -> 'HP_BLOCKED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(11) -> 'BUFF_BLOCKED';
'enum_symbol_by_value_io.elkia.eventing.v1alpha1.CharacterOptions'(12) -> 'MINILAND_INVITE_BLOCKED'.


'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('EXCHANGE_BLOCKED') -> 0;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('FRIEND_REQUEST_BLOCKED') -> 1;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('FAMILY_REQUEST_BLOCKED') -> 2;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('WHISPER_BLOCKED') -> 3;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('GROUP_REQUEST_BLOCKED') -> 4;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('GROUP_SHARING') -> 5;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('MOUSE_AIM_LOCK') -> 6;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('HERO_CHAT_BLOCKED') -> 7;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('EMOTICONS_BLOCKED') -> 8;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('QUICK_GET_UP') -> 9;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('HP_BLOCKED') -> 10;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('BUFF_BLOCKED') -> 11;
'enum_value_by_symbol_io.elkia.eventing.v1alpha1.CharacterOptions'('MINILAND_INVITE_BLOCKED') -> 12.


get_service_names() -> ['io.elkia.eventing.v1alpha1.Auth', 'io.elkia.eventing.v1alpha1.Gateway'].


get_service_def('io.elkia.eventing.v1alpha1.Auth') ->
    {{service, 'io.elkia.eventing.v1alpha1.Auth'},
     [#{name => 'AuthInteract', input => auth_interact_request, output => auth_interact_response, input_stream => true, output_stream => true, opts => []},
      #{name => 'AuthWatch', input => auth_watch_request, output => auth_interact_response, input_stream => false, output_stream => true, opts => []}]};
get_service_def('io.elkia.eventing.v1alpha1.Gateway') ->
    {{service, 'io.elkia.eventing.v1alpha1.Gateway'},
     [#{name => 'ChannelInteract', input => channel_interact_request, output => channel_interact_response, input_stream => true, output_stream => true, opts => []},
      #{name => 'ChannelWatch', input => channel_watch_request, output => channel_interact_response, input_stream => false, output_stream => true, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('io.elkia.eventing.v1alpha1.Auth') -> ['AuthInteract', 'AuthWatch'];
get_rpc_names('io.elkia.eventing.v1alpha1.Gateway') -> ['ChannelInteract', 'ChannelWatch'];
get_rpc_names(_) -> error.


find_rpc_def('io.elkia.eventing.v1alpha1.Auth', RpcName) -> 'find_rpc_def_io.elkia.eventing.v1alpha1.Auth'(RpcName);
find_rpc_def('io.elkia.eventing.v1alpha1.Gateway', RpcName) -> 'find_rpc_def_io.elkia.eventing.v1alpha1.Gateway'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_io.elkia.eventing.v1alpha1.Auth'('AuthInteract') -> #{name => 'AuthInteract', input => auth_interact_request, output => auth_interact_response, input_stream => true, output_stream => true, opts => []};
'find_rpc_def_io.elkia.eventing.v1alpha1.Auth'('AuthWatch') -> #{name => 'AuthWatch', input => auth_watch_request, output => auth_interact_response, input_stream => false, output_stream => true, opts => []};
'find_rpc_def_io.elkia.eventing.v1alpha1.Auth'(_) -> error.

'find_rpc_def_io.elkia.eventing.v1alpha1.Gateway'('ChannelInteract') -> #{name => 'ChannelInteract', input => channel_interact_request, output => channel_interact_response, input_stream => true, output_stream => true, opts => []};
'find_rpc_def_io.elkia.eventing.v1alpha1.Gateway'('ChannelWatch') -> #{name => 'ChannelWatch', input => channel_watch_request, output => channel_interact_response, input_stream => false, output_stream => true, opts => []};
'find_rpc_def_io.elkia.eventing.v1alpha1.Gateway'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"io.elkia.eventing.v1alpha1.Auth">>) -> 'io.elkia.eventing.v1alpha1.Auth';
fqbin_to_service_name(<<"io.elkia.eventing.v1alpha1.Gateway">>) -> 'io.elkia.eventing.v1alpha1.Gateway';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('io.elkia.eventing.v1alpha1.Auth') -> <<"io.elkia.eventing.v1alpha1.Auth">>;
service_name_to_fqbin('io.elkia.eventing.v1alpha1.Gateway') -> <<"io.elkia.eventing.v1alpha1.Gateway">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"io.elkia.eventing.v1alpha1.Auth">>, <<"AuthInteract">>) -> {'io.elkia.eventing.v1alpha1.Auth', 'AuthInteract'};
fqbins_to_service_and_rpc_name(<<"io.elkia.eventing.v1alpha1.Auth">>, <<"AuthWatch">>) -> {'io.elkia.eventing.v1alpha1.Auth', 'AuthWatch'};
fqbins_to_service_and_rpc_name(<<"io.elkia.eventing.v1alpha1.Gateway">>, <<"ChannelInteract">>) -> {'io.elkia.eventing.v1alpha1.Gateway', 'ChannelInteract'};
fqbins_to_service_and_rpc_name(<<"io.elkia.eventing.v1alpha1.Gateway">>, <<"ChannelWatch">>) -> {'io.elkia.eventing.v1alpha1.Gateway', 'ChannelWatch'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('io.elkia.eventing.v1alpha1.Auth', 'AuthInteract') -> {<<"io.elkia.eventing.v1alpha1.Auth">>, <<"AuthInteract">>};
service_and_rpc_name_to_fqbins('io.elkia.eventing.v1alpha1.Auth', 'AuthWatch') -> {<<"io.elkia.eventing.v1alpha1.Auth">>, <<"AuthWatch">>};
service_and_rpc_name_to_fqbins('io.elkia.eventing.v1alpha1.Gateway', 'ChannelInteract') -> {<<"io.elkia.eventing.v1alpha1.Gateway">>, <<"ChannelInteract">>};
service_and_rpc_name_to_fqbins('io.elkia.eventing.v1alpha1.Gateway', 'ChannelWatch') -> {<<"io.elkia.eventing.v1alpha1.Gateway">>, <<"ChannelWatch">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.ErrorFrame">>) -> error_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.InfoFrame">>) -> info_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.LoginFrame">>) -> login_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.EndpointFrame">>) -> endpoint_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.EndpointListFrame">>) -> endpoint_list_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.AuthInteractRequest">>) -> auth_interact_request;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.AuthInteractResponse">>) -> auth_interact_response;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.AuthWatchRequest">>) -> auth_watch_request;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.SyncFrame">>) -> sync_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.IdentifierFrame">>) -> identifier_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.PasswordFrame">>) -> password_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.HeartbeatFrame">>) -> heartbeat_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.FStashEndFrame">>) -> f_stash_end_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.CCloseFrame">>) -> c_close_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.LBSFrame">>) -> lbs_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.MultiTargetFrame">>) -> multi_target_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.MultiTargetListFrame">>) -> multi_target_list_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.RequestFrame">>) -> request_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.GlobalOptionsFrame">>) -> global_options_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.CommandFrame">>) -> command_frame;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.ChannelInteractRequest">>) -> channel_interact_request;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.ChannelInteractResponse">>) -> channel_interact_response;
fqbin_to_msg_name(<<"io.elkia.eventing.v1alpha1.ChannelWatchRequest">>) -> channel_watch_request;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(error_frame) -> <<"io.elkia.eventing.v1alpha1.ErrorFrame">>;
msg_name_to_fqbin(info_frame) -> <<"io.elkia.eventing.v1alpha1.InfoFrame">>;
msg_name_to_fqbin(login_frame) -> <<"io.elkia.eventing.v1alpha1.LoginFrame">>;
msg_name_to_fqbin(endpoint_frame) -> <<"io.elkia.eventing.v1alpha1.EndpointFrame">>;
msg_name_to_fqbin(endpoint_list_frame) -> <<"io.elkia.eventing.v1alpha1.EndpointListFrame">>;
msg_name_to_fqbin(auth_interact_request) -> <<"io.elkia.eventing.v1alpha1.AuthInteractRequest">>;
msg_name_to_fqbin(auth_interact_response) -> <<"io.elkia.eventing.v1alpha1.AuthInteractResponse">>;
msg_name_to_fqbin(auth_watch_request) -> <<"io.elkia.eventing.v1alpha1.AuthWatchRequest">>;
msg_name_to_fqbin(sync_frame) -> <<"io.elkia.eventing.v1alpha1.SyncFrame">>;
msg_name_to_fqbin(identifier_frame) -> <<"io.elkia.eventing.v1alpha1.IdentifierFrame">>;
msg_name_to_fqbin(password_frame) -> <<"io.elkia.eventing.v1alpha1.PasswordFrame">>;
msg_name_to_fqbin(heartbeat_frame) -> <<"io.elkia.eventing.v1alpha1.HeartbeatFrame">>;
msg_name_to_fqbin(f_stash_end_frame) -> <<"io.elkia.eventing.v1alpha1.FStashEndFrame">>;
msg_name_to_fqbin(c_close_frame) -> <<"io.elkia.eventing.v1alpha1.CCloseFrame">>;
msg_name_to_fqbin(lbs_frame) -> <<"io.elkia.eventing.v1alpha1.LBSFrame">>;
msg_name_to_fqbin(multi_target_frame) -> <<"io.elkia.eventing.v1alpha1.MultiTargetFrame">>;
msg_name_to_fqbin(multi_target_list_frame) -> <<"io.elkia.eventing.v1alpha1.MultiTargetListFrame">>;
msg_name_to_fqbin(request_frame) -> <<"io.elkia.eventing.v1alpha1.RequestFrame">>;
msg_name_to_fqbin(global_options_frame) -> <<"io.elkia.eventing.v1alpha1.GlobalOptionsFrame">>;
msg_name_to_fqbin(command_frame) -> <<"io.elkia.eventing.v1alpha1.CommandFrame">>;
msg_name_to_fqbin(channel_interact_request) -> <<"io.elkia.eventing.v1alpha1.ChannelInteractRequest">>;
msg_name_to_fqbin(channel_interact_response) -> <<"io.elkia.eventing.v1alpha1.ChannelInteractResponse">>;
msg_name_to_fqbin(channel_watch_request) -> <<"io.elkia.eventing.v1alpha1.ChannelWatchRequest">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"io.elkia.eventing.v1alpha1.Code">>) -> 'io.elkia.eventing.v1alpha1.Code';
fqbin_to_enum_name(<<"io.elkia.eventing.v1alpha1.RequestType">>) -> 'io.elkia.eventing.v1alpha1.RequestType';
fqbin_to_enum_name(<<"io.elkia.eventing.v1alpha1.CharacterOptions">>) -> 'io.elkia.eventing.v1alpha1.CharacterOptions';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('io.elkia.eventing.v1alpha1.Code') -> <<"io.elkia.eventing.v1alpha1.Code">>;
enum_name_to_fqbin('io.elkia.eventing.v1alpha1.RequestType') -> <<"io.elkia.eventing.v1alpha1.RequestType">>;
enum_name_to_fqbin('io.elkia.eventing.v1alpha1.CharacterOptions') -> <<"io.elkia.eventing.v1alpha1.CharacterOptions">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'io.elkia.eventing.v1alpha1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "v1alpha1_eventing.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["v1alpha1_eventing.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["v1alpha1_eventing"].


get_msg_containment("v1alpha1_eventing") ->
    [auth_interact_request,
     auth_interact_response,
     auth_watch_request,
     c_close_frame,
     channel_interact_request,
     channel_interact_response,
     channel_watch_request,
     command_frame,
     endpoint_frame,
     endpoint_list_frame,
     error_frame,
     f_stash_end_frame,
     global_options_frame,
     heartbeat_frame,
     identifier_frame,
     info_frame,
     lbs_frame,
     login_frame,
     multi_target_frame,
     multi_target_list_frame,
     password_frame,
     request_frame,
     sync_frame];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("v1alpha1_eventing") -> 'io.elkia.eventing.v1alpha1';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("v1alpha1_eventing") -> ['io.elkia.eventing.v1alpha1.Auth', 'io.elkia.eventing.v1alpha1.Gateway'];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("v1alpha1_eventing") ->
    [{'io.elkia.eventing.v1alpha1.Auth', 'AuthInteract'}, {'io.elkia.eventing.v1alpha1.Auth', 'AuthWatch'}, {'io.elkia.eventing.v1alpha1.Gateway', 'ChannelInteract'}, {'io.elkia.eventing.v1alpha1.Gateway', 'ChannelWatch'}];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("v1alpha1_eventing") -> ['io.elkia.eventing.v1alpha1.CharacterOptions', 'io.elkia.eventing.v1alpha1.Code', 'io.elkia.eventing.v1alpha1.RequestType'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.ChannelWatchRequest">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.ChannelInteractRequest">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.AuthWatchRequest">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.AuthInteractRequest">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.SyncFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.RequestFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.PasswordFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.MultiTargetListFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.MultiTargetFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.LoginFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.LBSFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.InfoFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.IdentifierFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.HeartbeatFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.GlobalOptionsFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.FStashEndFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.ErrorFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.EndpointListFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.EndpointFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.CommandFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.ChannelInteractResponse">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.CCloseFrame">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.AuthInteractResponse">>) -> "v1alpha1_eventing";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.Auth">>) -> "v1alpha1_eventing";
get_proto_by_service_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.Gateway">>) -> "v1alpha1_eventing";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.CharacterOptions">>) -> "v1alpha1_eventing";
get_proto_by_enum_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.RequestType">>) -> "v1alpha1_eventing";
get_proto_by_enum_name_as_fqbin(<<"io.elkia.eventing.v1alpha1.Code">>) -> "v1alpha1_eventing";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"io.elkia.eventing.v1alpha1">>) -> ["v1alpha1_eventing"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.19.7".

gpb_version_as_list() ->
    [4,19,7].

gpb_version_source() ->
    "file".
