%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.7
%% Version source: file
-module(world_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterClass'/1, 'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterClass'/1]).
-export(['enum_symbol_by_value_io.elkia.world.v1alpha1.Sex'/1, 'enum_value_by_symbol_io.elkia.world.v1alpha1.Sex'/1]).
-export(['enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'/1, 'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'/1]).
-export(['enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairStyle'/1, 'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairStyle'/1]).
-export(['enum_symbol_by_value_io.elkia.world.v1alpha1.Faction'/1, 'enum_value_by_symbol_io.elkia.world.v1alpha1.Faction'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types
-type 'io.elkia.world.v1alpha1.CharacterClass'() :: 'ADVENTURER' | 'SORCERER' | 'ARCHER' | 'SWORDMAN' | 'MARTIAL_ARTIST'.
-type 'io.elkia.world.v1alpha1.Sex'() :: 'Male' | 'Female'.
-type 'io.elkia.world.v1alpha1.CharacterHairColor'() :: 'MauveTaupe' | 'Cerise' | 'SanMarino' | 'Affair' | 'Dixie' | 'Raven' | 'Killarney' | 'Nutmeg' | 'Saddle' | 'Red'.
-type 'io.elkia.world.v1alpha1.CharacterHairStyle'() :: 'StyleA' | 'StyleB' | 'StyleC' | 'StyleD' | 'Shaved'.
-type 'io.elkia.world.v1alpha1.Faction'() :: 'Neutral' | 'Angel' | 'Demon'.
-export_type(['io.elkia.world.v1alpha1.CharacterClass'/0, 'io.elkia.world.v1alpha1.Sex'/0, 'io.elkia.world.v1alpha1.CharacterHairColor'/0, 'io.elkia.world.v1alpha1.CharacterHairStyle'/0, 'io.elkia.world.v1alpha1.Faction'/0]).

%% message types
-type character() ::
      #{id                      => unicode:chardata(), % = 1, optional
        class                   => 'ADVENTURER' | 'SORCERER' | 'ARCHER' | 'SWORDMAN' | 'MARTIAL_ARTIST' | integer(), % = 2, optional, enum io.elkia.world.v1alpha1.CharacterClass
        sex                     => 'Male' | 'Female' | integer(), % = 3, optional, enum io.elkia.world.v1alpha1.Sex
        hair_color              => 'MauveTaupe' | 'Cerise' | 'SanMarino' | 'Affair' | 'Dixie' | 'Raven' | 'Killarney' | 'Nutmeg' | 'Saddle' | 'Red' | integer(), % = 4, optional, enum io.elkia.world.v1alpha1.CharacterHairColor
        hair_style              => 'StyleA' | 'StyleB' | 'StyleC' | 'StyleD' | 'Shaved' | integer(), % = 5, optional, enum io.elkia.world.v1alpha1.CharacterHairStyle
        faction                 => 'Neutral' | 'Angel' | 'Demon' | integer(), % = 6, optional, enum io.elkia.world.v1alpha1.Faction
        reputation              => integer(),       % = 7, optional, 32 bits
        dignity                 => integer(),       % = 8, optional, 32 bits
        compliment              => integer(),       % = 9, optional, 32 bits
        health                  => integer(),       % = 10, optional, 32 bits
        mana                    => integer(),       % = 11, optional, 32 bits
        name                    => unicode:chardata(), % = 12, optional
        hero_experience         => integer(),       % = 13, optional, 32 bits
        hero_level              => integer(),       % = 14, optional, 32 bits
        job_experience          => integer(),       % = 15, optional, 32 bits
        job_level               => integer(),       % = 16, optional, 32 bits
        experience              => integer(),       % = 17, optional, 32 bits
        level                   => integer()        % = 18, optional, 32 bits
       }.

-type character_add_request() ::
      #{id                      => unicode:chardata(), % = 1, optional
        name                    => unicode:chardata(), % = 2, optional
        class                   => 'ADVENTURER' | 'SORCERER' | 'ARCHER' | 'SWORDMAN' | 'MARTIAL_ARTIST' | integer(), % = 3, optional, enum io.elkia.world.v1alpha1.CharacterClass
        sex                     => 'Male' | 'Female' | integer(), % = 4, optional, enum io.elkia.world.v1alpha1.Sex
        hair_color              => 'MauveTaupe' | 'Cerise' | 'SanMarino' | 'Affair' | 'Dixie' | 'Raven' | 'Killarney' | 'Nutmeg' | 'Saddle' | 'Red' | integer(), % = 5, optional, enum io.elkia.world.v1alpha1.CharacterHairColor
        hair_style              => 'StyleA' | 'StyleB' | 'StyleC' | 'StyleD' | 'Shaved' | integer() % = 6, optional, enum io.elkia.world.v1alpha1.CharacterHairStyle
       }.

-type character_add_response() ::
      #{
       }.

-type character_remove_request() ::
      #{id                      => unicode:chardata() % = 1, optional
       }.

-type character_remove_response() ::
      #{
       }.

-type character_update_request() ::
      #{id                      => unicode:chardata(), % = 1, optional
        world_id                => non_neg_integer(), % = 2, optional, 32 bits
        channel_id              => non_neg_integer(), % = 3, optional, 32 bits
        name                    => unicode:chardata(), % = 4, optional
        address                 => unicode:chardata(), % = 5, optional
        population              => non_neg_integer(), % = 6, optional, 32 bits
        capacity                => non_neg_integer() % = 7, optional, 32 bits
       }.

-type character_update_response() ::
      #{
       }.

-type character_list_request() ::
      #{identity_id             => unicode:chardata() % = 1, optional
       }.

-type character_list_response() ::
      #{characters              => [character()]    % = 1, repeated
       }.

-export_type(['character'/0, 'character_add_request'/0, 'character_add_response'/0, 'character_remove_request'/0, 'character_remove_response'/0, 'character_update_request'/0, 'character_update_response'/0, 'character_list_request'/0, 'character_list_response'/0]).
-type '$msg_name'() :: character | character_add_request | character_add_response | character_remove_request | character_remove_response | character_update_request | character_update_response | character_list_request | character_list_response.
-type '$msg'() :: character() | character_add_request() | character_add_response() | character_remove_request() | character_remove_response() | character_update_request() | character_update_response() | character_list_request() | character_list_response().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        character -> encode_msg_character(id(Msg, TrUserData), TrUserData);
        character_add_request -> encode_msg_character_add_request(id(Msg, TrUserData), TrUserData);
        character_add_response -> encode_msg_character_add_response(id(Msg, TrUserData), TrUserData);
        character_remove_request -> encode_msg_character_remove_request(id(Msg, TrUserData), TrUserData);
        character_remove_response -> encode_msg_character_remove_response(id(Msg, TrUserData), TrUserData);
        character_update_request -> encode_msg_character_update_request(id(Msg, TrUserData), TrUserData);
        character_update_response -> encode_msg_character_update_response(id(Msg, TrUserData), TrUserData);
        character_list_request -> encode_msg_character_list_request(id(Msg, TrUserData), TrUserData);
        character_list_response -> encode_msg_character_list_response(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_character(Msg, TrUserData) -> encode_msg_character(Msg, <<>>, TrUserData).


encode_msg_character(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{class := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 'ADVENTURER'; TrF2 =:= 0 -> B1;
                        true -> 'e_enum_io.elkia.world.v1alpha1.CharacterClass'(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{sex := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 'Male'; TrF3 =:= 0 -> B2;
                        true -> 'e_enum_io.elkia.world.v1alpha1.Sex'(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{hair_color := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     if TrF4 =:= 'MauveTaupe'; TrF4 =:= 0 -> B3;
                        true -> 'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'(TrF4, <<B3/binary, 32>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{hair_style := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     if TrF5 =:= 'StyleA'; TrF5 =:= 0 -> B4;
                        true -> 'e_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(TrF5, <<B4/binary, 40>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    B6 = case M of
             #{faction := F6} ->
                 begin
                     TrF6 = id(F6, TrUserData),
                     if TrF6 =:= 'Neutral'; TrF6 =:= 0 -> B5;
                        true -> 'e_enum_io.elkia.world.v1alpha1.Faction'(TrF6, <<B5/binary, 48>>, TrUserData)
                     end
                 end;
             _ -> B5
         end,
    B7 = case M of
             #{reputation := F7} ->
                 begin
                     TrF7 = id(F7, TrUserData),
                     if TrF7 =:= 0 -> B6;
                        true -> e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
                     end
                 end;
             _ -> B6
         end,
    B8 = case M of
             #{dignity := F8} ->
                 begin
                     TrF8 = id(F8, TrUserData),
                     if TrF8 =:= 0 -> B7;
                        true -> e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
                     end
                 end;
             _ -> B7
         end,
    B9 = case M of
             #{compliment := F9} ->
                 begin
                     TrF9 = id(F9, TrUserData),
                     if TrF9 =:= 0 -> B8;
                        true -> e_type_int32(TrF9, <<B8/binary, 72>>, TrUserData)
                     end
                 end;
             _ -> B8
         end,
    B10 = case M of
              #{health := F10} ->
                  begin
                      TrF10 = id(F10, TrUserData),
                      if TrF10 =:= 0 -> B9;
                         true -> e_type_int32(TrF10, <<B9/binary, 80>>, TrUserData)
                      end
                  end;
              _ -> B9
          end,
    B11 = case M of
              #{mana := F11} ->
                  begin
                      TrF11 = id(F11, TrUserData),
                      if TrF11 =:= 0 -> B10;
                         true -> e_type_int32(TrF11, <<B10/binary, 88>>, TrUserData)
                      end
                  end;
              _ -> B10
          end,
    B12 = case M of
              #{name := F12} ->
                  begin
                      TrF12 = id(F12, TrUserData),
                      case is_empty_string(TrF12) of
                          true -> B11;
                          false -> e_type_string(TrF12, <<B11/binary, 98>>, TrUserData)
                      end
                  end;
              _ -> B11
          end,
    B13 = case M of
              #{hero_experience := F13} ->
                  begin
                      TrF13 = id(F13, TrUserData),
                      if TrF13 =:= 0 -> B12;
                         true -> e_type_int32(TrF13, <<B12/binary, 104>>, TrUserData)
                      end
                  end;
              _ -> B12
          end,
    B14 = case M of
              #{hero_level := F14} ->
                  begin
                      TrF14 = id(F14, TrUserData),
                      if TrF14 =:= 0 -> B13;
                         true -> e_type_int32(TrF14, <<B13/binary, 112>>, TrUserData)
                      end
                  end;
              _ -> B13
          end,
    B15 = case M of
              #{job_experience := F15} ->
                  begin
                      TrF15 = id(F15, TrUserData),
                      if TrF15 =:= 0 -> B14;
                         true -> e_type_int32(TrF15, <<B14/binary, 120>>, TrUserData)
                      end
                  end;
              _ -> B14
          end,
    B16 = case M of
              #{job_level := F16} ->
                  begin
                      TrF16 = id(F16, TrUserData),
                      if TrF16 =:= 0 -> B15;
                         true -> e_type_int32(TrF16, <<B15/binary, 128, 1>>, TrUserData)
                      end
                  end;
              _ -> B15
          end,
    B17 = case M of
              #{experience := F17} ->
                  begin
                      TrF17 = id(F17, TrUserData),
                      if TrF17 =:= 0 -> B16;
                         true -> e_type_int32(TrF17, <<B16/binary, 136, 1>>, TrUserData)
                      end
                  end;
              _ -> B16
          end,
    case M of
        #{level := F18} ->
            begin
                TrF18 = id(F18, TrUserData),
                if TrF18 =:= 0 -> B17;
                   true -> e_type_int32(TrF18, <<B17/binary, 144, 1>>, TrUserData)
                end
            end;
        _ -> B17
    end.

encode_msg_character_add_request(Msg, TrUserData) -> encode_msg_character_add_request(Msg, <<>>, TrUserData).


encode_msg_character_add_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{name := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{class := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 'ADVENTURER'; TrF3 =:= 0 -> B2;
                        true -> 'e_enum_io.elkia.world.v1alpha1.CharacterClass'(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{sex := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     if TrF4 =:= 'Male'; TrF4 =:= 0 -> B3;
                        true -> 'e_enum_io.elkia.world.v1alpha1.Sex'(TrF4, <<B3/binary, 32>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{hair_color := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     if TrF5 =:= 'MauveTaupe'; TrF5 =:= 0 -> B4;
                        true -> 'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'(TrF5, <<B4/binary, 40>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    case M of
        #{hair_style := F6} ->
            begin
                TrF6 = id(F6, TrUserData),
                if TrF6 =:= 'StyleA'; TrF6 =:= 0 -> B5;
                   true -> 'e_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(TrF6, <<B5/binary, 48>>, TrUserData)
                end
            end;
        _ -> B5
    end.

encode_msg_character_add_response(_Msg, _TrUserData) -> <<>>.

encode_msg_character_remove_request(Msg, TrUserData) -> encode_msg_character_remove_request(Msg, <<>>, TrUserData).


encode_msg_character_remove_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_character_remove_response(_Msg, _TrUserData) -> <<>>.

encode_msg_character_update_request(Msg, TrUserData) -> encode_msg_character_update_request(Msg, <<>>, TrUserData).


encode_msg_character_update_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{world_id := F2} -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end;
             _ -> B1
         end,
    B3 = case M of
             #{channel_id := F3} -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end;
             _ -> B2
         end,
    B4 = case M of
             #{name := F4} -> begin TrF4 = id(F4, TrUserData), e_type_string(TrF4, <<B3/binary, 34>>, TrUserData) end;
             _ -> B3
         end,
    B5 = case M of
             #{address := F5} -> begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 42>>, TrUserData) end;
             _ -> B4
         end,
    B6 = case M of
             #{population := F6} -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end;
             _ -> B5
         end,
    case M of
        #{capacity := F7} -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end;
        _ -> B6
    end.

encode_msg_character_update_response(_Msg, _TrUserData) -> <<>>.

encode_msg_character_list_request(Msg, TrUserData) -> encode_msg_character_list_request(Msg, <<>>, TrUserData).


encode_msg_character_list_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{identity_id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_character_list_response(Msg, TrUserData) -> encode_msg_character_list_response(Msg, <<>>, TrUserData).


encode_msg_character_list_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{characters := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_character_list_response_characters(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

e_mfield_character_list_response_characters(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_character(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_character_list_response_characters([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_character_list_response_characters(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_character_list_response_characters(Rest, Bin3, TrUserData);
e_field_character_list_response_characters([], Bin, _TrUserData) -> Bin.

'e_enum_io.elkia.world.v1alpha1.CharacterClass'('ADVENTURER', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_io.elkia.world.v1alpha1.CharacterClass'('SORCERER', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_io.elkia.world.v1alpha1.CharacterClass'('ARCHER', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_io.elkia.world.v1alpha1.CharacterClass'('SWORDMAN', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_io.elkia.world.v1alpha1.CharacterClass'('MARTIAL_ARTIST', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_io.elkia.world.v1alpha1.CharacterClass'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_io.elkia.world.v1alpha1.Sex'('Male', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_io.elkia.world.v1alpha1.Sex'('Female', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_io.elkia.world.v1alpha1.Sex'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'('MauveTaupe', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Cerise', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'('SanMarino', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Affair', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Dixie', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Raven', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Killarney', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Nutmeg', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Saddle', Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Red', Bin, _TrUserData) -> <<Bin/binary, 9>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairColor'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleA', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleB', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleC', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleD', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairStyle'('Shaved', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_io.elkia.world.v1alpha1.Faction'('Neutral', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_io.elkia.world.v1alpha1.Faction'('Angel', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_io.elkia.world.v1alpha1.Faction'('Demon', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_io.elkia.world.v1alpha1.Faction'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(character, Bin, TrUserData) -> id(decode_msg_character(Bin, TrUserData), TrUserData);
decode_msg_2_doit(character_add_request, Bin, TrUserData) -> id(decode_msg_character_add_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(character_add_response, Bin, TrUserData) -> id(decode_msg_character_add_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(character_remove_request, Bin, TrUserData) -> id(decode_msg_character_remove_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(character_remove_response, Bin, TrUserData) -> id(decode_msg_character_remove_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(character_update_request, Bin, TrUserData) -> id(decode_msg_character_update_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(character_update_response, Bin, TrUserData) -> id(decode_msg_character_update_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(character_list_request, Bin, TrUserData) -> id(decode_msg_character_list_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(character_list_response, Bin, TrUserData) -> id(decode_msg_character_list_response(Bin, TrUserData), TrUserData).



decode_msg_character(Bin, TrUserData) ->
    dfp_read_field_def_character(Bin,
                                 0,
                                 0,
                                 0,
                                 id(<<>>, TrUserData),
                                 id('ADVENTURER', TrUserData),
                                 id('Male', TrUserData),
                                 id('MauveTaupe', TrUserData),
                                 id('StyleA', TrUserData),
                                 id('Neutral', TrUserData),
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 id(<<>>, TrUserData),
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 id(0, TrUserData),
                                 TrUserData).

dfp_read_field_def_character(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_class(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_sex(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_hair_color(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_hair_style(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_faction(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_reputation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_dignity(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<72, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_compliment(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<80, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_health(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<88, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_mana(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<98, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<104, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_hero_experience(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<112, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_hero_level(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_job_experience(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<128, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_job_level(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<136, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_experience(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<144, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    d_field_character_level(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dfp_read_field_def_character(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, _) ->
    #{id => F@_1, class => F@_2, sex => F@_3, hair_color => F@_4, hair_style => F@_5, faction => F@_6, reputation => F@_7, dignity => F@_8, compliment => F@_9, health => F@_10, mana => F@_11, name => F@_12, hero_experience => F@_13, hero_level => F@_14,
      job_experience => F@_15, job_level => F@_16, experience => F@_17, level => F@_18};
dfp_read_field_def_character(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    dg_read_field_def_character(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

dg_read_field_def_character(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_character(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
dg_read_field_def_character(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_character_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        16 -> d_field_character_class(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        24 -> d_field_character_sex(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        32 -> d_field_character_hair_color(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        40 -> d_field_character_hair_style(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        48 -> d_field_character_faction(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        56 -> d_field_character_reputation(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        64 -> d_field_character_dignity(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        72 -> d_field_character_compliment(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        80 -> d_field_character_health(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        88 -> d_field_character_mana(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        98 -> d_field_character_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        104 -> d_field_character_hero_experience(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        112 -> d_field_character_hero_level(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        120 -> d_field_character_job_experience(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        128 -> d_field_character_job_level(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        136 -> d_field_character_experience(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        144 -> d_field_character_level(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_character(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
                1 -> skip_64_character(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
                2 -> skip_length_delimited_character(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
                3 -> skip_group_character(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
                5 -> skip_32_character(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData)
            end
    end;
dg_read_field_def_character(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, _) ->
    #{id => F@_1, class => F@_2, sex => F@_3, hair_color => F@_4, hair_style => F@_5, faction => F@_6, reputation => F@_7, dignity => F@_8, compliment => F@_9, health => F@_10, mana => F@_11, name => F@_12, hero_experience => F@_13, hero_level => F@_14,
      job_experience => F@_15, job_level => F@_16, experience => F@_17, level => F@_18}.

d_field_character_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_character(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_class(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_class(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_class(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.world.v1alpha1.CharacterClass'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_sex(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_sex(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_sex(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.world.v1alpha1.Sex'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_hair_color(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_hair_color(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_hair_color(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.world.v1alpha1.CharacterHairColor'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_hair_style(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_hair_style(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_hair_style(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_faction(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_faction(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_faction(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.world.v1alpha1.Faction'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_reputation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_reputation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_reputation(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_dignity(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_dignity(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_dignity(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_compliment(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_compliment(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_compliment(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_health(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_health(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_health(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_mana(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_mana(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_mana(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, NewFValue, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, NewFValue, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_hero_experience(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_hero_experience(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_hero_experience(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, NewFValue, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_hero_level(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_hero_level(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_hero_level(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, NewFValue, F@_15, F@_16, F@_17, F@_18, TrUserData).

d_field_character_job_experience(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_job_experience(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_job_experience(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, NewFValue, F@_16, F@_17, F@_18, TrUserData).

d_field_character_job_level(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_job_level(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_job_level(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _, F@_17, F@_18, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, NewFValue, F@_17, F@_18, TrUserData).

d_field_character_experience(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_experience(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_experience(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, _, F@_18, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, NewFValue, F@_18, TrUserData).

d_field_character_level(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    d_field_character_level(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
d_field_character_level(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_character(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, NewFValue, TrUserData).

skip_varint_character(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    skip_varint_character(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
skip_varint_character(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    dfp_read_field_def_character(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

skip_length_delimited_character(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) when N < 57 ->
    skip_length_delimited_character(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData);
skip_length_delimited_character(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_character(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

skip_group_character(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_character(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

skip_32_character(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    dfp_read_field_def_character(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

skip_64_character(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData) ->
    dfp_read_field_def_character(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, TrUserData).

decode_msg_character_add_request(Bin, TrUserData) ->
    dfp_read_field_def_character_add_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id('ADVENTURER', TrUserData), id('Male', TrUserData), id('MauveTaupe', TrUserData), id('StyleA', TrUserData), TrUserData).

dfp_read_field_def_character_add_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_character_add_request_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_character_add_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_character_add_request_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_character_add_request(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_character_add_request_class(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_character_add_request(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_character_add_request_sex(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_character_add_request(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_character_add_request_hair_color(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_character_add_request(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_character_add_request_hair_style(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_character_add_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #{id => F@_1, name => F@_2, class => F@_3, sex => F@_4, hair_color => F@_5, hair_style => F@_6};
dfp_read_field_def_character_add_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_character_add_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_character_add_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_character_add_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_character_add_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_character_add_request_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        18 -> d_field_character_add_request_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        24 -> d_field_character_add_request_class(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        32 -> d_field_character_add_request_sex(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        40 -> d_field_character_add_request_hair_color(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        48 -> d_field_character_add_request_hair_style(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_character_add_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_character_add_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_character_add_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_character_add_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_character_add_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_character_add_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #{id => F@_1, name => F@_2, class => F@_3, sex => F@_4, hair_color => F@_5, hair_style => F@_6}.

d_field_character_add_request_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_character_add_request_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_character_add_request_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_character_add_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_character_add_request_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_character_add_request_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_character_add_request_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_character_add_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_character_add_request_class(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_character_add_request_class(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_character_add_request_class(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.world.v1alpha1.CharacterClass'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_character_add_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_character_add_request_sex(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_character_add_request_sex(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_character_add_request_sex(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.world.v1alpha1.Sex'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_character_add_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_character_add_request_hair_color(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_character_add_request_hair_color(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_character_add_request_hair_color(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.world.v1alpha1.CharacterHairColor'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_character_add_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_character_add_request_hair_style(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_character_add_request_hair_style(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_character_add_request_hair_style(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_character_add_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_character_add_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_character_add_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_character_add_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_character_add_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_character_add_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    skip_length_delimited_character_add_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_character_add_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_character_add_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_character_add_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_character_add_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_character_add_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_character_add_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_character_add_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_character_add_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_character_add_response(Bin, TrUserData) -> dfp_read_field_def_character_add_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_character_add_response(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_character_add_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_character_add_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_character_add_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_character_add_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_character_add_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_character_add_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_character_add_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_character_add_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_character_add_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_character_add_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_character_add_response(<<>>, 0, 0, _, _) -> #{}.

skip_varint_character_add_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_character_add_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_character_add_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_character_add_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_character_add_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_character_add_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_character_add_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_character_add_response(Rest2, 0, 0, F, TrUserData).

skip_group_character_add_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_character_add_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_character_add_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_character_add_response(Rest, Z1, Z2, F, TrUserData).

skip_64_character_add_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_character_add_response(Rest, Z1, Z2, F, TrUserData).

decode_msg_character_remove_request(Bin, TrUserData) -> dfp_read_field_def_character_remove_request(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_character_remove_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_character_remove_request_id(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_character_remove_request(<<>>, 0, 0, _, F@_1, _) -> #{id => F@_1};
dfp_read_field_def_character_remove_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_character_remove_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_character_remove_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_character_remove_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_character_remove_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_character_remove_request_id(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_character_remove_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_character_remove_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_character_remove_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_character_remove_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_character_remove_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_character_remove_request(<<>>, 0, 0, _, F@_1, _) -> #{id => F@_1}.

d_field_character_remove_request_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_character_remove_request_id(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_character_remove_request_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_character_remove_request(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_character_remove_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_character_remove_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_character_remove_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_character_remove_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_character_remove_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_character_remove_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_character_remove_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_character_remove_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_character_remove_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_character_remove_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_character_remove_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_character_remove_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_character_remove_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_character_remove_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_character_remove_response(Bin, TrUserData) -> dfp_read_field_def_character_remove_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_character_remove_response(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_character_remove_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_character_remove_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_character_remove_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_character_remove_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_character_remove_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_character_remove_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_character_remove_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_character_remove_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_character_remove_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_character_remove_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_character_remove_response(<<>>, 0, 0, _, _) -> #{}.

skip_varint_character_remove_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_character_remove_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_character_remove_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_character_remove_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_character_remove_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_character_remove_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_character_remove_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_character_remove_response(Rest2, 0, 0, F, TrUserData).

skip_group_character_remove_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_character_remove_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_character_remove_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_character_remove_response(Rest, Z1, Z2, F, TrUserData).

skip_64_character_remove_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_character_remove_response(Rest, Z1, Z2, F, TrUserData).

decode_msg_character_update_request(Bin, TrUserData) ->
    dfp_read_field_def_character_update_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_character_update_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_character_update_request_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_character_update_request(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_character_update_request_world_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_character_update_request(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_character_update_request_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_character_update_request(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_character_update_request_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_character_update_request(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_character_update_request_address(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_character_update_request(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_character_update_request_population(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_character_update_request(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_character_update_request_capacity(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_character_update_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{id => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{world_id => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{channel_id => F@_3}
         end,
    S4 = if F@_4 == '$undef' -> S3;
            true -> S3#{name => F@_4}
         end,
    S5 = if F@_5 == '$undef' -> S4;
            true -> S4#{address => F@_5}
         end,
    S6 = if F@_6 == '$undef' -> S5;
            true -> S5#{population => F@_6}
         end,
    if F@_7 == '$undef' -> S6;
       true -> S6#{capacity => F@_7}
    end;
dfp_read_field_def_character_update_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dg_read_field_def_character_update_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_character_update_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_character_update_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_character_update_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_character_update_request_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        16 -> d_field_character_update_request_world_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        24 -> d_field_character_update_request_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        34 -> d_field_character_update_request_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        42 -> d_field_character_update_request_address(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        48 -> d_field_character_update_request_population(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> d_field_character_update_request_capacity(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_character_update_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> skip_64_character_update_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> skip_length_delimited_character_update_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> skip_group_character_update_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> skip_32_character_update_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
dg_read_field_def_character_update_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{id => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{world_id => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{channel_id => F@_3}
         end,
    S4 = if F@_4 == '$undef' -> S3;
            true -> S3#{name => F@_4}
         end,
    S5 = if F@_5 == '$undef' -> S4;
            true -> S4#{address => F@_5}
         end,
    S6 = if F@_6 == '$undef' -> S5;
            true -> S5#{population => F@_6}
         end,
    if F@_7 == '$undef' -> S6;
       true -> S6#{capacity => F@_7}
    end.

d_field_character_update_request_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_character_update_request_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_character_update_request_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_character_update_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_character_update_request_world_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_character_update_request_world_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_character_update_request_world_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_character_update_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_character_update_request_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_character_update_request_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_character_update_request_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_character_update_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_character_update_request_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_character_update_request_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_character_update_request_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_character_update_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_character_update_request_address(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_character_update_request_address(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_character_update_request_address(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_character_update_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_character_update_request_population(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_character_update_request_population(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_character_update_request_population(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_character_update_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_character_update_request_capacity(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_character_update_request_capacity(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_character_update_request_capacity(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_character_update_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_character_update_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> skip_varint_character_update_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_character_update_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_character_update_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_character_update_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    skip_length_delimited_character_update_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_character_update_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_character_update_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_character_update_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_character_update_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_character_update_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_character_update_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_character_update_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_character_update_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_character_update_response(Bin, TrUserData) -> dfp_read_field_def_character_update_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_character_update_response(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_character_update_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_character_update_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_character_update_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_character_update_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_character_update_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_character_update_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_character_update_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_character_update_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_character_update_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_character_update_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_character_update_response(<<>>, 0, 0, _, _) -> #{}.

skip_varint_character_update_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_character_update_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_character_update_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_character_update_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_character_update_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_character_update_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_character_update_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_character_update_response(Rest2, 0, 0, F, TrUserData).

skip_group_character_update_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_character_update_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_character_update_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_character_update_response(Rest, Z1, Z2, F, TrUserData).

skip_64_character_update_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_character_update_response(Rest, Z1, Z2, F, TrUserData).

decode_msg_character_list_request(Bin, TrUserData) -> dfp_read_field_def_character_list_request(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_character_list_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_character_list_request_identity_id(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_character_list_request(<<>>, 0, 0, _, F@_1, _) -> #{identity_id => F@_1};
dfp_read_field_def_character_list_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_character_list_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_character_list_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_character_list_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_character_list_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_character_list_request_identity_id(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_character_list_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_character_list_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_character_list_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_character_list_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_character_list_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_character_list_request(<<>>, 0, 0, _, F@_1, _) -> #{identity_id => F@_1}.

d_field_character_list_request_identity_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_character_list_request_identity_id(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_character_list_request_identity_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_character_list_request(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_character_list_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_character_list_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_character_list_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_character_list_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_character_list_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_character_list_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_character_list_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_character_list_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_character_list_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_character_list_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_character_list_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_character_list_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_character_list_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_character_list_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_character_list_response(Bin, TrUserData) -> dfp_read_field_def_character_list_response(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_character_list_response(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_character_list_response_characters(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_character_list_response(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{characters => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_character_list_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_character_list_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_character_list_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_character_list_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_character_list_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_character_list_response_characters(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_character_list_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_character_list_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_character_list_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_character_list_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_character_list_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_character_list_response(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{characters => lists_reverse(R1, TrUserData)}
    end.

d_field_character_list_response_characters(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_character_list_response_characters(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_character_list_response_characters(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_character(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_character_list_response(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_character_list_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_character_list_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_character_list_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_character_list_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_character_list_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_character_list_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_character_list_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_character_list_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_character_list_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_character_list_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_character_list_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_character_list_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_character_list_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_character_list_response(Rest, Z1, Z2, F, F@_1, TrUserData).

'd_enum_io.elkia.world.v1alpha1.CharacterClass'(0) -> 'ADVENTURER';
'd_enum_io.elkia.world.v1alpha1.CharacterClass'(1) -> 'SORCERER';
'd_enum_io.elkia.world.v1alpha1.CharacterClass'(2) -> 'ARCHER';
'd_enum_io.elkia.world.v1alpha1.CharacterClass'(3) -> 'SWORDMAN';
'd_enum_io.elkia.world.v1alpha1.CharacterClass'(4) -> 'MARTIAL_ARTIST';
'd_enum_io.elkia.world.v1alpha1.CharacterClass'(V) -> V.

'd_enum_io.elkia.world.v1alpha1.Sex'(0) -> 'Male';
'd_enum_io.elkia.world.v1alpha1.Sex'(1) -> 'Female';
'd_enum_io.elkia.world.v1alpha1.Sex'(V) -> V.

'd_enum_io.elkia.world.v1alpha1.CharacterHairColor'(0) -> 'MauveTaupe';
'd_enum_io.elkia.world.v1alpha1.CharacterHairColor'(1) -> 'Cerise';
'd_enum_io.elkia.world.v1alpha1.CharacterHairColor'(2) -> 'SanMarino';
'd_enum_io.elkia.world.v1alpha1.CharacterHairColor'(3) -> 'Affair';
'd_enum_io.elkia.world.v1alpha1.CharacterHairColor'(4) -> 'Dixie';
'd_enum_io.elkia.world.v1alpha1.CharacterHairColor'(5) -> 'Raven';
'd_enum_io.elkia.world.v1alpha1.CharacterHairColor'(6) -> 'Killarney';
'd_enum_io.elkia.world.v1alpha1.CharacterHairColor'(7) -> 'Nutmeg';
'd_enum_io.elkia.world.v1alpha1.CharacterHairColor'(8) -> 'Saddle';
'd_enum_io.elkia.world.v1alpha1.CharacterHairColor'(9) -> 'Red';
'd_enum_io.elkia.world.v1alpha1.CharacterHairColor'(V) -> V.

'd_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(0) -> 'StyleA';
'd_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(1) -> 'StyleB';
'd_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(2) -> 'StyleC';
'd_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(3) -> 'StyleD';
'd_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(4) -> 'Shaved';
'd_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(V) -> V.

'd_enum_io.elkia.world.v1alpha1.Faction'(0) -> 'Neutral';
'd_enum_io.elkia.world.v1alpha1.Faction'(1) -> 'Angel';
'd_enum_io.elkia.world.v1alpha1.Faction'(2) -> 'Demon';
'd_enum_io.elkia.world.v1alpha1.Faction'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        character -> merge_msg_character(Prev, New, TrUserData);
        character_add_request -> merge_msg_character_add_request(Prev, New, TrUserData);
        character_add_response -> merge_msg_character_add_response(Prev, New, TrUserData);
        character_remove_request -> merge_msg_character_remove_request(Prev, New, TrUserData);
        character_remove_response -> merge_msg_character_remove_response(Prev, New, TrUserData);
        character_update_request -> merge_msg_character_update_request(Prev, New, TrUserData);
        character_update_response -> merge_msg_character_update_response(Prev, New, TrUserData);
        character_list_request -> merge_msg_character_list_request(Prev, New, TrUserData);
        character_list_response -> merge_msg_character_list_response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_character/3}).
merge_msg_character(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{class := NFclass}} -> S2#{class => NFclass};
             {#{class := PFclass}, _} -> S2#{class => PFclass};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{sex := NFsex}} -> S3#{sex => NFsex};
             {#{sex := PFsex}, _} -> S3#{sex => PFsex};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{hair_color := NFhair_color}} -> S4#{hair_color => NFhair_color};
             {#{hair_color := PFhair_color}, _} -> S4#{hair_color => PFhair_color};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{hair_style := NFhair_style}} -> S5#{hair_style => NFhair_style};
             {#{hair_style := PFhair_style}, _} -> S5#{hair_style => PFhair_style};
             _ -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {_, #{faction := NFfaction}} -> S6#{faction => NFfaction};
             {#{faction := PFfaction}, _} -> S6#{faction => PFfaction};
             _ -> S6
         end,
    S8 = case {PMsg, NMsg} of
             {_, #{reputation := NFreputation}} -> S7#{reputation => NFreputation};
             {#{reputation := PFreputation}, _} -> S7#{reputation => PFreputation};
             _ -> S7
         end,
    S9 = case {PMsg, NMsg} of
             {_, #{dignity := NFdignity}} -> S8#{dignity => NFdignity};
             {#{dignity := PFdignity}, _} -> S8#{dignity => PFdignity};
             _ -> S8
         end,
    S10 = case {PMsg, NMsg} of
              {_, #{compliment := NFcompliment}} -> S9#{compliment => NFcompliment};
              {#{compliment := PFcompliment}, _} -> S9#{compliment => PFcompliment};
              _ -> S9
          end,
    S11 = case {PMsg, NMsg} of
              {_, #{health := NFhealth}} -> S10#{health => NFhealth};
              {#{health := PFhealth}, _} -> S10#{health => PFhealth};
              _ -> S10
          end,
    S12 = case {PMsg, NMsg} of
              {_, #{mana := NFmana}} -> S11#{mana => NFmana};
              {#{mana := PFmana}, _} -> S11#{mana => PFmana};
              _ -> S11
          end,
    S13 = case {PMsg, NMsg} of
              {_, #{name := NFname}} -> S12#{name => NFname};
              {#{name := PFname}, _} -> S12#{name => PFname};
              _ -> S12
          end,
    S14 = case {PMsg, NMsg} of
              {_, #{hero_experience := NFhero_experience}} -> S13#{hero_experience => NFhero_experience};
              {#{hero_experience := PFhero_experience}, _} -> S13#{hero_experience => PFhero_experience};
              _ -> S13
          end,
    S15 = case {PMsg, NMsg} of
              {_, #{hero_level := NFhero_level}} -> S14#{hero_level => NFhero_level};
              {#{hero_level := PFhero_level}, _} -> S14#{hero_level => PFhero_level};
              _ -> S14
          end,
    S16 = case {PMsg, NMsg} of
              {_, #{job_experience := NFjob_experience}} -> S15#{job_experience => NFjob_experience};
              {#{job_experience := PFjob_experience}, _} -> S15#{job_experience => PFjob_experience};
              _ -> S15
          end,
    S17 = case {PMsg, NMsg} of
              {_, #{job_level := NFjob_level}} -> S16#{job_level => NFjob_level};
              {#{job_level := PFjob_level}, _} -> S16#{job_level => PFjob_level};
              _ -> S16
          end,
    S18 = case {PMsg, NMsg} of
              {_, #{experience := NFexperience}} -> S17#{experience => NFexperience};
              {#{experience := PFexperience}, _} -> S17#{experience => PFexperience};
              _ -> S17
          end,
    case {PMsg, NMsg} of
        {_, #{level := NFlevel}} -> S18#{level => NFlevel};
        {#{level := PFlevel}, _} -> S18#{level => PFlevel};
        _ -> S18
    end.

-compile({nowarn_unused_function,merge_msg_character_add_request/3}).
merge_msg_character_add_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S2#{name => NFname};
             {#{name := PFname}, _} -> S2#{name => PFname};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{class := NFclass}} -> S3#{class => NFclass};
             {#{class := PFclass}, _} -> S3#{class => PFclass};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{sex := NFsex}} -> S4#{sex => NFsex};
             {#{sex := PFsex}, _} -> S4#{sex => PFsex};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{hair_color := NFhair_color}} -> S5#{hair_color => NFhair_color};
             {#{hair_color := PFhair_color}, _} -> S5#{hair_color => PFhair_color};
             _ -> S5
         end,
    case {PMsg, NMsg} of
        {_, #{hair_style := NFhair_style}} -> S6#{hair_style => NFhair_style};
        {#{hair_style := PFhair_style}, _} -> S6#{hair_style => PFhair_style};
        _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_character_add_response/3}).
merge_msg_character_add_response(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_character_remove_request/3}).
merge_msg_character_remove_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{id := NFid}} -> S1#{id => NFid};
        {#{id := PFid}, _} -> S1#{id => PFid};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_character_remove_response/3}).
merge_msg_character_remove_response(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_character_update_request/3}).
merge_msg_character_update_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{world_id := NFworld_id}} -> S2#{world_id => NFworld_id};
             {#{world_id := PFworld_id}, _} -> S2#{world_id => PFworld_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{channel_id := NFchannel_id}} -> S3#{channel_id => NFchannel_id};
             {#{channel_id := PFchannel_id}, _} -> S3#{channel_id => PFchannel_id};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S4#{name => NFname};
             {#{name := PFname}, _} -> S4#{name => PFname};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{address := NFaddress}} -> S5#{address => NFaddress};
             {#{address := PFaddress}, _} -> S5#{address => PFaddress};
             _ -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {_, #{population := NFpopulation}} -> S6#{population => NFpopulation};
             {#{population := PFpopulation}, _} -> S6#{population => PFpopulation};
             _ -> S6
         end,
    case {PMsg, NMsg} of
        {_, #{capacity := NFcapacity}} -> S7#{capacity => NFcapacity};
        {#{capacity := PFcapacity}, _} -> S7#{capacity => PFcapacity};
        _ -> S7
    end.

-compile({nowarn_unused_function,merge_msg_character_update_response/3}).
merge_msg_character_update_response(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_character_list_request/3}).
merge_msg_character_list_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{identity_id := NFidentity_id}} -> S1#{identity_id => NFidentity_id};
        {#{identity_id := PFidentity_id}, _} -> S1#{identity_id => PFidentity_id};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_character_list_response/3}).
merge_msg_character_list_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{characters := PFcharacters}, #{characters := NFcharacters}} -> S1#{characters => 'erlang_++'(PFcharacters, NFcharacters, TrUserData)};
        {_, #{characters := NFcharacters}} -> S1#{characters => NFcharacters};
        {#{characters := PFcharacters}, _} -> S1#{characters => PFcharacters};
        {_, _} -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        character -> v_msg_character(Msg, [MsgName], TrUserData);
        character_add_request -> v_msg_character_add_request(Msg, [MsgName], TrUserData);
        character_add_response -> v_msg_character_add_response(Msg, [MsgName], TrUserData);
        character_remove_request -> v_msg_character_remove_request(Msg, [MsgName], TrUserData);
        character_remove_response -> v_msg_character_remove_response(Msg, [MsgName], TrUserData);
        character_update_request -> v_msg_character_update_request(Msg, [MsgName], TrUserData);
        character_update_response -> v_msg_character_update_response(Msg, [MsgName], TrUserData);
        character_list_request -> v_msg_character_list_request(Msg, [MsgName], TrUserData);
        character_list_response -> v_msg_character_list_response(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_character/3}).
-dialyzer({nowarn_function,v_msg_character/3}).
v_msg_character(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{class := F2} -> 'v_enum_io.elkia.world.v1alpha1.CharacterClass'(F2, [class | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{sex := F3} -> 'v_enum_io.elkia.world.v1alpha1.Sex'(F3, [sex | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{hair_color := F4} -> 'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'(F4, [hair_color | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{hair_style := F5} -> 'v_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(F5, [hair_style | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{faction := F6} -> 'v_enum_io.elkia.world.v1alpha1.Faction'(F6, [faction | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{reputation := F7} -> v_type_int32(F7, [reputation | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{dignity := F8} -> v_type_int32(F8, [dignity | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{compliment := F9} -> v_type_int32(F9, [compliment | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{health := F10} -> v_type_int32(F10, [health | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{mana := F11} -> v_type_int32(F11, [mana | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{name := F12} -> v_type_string(F12, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{hero_experience := F13} -> v_type_int32(F13, [hero_experience | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{hero_level := F14} -> v_type_int32(F14, [hero_level | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{job_experience := F15} -> v_type_int32(F15, [job_experience | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{job_level := F16} -> v_type_int32(F16, [job_level | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{experience := F17} -> v_type_int32(F17, [experience | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{level := F18} -> v_type_int32(F18, [level | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (class) -> ok;
                      (sex) -> ok;
                      (hair_color) -> ok;
                      (hair_style) -> ok;
                      (faction) -> ok;
                      (reputation) -> ok;
                      (dignity) -> ok;
                      (compliment) -> ok;
                      (health) -> ok;
                      (mana) -> ok;
                      (name) -> ok;
                      (hero_experience) -> ok;
                      (hero_level) -> ok;
                      (job_experience) -> ok;
                      (job_level) -> ok;
                      (experience) -> ok;
                      (level) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_character(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), character}, M, Path);
v_msg_character(X, Path, _TrUserData) -> mk_type_error({expected_msg, character}, X, Path).

-compile({nowarn_unused_function,v_msg_character_add_request/3}).
-dialyzer({nowarn_function,v_msg_character_add_request/3}).
v_msg_character_add_request(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{name := F2} -> v_type_string(F2, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{class := F3} -> 'v_enum_io.elkia.world.v1alpha1.CharacterClass'(F3, [class | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{sex := F4} -> 'v_enum_io.elkia.world.v1alpha1.Sex'(F4, [sex | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{hair_color := F5} -> 'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'(F5, [hair_color | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{hair_style := F6} -> 'v_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(F6, [hair_style | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (name) -> ok;
                      (class) -> ok;
                      (sex) -> ok;
                      (hair_color) -> ok;
                      (hair_style) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_character_add_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), character_add_request}, M, Path);
v_msg_character_add_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, character_add_request}, X, Path).

-compile({nowarn_unused_function,v_msg_character_add_response/3}).
-dialyzer({nowarn_function,v_msg_character_add_response/3}).
v_msg_character_add_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_character_add_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), character_add_response}, M, Path);
v_msg_character_add_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, character_add_response}, X, Path).

-compile({nowarn_unused_function,v_msg_character_remove_request/3}).
-dialyzer({nowarn_function,v_msg_character_remove_request/3}).
v_msg_character_remove_request(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_character_remove_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), character_remove_request}, M, Path);
v_msg_character_remove_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, character_remove_request}, X, Path).

-compile({nowarn_unused_function,v_msg_character_remove_response/3}).
-dialyzer({nowarn_function,v_msg_character_remove_response/3}).
v_msg_character_remove_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_character_remove_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), character_remove_response}, M, Path);
v_msg_character_remove_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, character_remove_response}, X, Path).

-compile({nowarn_unused_function,v_msg_character_update_request/3}).
-dialyzer({nowarn_function,v_msg_character_update_request/3}).
v_msg_character_update_request(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{world_id := F2} -> v_type_uint32(F2, [world_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{channel_id := F3} -> v_type_uint32(F3, [channel_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{name := F4} -> v_type_string(F4, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{address := F5} -> v_type_string(F5, [address | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{population := F6} -> v_type_uint32(F6, [population | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{capacity := F7} -> v_type_uint32(F7, [capacity | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (world_id) -> ok;
                      (channel_id) -> ok;
                      (name) -> ok;
                      (address) -> ok;
                      (population) -> ok;
                      (capacity) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_character_update_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), character_update_request}, M, Path);
v_msg_character_update_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, character_update_request}, X, Path).

-compile({nowarn_unused_function,v_msg_character_update_response/3}).
-dialyzer({nowarn_function,v_msg_character_update_response/3}).
v_msg_character_update_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_character_update_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), character_update_response}, M, Path);
v_msg_character_update_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, character_update_response}, X, Path).

-compile({nowarn_unused_function,v_msg_character_list_request/3}).
-dialyzer({nowarn_function,v_msg_character_list_request/3}).
v_msg_character_list_request(#{} = M, Path, TrUserData) ->
    case M of
        #{identity_id := F1} -> v_type_string(F1, [identity_id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (identity_id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_character_list_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), character_list_request}, M, Path);
v_msg_character_list_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, character_list_request}, X, Path).

-compile({nowarn_unused_function,v_msg_character_list_response/3}).
-dialyzer({nowarn_function,v_msg_character_list_response/3}).
v_msg_character_list_response(#{} = M, Path, TrUserData) ->
    case M of
        #{characters := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_character(Elem, [characters | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, character}}, F1, [characters | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (characters) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_character_list_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), character_list_response}, M, Path);
v_msg_character_list_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, character_list_response}, X, Path).

-compile({nowarn_unused_function,'v_enum_io.elkia.world.v1alpha1.CharacterClass'/3}).
-dialyzer({nowarn_function,'v_enum_io.elkia.world.v1alpha1.CharacterClass'/3}).
'v_enum_io.elkia.world.v1alpha1.CharacterClass'('ADVENTURER', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterClass'('SORCERER', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterClass'('ARCHER', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterClass'('SWORDMAN', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterClass'('MARTIAL_ARTIST', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterClass'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterClass'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'io.elkia.world.v1alpha1.CharacterClass'}, X, Path).

-compile({nowarn_unused_function,'v_enum_io.elkia.world.v1alpha1.Sex'/3}).
-dialyzer({nowarn_function,'v_enum_io.elkia.world.v1alpha1.Sex'/3}).
'v_enum_io.elkia.world.v1alpha1.Sex'('Male', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.Sex'('Female', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.Sex'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_io.elkia.world.v1alpha1.Sex'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'io.elkia.world.v1alpha1.Sex'}, X, Path).

-compile({nowarn_unused_function,'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'/3}).
-dialyzer({nowarn_function,'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'/3}).
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'('MauveTaupe', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Cerise', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'('SanMarino', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Affair', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Dixie', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Raven', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Killarney', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Nutmeg', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Saddle', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'('Red', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairColor'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'io.elkia.world.v1alpha1.CharacterHairColor'}, X, Path).

-compile({nowarn_unused_function,'v_enum_io.elkia.world.v1alpha1.CharacterHairStyle'/3}).
-dialyzer({nowarn_function,'v_enum_io.elkia.world.v1alpha1.CharacterHairStyle'/3}).
'v_enum_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleA', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleB', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleC', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleD', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairStyle'('Shaved', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_io.elkia.world.v1alpha1.CharacterHairStyle'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'io.elkia.world.v1alpha1.CharacterHairStyle'}, X, Path).

-compile({nowarn_unused_function,'v_enum_io.elkia.world.v1alpha1.Faction'/3}).
-dialyzer({nowarn_function,'v_enum_io.elkia.world.v1alpha1.Faction'/3}).
'v_enum_io.elkia.world.v1alpha1.Faction'('Neutral', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.Faction'('Angel', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.Faction'('Demon', _Path, _TrUserData) -> ok;
'v_enum_io.elkia.world.v1alpha1.Faction'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_io.elkia.world.v1alpha1.Faction'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'io.elkia.world.v1alpha1.Faction'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'io.elkia.world.v1alpha1.CharacterClass'}, [{'ADVENTURER', 0, []}, {'SORCERER', 1, []}, {'ARCHER', 2, []}, {'SWORDMAN', 3, []}, {'MARTIAL_ARTIST', 4, []}]},
     {{enum, 'io.elkia.world.v1alpha1.Sex'}, [{'Male', 0, []}, {'Female', 1, []}]},
     {{enum, 'io.elkia.world.v1alpha1.CharacterHairColor'},
      [{'MauveTaupe', 0, []}, {'Cerise', 1, []}, {'SanMarino', 2, []}, {'Affair', 3, []}, {'Dixie', 4, []}, {'Raven', 5, []}, {'Killarney', 6, []}, {'Nutmeg', 7, []}, {'Saddle', 8, []}, {'Red', 9, []}]},
     {{enum, 'io.elkia.world.v1alpha1.CharacterHairStyle'}, [{'StyleA', 0, []}, {'StyleB', 1, []}, {'StyleC', 2, []}, {'StyleD', 3, []}, {'Shaved', 4, []}]},
     {{enum, 'io.elkia.world.v1alpha1.Faction'}, [{'Neutral', 0, []}, {'Angel', 1, []}, {'Demon', 2, []}]},
     {{msg, character},
      [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
       #{name => class, fnum => 2, rnum => 3, type => {enum, 'io.elkia.world.v1alpha1.CharacterClass'}, occurrence => defaulty, opts => []},
       #{name => sex, fnum => 3, rnum => 4, type => {enum, 'io.elkia.world.v1alpha1.Sex'}, occurrence => defaulty, opts => []},
       #{name => hair_color, fnum => 4, rnum => 5, type => {enum, 'io.elkia.world.v1alpha1.CharacterHairColor'}, occurrence => defaulty, opts => []},
       #{name => hair_style, fnum => 5, rnum => 6, type => {enum, 'io.elkia.world.v1alpha1.CharacterHairStyle'}, occurrence => defaulty, opts => []},
       #{name => faction, fnum => 6, rnum => 7, type => {enum, 'io.elkia.world.v1alpha1.Faction'}, occurrence => defaulty, opts => []},
       #{name => reputation, fnum => 7, rnum => 8, type => int32, occurrence => defaulty, opts => []},
       #{name => dignity, fnum => 8, rnum => 9, type => int32, occurrence => defaulty, opts => []},
       #{name => compliment, fnum => 9, rnum => 10, type => int32, occurrence => defaulty, opts => []},
       #{name => health, fnum => 10, rnum => 11, type => int32, occurrence => defaulty, opts => []},
       #{name => mana, fnum => 11, rnum => 12, type => int32, occurrence => defaulty, opts => []},
       #{name => name, fnum => 12, rnum => 13, type => string, occurrence => defaulty, opts => []},
       #{name => hero_experience, fnum => 13, rnum => 14, type => int32, occurrence => defaulty, opts => []},
       #{name => hero_level, fnum => 14, rnum => 15, type => int32, occurrence => defaulty, opts => []},
       #{name => job_experience, fnum => 15, rnum => 16, type => int32, occurrence => defaulty, opts => []},
       #{name => job_level, fnum => 16, rnum => 17, type => int32, occurrence => defaulty, opts => []},
       #{name => experience, fnum => 17, rnum => 18, type => int32, occurrence => defaulty, opts => []},
       #{name => level, fnum => 18, rnum => 19, type => int32, occurrence => defaulty, opts => []}]},
     {{msg, character_add_request},
      [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
       #{name => name, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []},
       #{name => class, fnum => 3, rnum => 4, type => {enum, 'io.elkia.world.v1alpha1.CharacterClass'}, occurrence => defaulty, opts => []},
       #{name => sex, fnum => 4, rnum => 5, type => {enum, 'io.elkia.world.v1alpha1.Sex'}, occurrence => defaulty, opts => []},
       #{name => hair_color, fnum => 5, rnum => 6, type => {enum, 'io.elkia.world.v1alpha1.CharacterHairColor'}, occurrence => defaulty, opts => []},
       #{name => hair_style, fnum => 6, rnum => 7, type => {enum, 'io.elkia.world.v1alpha1.CharacterHairStyle'}, occurrence => defaulty, opts => []}]},
     {{msg, character_add_response}, []},
     {{msg, character_remove_request}, [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}]},
     {{msg, character_remove_response}, []},
     {{msg, character_update_request},
      [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
       #{name => world_id, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []},
       #{name => channel_id, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
       #{name => name, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
       #{name => address, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []},
       #{name => population, fnum => 6, rnum => 7, type => uint32, occurrence => optional, opts => []},
       #{name => capacity, fnum => 7, rnum => 8, type => uint32, occurrence => optional, opts => []}]},
     {{msg, character_update_response}, []},
     {{msg, character_list_request}, [#{name => identity_id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}]},
     {{msg, character_list_response}, [#{name => characters, fnum => 1, rnum => 2, type => {msg, character}, occurrence => repeated, opts => []}]}].


get_msg_names() -> [character, character_add_request, character_add_response, character_remove_request, character_remove_response, character_update_request, character_update_response, character_list_request, character_list_response].


get_group_names() -> [].


get_msg_or_group_names() -> [character, character_add_request, character_add_response, character_remove_request, character_remove_response, character_update_request, character_update_response, character_list_request, character_list_response].


get_enum_names() -> ['io.elkia.world.v1alpha1.CharacterClass', 'io.elkia.world.v1alpha1.Sex', 'io.elkia.world.v1alpha1.CharacterHairColor', 'io.elkia.world.v1alpha1.CharacterHairStyle', 'io.elkia.world.v1alpha1.Faction'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(character) ->
    [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
     #{name => class, fnum => 2, rnum => 3, type => {enum, 'io.elkia.world.v1alpha1.CharacterClass'}, occurrence => defaulty, opts => []},
     #{name => sex, fnum => 3, rnum => 4, type => {enum, 'io.elkia.world.v1alpha1.Sex'}, occurrence => defaulty, opts => []},
     #{name => hair_color, fnum => 4, rnum => 5, type => {enum, 'io.elkia.world.v1alpha1.CharacterHairColor'}, occurrence => defaulty, opts => []},
     #{name => hair_style, fnum => 5, rnum => 6, type => {enum, 'io.elkia.world.v1alpha1.CharacterHairStyle'}, occurrence => defaulty, opts => []},
     #{name => faction, fnum => 6, rnum => 7, type => {enum, 'io.elkia.world.v1alpha1.Faction'}, occurrence => defaulty, opts => []},
     #{name => reputation, fnum => 7, rnum => 8, type => int32, occurrence => defaulty, opts => []},
     #{name => dignity, fnum => 8, rnum => 9, type => int32, occurrence => defaulty, opts => []},
     #{name => compliment, fnum => 9, rnum => 10, type => int32, occurrence => defaulty, opts => []},
     #{name => health, fnum => 10, rnum => 11, type => int32, occurrence => defaulty, opts => []},
     #{name => mana, fnum => 11, rnum => 12, type => int32, occurrence => defaulty, opts => []},
     #{name => name, fnum => 12, rnum => 13, type => string, occurrence => defaulty, opts => []},
     #{name => hero_experience, fnum => 13, rnum => 14, type => int32, occurrence => defaulty, opts => []},
     #{name => hero_level, fnum => 14, rnum => 15, type => int32, occurrence => defaulty, opts => []},
     #{name => job_experience, fnum => 15, rnum => 16, type => int32, occurrence => defaulty, opts => []},
     #{name => job_level, fnum => 16, rnum => 17, type => int32, occurrence => defaulty, opts => []},
     #{name => experience, fnum => 17, rnum => 18, type => int32, occurrence => defaulty, opts => []},
     #{name => level, fnum => 18, rnum => 19, type => int32, occurrence => defaulty, opts => []}];
find_msg_def(character_add_request) ->
    [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
     #{name => name, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []},
     #{name => class, fnum => 3, rnum => 4, type => {enum, 'io.elkia.world.v1alpha1.CharacterClass'}, occurrence => defaulty, opts => []},
     #{name => sex, fnum => 4, rnum => 5, type => {enum, 'io.elkia.world.v1alpha1.Sex'}, occurrence => defaulty, opts => []},
     #{name => hair_color, fnum => 5, rnum => 6, type => {enum, 'io.elkia.world.v1alpha1.CharacterHairColor'}, occurrence => defaulty, opts => []},
     #{name => hair_style, fnum => 6, rnum => 7, type => {enum, 'io.elkia.world.v1alpha1.CharacterHairStyle'}, occurrence => defaulty, opts => []}];
find_msg_def(character_add_response) -> [];
find_msg_def(character_remove_request) -> [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}];
find_msg_def(character_remove_response) -> [];
find_msg_def(character_update_request) ->
    [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
     #{name => world_id, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []},
     #{name => channel_id, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
     #{name => name, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
     #{name => address, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []},
     #{name => population, fnum => 6, rnum => 7, type => uint32, occurrence => optional, opts => []},
     #{name => capacity, fnum => 7, rnum => 8, type => uint32, occurrence => optional, opts => []}];
find_msg_def(character_update_response) -> [];
find_msg_def(character_list_request) -> [#{name => identity_id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}];
find_msg_def(character_list_response) -> [#{name => characters, fnum => 1, rnum => 2, type => {msg, character}, occurrence => repeated, opts => []}];
find_msg_def(_) -> error.


find_enum_def('io.elkia.world.v1alpha1.CharacterClass') -> [{'ADVENTURER', 0, []}, {'SORCERER', 1, []}, {'ARCHER', 2, []}, {'SWORDMAN', 3, []}, {'MARTIAL_ARTIST', 4, []}];
find_enum_def('io.elkia.world.v1alpha1.Sex') -> [{'Male', 0, []}, {'Female', 1, []}];
find_enum_def('io.elkia.world.v1alpha1.CharacterHairColor') ->
    [{'MauveTaupe', 0, []}, {'Cerise', 1, []}, {'SanMarino', 2, []}, {'Affair', 3, []}, {'Dixie', 4, []}, {'Raven', 5, []}, {'Killarney', 6, []}, {'Nutmeg', 7, []}, {'Saddle', 8, []}, {'Red', 9, []}];
find_enum_def('io.elkia.world.v1alpha1.CharacterHairStyle') -> [{'StyleA', 0, []}, {'StyleB', 1, []}, {'StyleC', 2, []}, {'StyleD', 3, []}, {'Shaved', 4, []}];
find_enum_def('io.elkia.world.v1alpha1.Faction') -> [{'Neutral', 0, []}, {'Angel', 1, []}, {'Demon', 2, []}];
find_enum_def(_) -> error.


enum_symbol_by_value('io.elkia.world.v1alpha1.CharacterClass', Value) -> 'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterClass'(Value);
enum_symbol_by_value('io.elkia.world.v1alpha1.Sex', Value) -> 'enum_symbol_by_value_io.elkia.world.v1alpha1.Sex'(Value);
enum_symbol_by_value('io.elkia.world.v1alpha1.CharacterHairColor', Value) -> 'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'(Value);
enum_symbol_by_value('io.elkia.world.v1alpha1.CharacterHairStyle', Value) -> 'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairStyle'(Value);
enum_symbol_by_value('io.elkia.world.v1alpha1.Faction', Value) -> 'enum_symbol_by_value_io.elkia.world.v1alpha1.Faction'(Value).


enum_value_by_symbol('io.elkia.world.v1alpha1.CharacterClass', Sym) -> 'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterClass'(Sym);
enum_value_by_symbol('io.elkia.world.v1alpha1.Sex', Sym) -> 'enum_value_by_symbol_io.elkia.world.v1alpha1.Sex'(Sym);
enum_value_by_symbol('io.elkia.world.v1alpha1.CharacterHairColor', Sym) -> 'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'(Sym);
enum_value_by_symbol('io.elkia.world.v1alpha1.CharacterHairStyle', Sym) -> 'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairStyle'(Sym);
enum_value_by_symbol('io.elkia.world.v1alpha1.Faction', Sym) -> 'enum_value_by_symbol_io.elkia.world.v1alpha1.Faction'(Sym).


'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterClass'(0) -> 'ADVENTURER';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterClass'(1) -> 'SORCERER';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterClass'(2) -> 'ARCHER';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterClass'(3) -> 'SWORDMAN';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterClass'(4) -> 'MARTIAL_ARTIST'.


'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterClass'('ADVENTURER') -> 0;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterClass'('SORCERER') -> 1;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterClass'('ARCHER') -> 2;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterClass'('SWORDMAN') -> 3;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterClass'('MARTIAL_ARTIST') -> 4.

'enum_symbol_by_value_io.elkia.world.v1alpha1.Sex'(0) -> 'Male';
'enum_symbol_by_value_io.elkia.world.v1alpha1.Sex'(1) -> 'Female'.


'enum_value_by_symbol_io.elkia.world.v1alpha1.Sex'('Male') -> 0;
'enum_value_by_symbol_io.elkia.world.v1alpha1.Sex'('Female') -> 1.

'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'(0) -> 'MauveTaupe';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'(1) -> 'Cerise';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'(2) -> 'SanMarino';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'(3) -> 'Affair';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'(4) -> 'Dixie';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'(5) -> 'Raven';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'(6) -> 'Killarney';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'(7) -> 'Nutmeg';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'(8) -> 'Saddle';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairColor'(9) -> 'Red'.


'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'('MauveTaupe') -> 0;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'('Cerise') -> 1;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'('SanMarino') -> 2;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'('Affair') -> 3;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'('Dixie') -> 4;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'('Raven') -> 5;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'('Killarney') -> 6;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'('Nutmeg') -> 7;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'('Saddle') -> 8;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairColor'('Red') -> 9.

'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairStyle'(0) -> 'StyleA';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairStyle'(1) -> 'StyleB';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairStyle'(2) -> 'StyleC';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairStyle'(3) -> 'StyleD';
'enum_symbol_by_value_io.elkia.world.v1alpha1.CharacterHairStyle'(4) -> 'Shaved'.


'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleA') -> 0;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleB') -> 1;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleC') -> 2;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairStyle'('StyleD') -> 3;
'enum_value_by_symbol_io.elkia.world.v1alpha1.CharacterHairStyle'('Shaved') -> 4.

'enum_symbol_by_value_io.elkia.world.v1alpha1.Faction'(0) -> 'Neutral';
'enum_symbol_by_value_io.elkia.world.v1alpha1.Faction'(1) -> 'Angel';
'enum_symbol_by_value_io.elkia.world.v1alpha1.Faction'(2) -> 'Demon'.


'enum_value_by_symbol_io.elkia.world.v1alpha1.Faction'('Neutral') -> 0;
'enum_value_by_symbol_io.elkia.world.v1alpha1.Faction'('Angel') -> 1;
'enum_value_by_symbol_io.elkia.world.v1alpha1.Faction'('Demon') -> 2.


get_service_names() -> ['io.elkia.world.v1alpha1.Bridge'].


get_service_def('io.elkia.world.v1alpha1.Bridge') ->
    {{service, 'io.elkia.world.v1alpha1.Bridge'},
     [#{name => 'CharacterAdd', input => character_add_request, output => character_add_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'CharacterRemove', input => character_remove_request, output => character_remove_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'CharacterUpdate', input => character_update_request, output => character_update_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'CharacterList', input => character_list_request, output => character_list_response, input_stream => false, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('io.elkia.world.v1alpha1.Bridge') -> ['CharacterAdd', 'CharacterRemove', 'CharacterUpdate', 'CharacterList'];
get_rpc_names(_) -> error.


find_rpc_def('io.elkia.world.v1alpha1.Bridge', RpcName) -> 'find_rpc_def_io.elkia.world.v1alpha1.Bridge'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_io.elkia.world.v1alpha1.Bridge'('CharacterAdd') -> #{name => 'CharacterAdd', input => character_add_request, output => character_add_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.world.v1alpha1.Bridge'('CharacterRemove') -> #{name => 'CharacterRemove', input => character_remove_request, output => character_remove_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.world.v1alpha1.Bridge'('CharacterUpdate') -> #{name => 'CharacterUpdate', input => character_update_request, output => character_update_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.world.v1alpha1.Bridge'('CharacterList') -> #{name => 'CharacterList', input => character_list_request, output => character_list_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.world.v1alpha1.Bridge'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"io.elkia.world.v1alpha1.Bridge">>) -> 'io.elkia.world.v1alpha1.Bridge';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('io.elkia.world.v1alpha1.Bridge') -> <<"io.elkia.world.v1alpha1.Bridge">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"io.elkia.world.v1alpha1.Bridge">>, <<"CharacterAdd">>) -> {'io.elkia.world.v1alpha1.Bridge', 'CharacterAdd'};
fqbins_to_service_and_rpc_name(<<"io.elkia.world.v1alpha1.Bridge">>, <<"CharacterRemove">>) -> {'io.elkia.world.v1alpha1.Bridge', 'CharacterRemove'};
fqbins_to_service_and_rpc_name(<<"io.elkia.world.v1alpha1.Bridge">>, <<"CharacterUpdate">>) -> {'io.elkia.world.v1alpha1.Bridge', 'CharacterUpdate'};
fqbins_to_service_and_rpc_name(<<"io.elkia.world.v1alpha1.Bridge">>, <<"CharacterList">>) -> {'io.elkia.world.v1alpha1.Bridge', 'CharacterList'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('io.elkia.world.v1alpha1.Bridge', 'CharacterAdd') -> {<<"io.elkia.world.v1alpha1.Bridge">>, <<"CharacterAdd">>};
service_and_rpc_name_to_fqbins('io.elkia.world.v1alpha1.Bridge', 'CharacterRemove') -> {<<"io.elkia.world.v1alpha1.Bridge">>, <<"CharacterRemove">>};
service_and_rpc_name_to_fqbins('io.elkia.world.v1alpha1.Bridge', 'CharacterUpdate') -> {<<"io.elkia.world.v1alpha1.Bridge">>, <<"CharacterUpdate">>};
service_and_rpc_name_to_fqbins('io.elkia.world.v1alpha1.Bridge', 'CharacterList') -> {<<"io.elkia.world.v1alpha1.Bridge">>, <<"CharacterList">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"io.elkia.world.v1alpha1.Character">>) -> character;
fqbin_to_msg_name(<<"io.elkia.world.v1alpha1.CharacterAddRequest">>) -> character_add_request;
fqbin_to_msg_name(<<"io.elkia.world.v1alpha1.CharacterAddResponse">>) -> character_add_response;
fqbin_to_msg_name(<<"io.elkia.world.v1alpha1.CharacterRemoveRequest">>) -> character_remove_request;
fqbin_to_msg_name(<<"io.elkia.world.v1alpha1.CharacterRemoveResponse">>) -> character_remove_response;
fqbin_to_msg_name(<<"io.elkia.world.v1alpha1.CharacterUpdateRequest">>) -> character_update_request;
fqbin_to_msg_name(<<"io.elkia.world.v1alpha1.CharacterUpdateResponse">>) -> character_update_response;
fqbin_to_msg_name(<<"io.elkia.world.v1alpha1.CharacterListRequest">>) -> character_list_request;
fqbin_to_msg_name(<<"io.elkia.world.v1alpha1.CharacterListResponse">>) -> character_list_response;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(character) -> <<"io.elkia.world.v1alpha1.Character">>;
msg_name_to_fqbin(character_add_request) -> <<"io.elkia.world.v1alpha1.CharacterAddRequest">>;
msg_name_to_fqbin(character_add_response) -> <<"io.elkia.world.v1alpha1.CharacterAddResponse">>;
msg_name_to_fqbin(character_remove_request) -> <<"io.elkia.world.v1alpha1.CharacterRemoveRequest">>;
msg_name_to_fqbin(character_remove_response) -> <<"io.elkia.world.v1alpha1.CharacterRemoveResponse">>;
msg_name_to_fqbin(character_update_request) -> <<"io.elkia.world.v1alpha1.CharacterUpdateRequest">>;
msg_name_to_fqbin(character_update_response) -> <<"io.elkia.world.v1alpha1.CharacterUpdateResponse">>;
msg_name_to_fqbin(character_list_request) -> <<"io.elkia.world.v1alpha1.CharacterListRequest">>;
msg_name_to_fqbin(character_list_response) -> <<"io.elkia.world.v1alpha1.CharacterListResponse">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"io.elkia.world.v1alpha1.CharacterClass">>) -> 'io.elkia.world.v1alpha1.CharacterClass';
fqbin_to_enum_name(<<"io.elkia.world.v1alpha1.Sex">>) -> 'io.elkia.world.v1alpha1.Sex';
fqbin_to_enum_name(<<"io.elkia.world.v1alpha1.CharacterHairColor">>) -> 'io.elkia.world.v1alpha1.CharacterHairColor';
fqbin_to_enum_name(<<"io.elkia.world.v1alpha1.CharacterHairStyle">>) -> 'io.elkia.world.v1alpha1.CharacterHairStyle';
fqbin_to_enum_name(<<"io.elkia.world.v1alpha1.Faction">>) -> 'io.elkia.world.v1alpha1.Faction';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('io.elkia.world.v1alpha1.CharacterClass') -> <<"io.elkia.world.v1alpha1.CharacterClass">>;
enum_name_to_fqbin('io.elkia.world.v1alpha1.Sex') -> <<"io.elkia.world.v1alpha1.Sex">>;
enum_name_to_fqbin('io.elkia.world.v1alpha1.CharacterHairColor') -> <<"io.elkia.world.v1alpha1.CharacterHairColor">>;
enum_name_to_fqbin('io.elkia.world.v1alpha1.CharacterHairStyle') -> <<"io.elkia.world.v1alpha1.CharacterHairStyle">>;
enum_name_to_fqbin('io.elkia.world.v1alpha1.Faction') -> <<"io.elkia.world.v1alpha1.Faction">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'io.elkia.world.v1alpha1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "world.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["world.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["world"].


get_msg_containment("world") -> [character, character_add_request, character_add_response, character_list_request, character_list_response, character_remove_request, character_remove_response, character_update_request, character_update_response];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("world") -> 'io.elkia.world.v1alpha1';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("world") -> ['io.elkia.world.v1alpha1.Bridge'];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("world") -> [{'io.elkia.world.v1alpha1.Bridge', 'CharacterAdd'}, {'io.elkia.world.v1alpha1.Bridge', 'CharacterRemove'}, {'io.elkia.world.v1alpha1.Bridge', 'CharacterUpdate'}, {'io.elkia.world.v1alpha1.Bridge', 'CharacterList'}];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("world") -> ['io.elkia.world.v1alpha1.CharacterClass', 'io.elkia.world.v1alpha1.CharacterHairColor', 'io.elkia.world.v1alpha1.CharacterHairStyle', 'io.elkia.world.v1alpha1.Faction', 'io.elkia.world.v1alpha1.Sex'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"io.elkia.world.v1alpha1.Character">>) -> "world";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.world.v1alpha1.CharacterUpdateRequest">>) -> "world";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.world.v1alpha1.CharacterRemoveRequest">>) -> "world";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.world.v1alpha1.CharacterListRequest">>) -> "world";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.world.v1alpha1.CharacterAddRequest">>) -> "world";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.world.v1alpha1.CharacterUpdateResponse">>) -> "world";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.world.v1alpha1.CharacterRemoveResponse">>) -> "world";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.world.v1alpha1.CharacterListResponse">>) -> "world";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.world.v1alpha1.CharacterAddResponse">>) -> "world";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"io.elkia.world.v1alpha1.Bridge">>) -> "world";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"io.elkia.world.v1alpha1.CharacterHairColor">>) -> "world";
get_proto_by_enum_name_as_fqbin(<<"io.elkia.world.v1alpha1.CharacterClass">>) -> "world";
get_proto_by_enum_name_as_fqbin(<<"io.elkia.world.v1alpha1.CharacterHairStyle">>) -> "world";
get_proto_by_enum_name_as_fqbin(<<"io.elkia.world.v1alpha1.Sex">>) -> "world";
get_proto_by_enum_name_as_fqbin(<<"io.elkia.world.v1alpha1.Faction">>) -> "world";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"io.elkia.world.v1alpha1">>) -> ["world"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.19.7".

gpb_version_as_list() ->
    [4,19,7].

gpb_version_source() ->
    "file".
