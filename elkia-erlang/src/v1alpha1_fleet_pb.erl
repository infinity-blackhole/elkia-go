%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.19.7
%% Version source: file
-module(v1alpha1_fleet_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).


%% enumerated types

-export_type([]).

%% message types
-type member() ::
      #{id                      => unicode:chardata(), % = 1, optional
        world_id                => non_neg_integer(), % = 2, optional, 32 bits
        channel_id              => non_neg_integer(), % = 3, optional, 32 bits
        name                    => unicode:chardata(), % = 4, optional
        address                 => unicode:chardata(), % = 5, optional
        population              => non_neg_integer(), % = 6, optional, 32 bits
        capacity                => non_neg_integer() % = 7, optional, 32 bits
       }.

-type member_add_request() ::
      #{id                      => unicode:chardata(), % = 1, optional
        world_id                => non_neg_integer(), % = 2, optional, 32 bits
        channel_id              => non_neg_integer(), % = 3, optional, 32 bits
        name                    => unicode:chardata(), % = 4, optional
        address                 => unicode:chardata(), % = 5, optional
        population              => non_neg_integer(), % = 6, optional, 32 bits
        capacity                => non_neg_integer() % = 7, optional, 32 bits
       }.

-type member_add_response() ::
      #{
       }.

-type member_remove_request() ::
      #{id                      => unicode:chardata() % = 1, optional
       }.

-type member_remove_response() ::
      #{
       }.

-type member_update_request() ::
      #{id                      => unicode:chardata(), % = 1, optional
        world_id                => non_neg_integer(), % = 2, optional, 32 bits
        channel_id              => non_neg_integer(), % = 3, optional, 32 bits
        name                    => unicode:chardata(), % = 4, optional
        address                 => unicode:chardata(), % = 5, optional
        population              => non_neg_integer(), % = 6, optional, 32 bits
        capacity                => non_neg_integer() % = 7, optional, 32 bits
       }.

-type member_update_response() ::
      #{
       }.

-type member_list_request() ::
      #{
       }.

-type member_list_response() ::
      #{members                 => [member()]       % = 1, repeated
       }.

-type auth_login_request() ::
      #{identifier              => unicode:chardata(), % = 1, optional
        password                => unicode:chardata() % = 2, optional
       }.

-type auth_login_response() ::
      #{code                    => non_neg_integer() % = 1, optional, 32 bits
       }.

-type auth_refresh_login_request() ::
      #{identifier              => unicode:chardata(), % = 1, optional
        password                => unicode:chardata(), % = 2, optional
        token                   => unicode:chardata() % = 3, optional
       }.

-type auth_refresh_login_response() ::
      #{code                    => non_neg_integer() % = 1, optional, 32 bits
       }.

-type auth_handoff_request() ::
      #{code                    => non_neg_integer(), % = 1, optional, 32 bits
        identifier              => unicode:chardata(), % = 2, optional
        password                => unicode:chardata() % = 3, optional
       }.

-type auth_handoff_response() ::
      #{
       }.

-type auth_logout_request() ::
      #{code                    => non_neg_integer() % = 1, optional, 32 bits
       }.

-type auth_logout_response() ::
      #{
       }.

-type session() ::
      #{id                      => unicode:chardata(), % = 1, optional
        token                   => unicode:chardata() % = 2, optional
       }.

-type session_get_request() ::
      #{code                    => non_neg_integer() % = 1, optional, 32 bits
       }.

-type session_get_response() ::
      #{session                 => session()        % = 1, optional
       }.

-type session_put_request() ::
      #{session                 => session()        % = 1, optional
       }.

-type session_put_response() ::
      #{code                    => non_neg_integer() % = 1, optional, 32 bits
       }.

-type session_delete_request() ::
      #{code                    => non_neg_integer() % = 1, optional, 32 bits
       }.

-type session_delete_response() ::
      #{
       }.

-export_type(['member'/0, 'member_add_request'/0, 'member_add_response'/0, 'member_remove_request'/0, 'member_remove_response'/0, 'member_update_request'/0, 'member_update_response'/0, 'member_list_request'/0, 'member_list_response'/0, 'auth_login_request'/0, 'auth_login_response'/0, 'auth_refresh_login_request'/0, 'auth_refresh_login_response'/0, 'auth_handoff_request'/0, 'auth_handoff_response'/0, 'auth_logout_request'/0, 'auth_logout_response'/0, 'session'/0, 'session_get_request'/0, 'session_get_response'/0, 'session_put_request'/0, 'session_put_response'/0, 'session_delete_request'/0, 'session_delete_response'/0]).
-type '$msg_name'() :: member | member_add_request | member_add_response | member_remove_request | member_remove_response | member_update_request | member_update_response | member_list_request | member_list_response | auth_login_request | auth_login_response | auth_refresh_login_request | auth_refresh_login_response | auth_handoff_request | auth_handoff_response | auth_logout_request | auth_logout_response | session | session_get_request | session_get_response | session_put_request | session_put_response | session_delete_request | session_delete_response.
-type '$msg'() :: member() | member_add_request() | member_add_response() | member_remove_request() | member_remove_response() | member_update_request() | member_update_response() | member_list_request() | member_list_response() | auth_login_request() | auth_login_response() | auth_refresh_login_request() | auth_refresh_login_response() | auth_handoff_request() | auth_handoff_response() | auth_logout_request() | auth_logout_response() | session() | session_get_request() | session_get_response() | session_put_request() | session_put_response() | session_delete_request() | session_delete_response().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        member -> encode_msg_member(id(Msg, TrUserData), TrUserData);
        member_add_request -> encode_msg_member_add_request(id(Msg, TrUserData), TrUserData);
        member_add_response -> encode_msg_member_add_response(id(Msg, TrUserData), TrUserData);
        member_remove_request -> encode_msg_member_remove_request(id(Msg, TrUserData), TrUserData);
        member_remove_response -> encode_msg_member_remove_response(id(Msg, TrUserData), TrUserData);
        member_update_request -> encode_msg_member_update_request(id(Msg, TrUserData), TrUserData);
        member_update_response -> encode_msg_member_update_response(id(Msg, TrUserData), TrUserData);
        member_list_request -> encode_msg_member_list_request(id(Msg, TrUserData), TrUserData);
        member_list_response -> encode_msg_member_list_response(id(Msg, TrUserData), TrUserData);
        auth_login_request -> encode_msg_auth_login_request(id(Msg, TrUserData), TrUserData);
        auth_login_response -> encode_msg_auth_login_response(id(Msg, TrUserData), TrUserData);
        auth_refresh_login_request -> encode_msg_auth_refresh_login_request(id(Msg, TrUserData), TrUserData);
        auth_refresh_login_response -> encode_msg_auth_refresh_login_response(id(Msg, TrUserData), TrUserData);
        auth_handoff_request -> encode_msg_auth_handoff_request(id(Msg, TrUserData), TrUserData);
        auth_handoff_response -> encode_msg_auth_handoff_response(id(Msg, TrUserData), TrUserData);
        auth_logout_request -> encode_msg_auth_logout_request(id(Msg, TrUserData), TrUserData);
        auth_logout_response -> encode_msg_auth_logout_response(id(Msg, TrUserData), TrUserData);
        session -> encode_msg_session(id(Msg, TrUserData), TrUserData);
        session_get_request -> encode_msg_session_get_request(id(Msg, TrUserData), TrUserData);
        session_get_response -> encode_msg_session_get_response(id(Msg, TrUserData), TrUserData);
        session_put_request -> encode_msg_session_put_request(id(Msg, TrUserData), TrUserData);
        session_put_response -> encode_msg_session_put_response(id(Msg, TrUserData), TrUserData);
        session_delete_request -> encode_msg_session_delete_request(id(Msg, TrUserData), TrUserData);
        session_delete_response -> encode_msg_session_delete_response(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_member(Msg, TrUserData) -> encode_msg_member(Msg, <<>>, TrUserData).


encode_msg_member(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{world_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{channel_id := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{name := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{address := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     case is_empty_string(TrF5) of
                         true -> B4;
                         false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    B6 = case M of
             #{population := F6} ->
                 begin
                     TrF6 = id(F6, TrUserData),
                     if TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
                     end
                 end;
             _ -> B5
         end,
    case M of
        #{capacity := F7} ->
            begin
                TrF7 = id(F7, TrUserData),
                if TrF7 =:= 0 -> B6;
                   true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
                end
            end;
        _ -> B6
    end.

encode_msg_member_add_request(Msg, TrUserData) -> encode_msg_member_add_request(Msg, <<>>, TrUserData).


encode_msg_member_add_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{world_id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{channel_id := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{name := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false -> e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{address := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     case is_empty_string(TrF5) of
                         true -> B4;
                         false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    B6 = case M of
             #{population := F6} ->
                 begin
                     TrF6 = id(F6, TrUserData),
                     if TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
                     end
                 end;
             _ -> B5
         end,
    case M of
        #{capacity := F7} ->
            begin
                TrF7 = id(F7, TrUserData),
                if TrF7 =:= 0 -> B6;
                   true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
                end
            end;
        _ -> B6
    end.

encode_msg_member_add_response(_Msg, _TrUserData) -> <<>>.

encode_msg_member_remove_request(Msg, TrUserData) -> encode_msg_member_remove_request(Msg, <<>>, TrUserData).


encode_msg_member_remove_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{id := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_member_remove_response(_Msg, _TrUserData) -> <<>>.

encode_msg_member_update_request(Msg, TrUserData) -> encode_msg_member_update_request(Msg, <<>>, TrUserData).


encode_msg_member_update_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{world_id := F2} -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end;
             _ -> B1
         end,
    B3 = case M of
             #{channel_id := F3} -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end;
             _ -> B2
         end,
    B4 = case M of
             #{name := F4} -> begin TrF4 = id(F4, TrUserData), e_type_string(TrF4, <<B3/binary, 34>>, TrUserData) end;
             _ -> B3
         end,
    B5 = case M of
             #{address := F5} -> begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 42>>, TrUserData) end;
             _ -> B4
         end,
    B6 = case M of
             #{population := F6} -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end;
             _ -> B5
         end,
    case M of
        #{capacity := F7} -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end;
        _ -> B6
    end.

encode_msg_member_update_response(_Msg, _TrUserData) -> <<>>.

encode_msg_member_list_request(_Msg, _TrUserData) -> <<>>.

encode_msg_member_list_response(Msg, TrUserData) -> encode_msg_member_list_response(Msg, <<>>, TrUserData).


encode_msg_member_list_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{members := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_member_list_response_members(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_auth_login_request(Msg, TrUserData) -> encode_msg_auth_login_request(Msg, <<>>, TrUserData).


encode_msg_auth_login_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{identifier := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{password := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_auth_login_response(Msg, TrUserData) -> encode_msg_auth_login_response(Msg, <<>>, TrUserData).


encode_msg_auth_login_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{code := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_auth_refresh_login_request(Msg, TrUserData) -> encode_msg_auth_refresh_login_request(Msg, <<>>, TrUserData).


encode_msg_auth_refresh_login_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{identifier := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{password := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{token := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case is_empty_string(TrF3) of
                    true -> B2;
                    false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_auth_refresh_login_response(Msg, TrUserData) -> encode_msg_auth_refresh_login_response(Msg, <<>>, TrUserData).


encode_msg_auth_refresh_login_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{code := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_auth_handoff_request(Msg, TrUserData) -> encode_msg_auth_handoff_request(Msg, <<>>, TrUserData).


encode_msg_auth_handoff_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{code := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{identifier := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{password := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case is_empty_string(TrF3) of
                    true -> B2;
                    false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_auth_handoff_response(_Msg, _TrUserData) -> <<>>.

encode_msg_auth_logout_request(Msg, TrUserData) -> encode_msg_auth_logout_request(Msg, <<>>, TrUserData).


encode_msg_auth_logout_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{code := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_auth_logout_response(_Msg, _TrUserData) -> <<>>.

encode_msg_session(Msg, TrUserData) -> encode_msg_session(Msg, <<>>, TrUserData).


encode_msg_session(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{id := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{token := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_session_get_request(Msg, TrUserData) -> encode_msg_session_get_request(Msg, <<>>, TrUserData).


encode_msg_session_get_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{code := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_session_get_response(Msg, TrUserData) -> encode_msg_session_get_response(Msg, <<>>, TrUserData).


encode_msg_session_get_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{session := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true -> e_mfield_session_get_response_session(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_session_put_request(Msg, TrUserData) -> encode_msg_session_put_request(Msg, <<>>, TrUserData).


encode_msg_session_put_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{session := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true -> e_mfield_session_put_request_session(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_session_put_response(Msg, TrUserData) -> encode_msg_session_put_response(Msg, <<>>, TrUserData).


encode_msg_session_put_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{code := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_session_delete_request(Msg, TrUserData) -> encode_msg_session_delete_request(Msg, <<>>, TrUserData).


encode_msg_session_delete_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{code := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_session_delete_response(_Msg, _TrUserData) -> <<>>.

e_mfield_member_list_response_members(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_member(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_member_list_response_members([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_member_list_response_members(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_member_list_response_members(Rest, Bin3, TrUserData);
e_field_member_list_response_members([], Bin, _TrUserData) -> Bin.

e_mfield_session_get_response_session(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_session(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_session_put_request_session(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_session(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(member, Bin, TrUserData) -> id(decode_msg_member(Bin, TrUserData), TrUserData);
decode_msg_2_doit(member_add_request, Bin, TrUserData) -> id(decode_msg_member_add_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(member_add_response, Bin, TrUserData) -> id(decode_msg_member_add_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(member_remove_request, Bin, TrUserData) -> id(decode_msg_member_remove_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(member_remove_response, Bin, TrUserData) -> id(decode_msg_member_remove_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(member_update_request, Bin, TrUserData) -> id(decode_msg_member_update_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(member_update_response, Bin, TrUserData) -> id(decode_msg_member_update_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(member_list_request, Bin, TrUserData) -> id(decode_msg_member_list_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(member_list_response, Bin, TrUserData) -> id(decode_msg_member_list_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_login_request, Bin, TrUserData) -> id(decode_msg_auth_login_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_login_response, Bin, TrUserData) -> id(decode_msg_auth_login_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_refresh_login_request, Bin, TrUserData) -> id(decode_msg_auth_refresh_login_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_refresh_login_response, Bin, TrUserData) -> id(decode_msg_auth_refresh_login_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_handoff_request, Bin, TrUserData) -> id(decode_msg_auth_handoff_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_handoff_response, Bin, TrUserData) -> id(decode_msg_auth_handoff_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_logout_request, Bin, TrUserData) -> id(decode_msg_auth_logout_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(auth_logout_response, Bin, TrUserData) -> id(decode_msg_auth_logout_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(session, Bin, TrUserData) -> id(decode_msg_session(Bin, TrUserData), TrUserData);
decode_msg_2_doit(session_get_request, Bin, TrUserData) -> id(decode_msg_session_get_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(session_get_response, Bin, TrUserData) -> id(decode_msg_session_get_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(session_put_request, Bin, TrUserData) -> id(decode_msg_session_put_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(session_put_response, Bin, TrUserData) -> id(decode_msg_session_put_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(session_delete_request, Bin, TrUserData) -> id(decode_msg_session_delete_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(session_delete_response, Bin, TrUserData) -> id(decode_msg_session_delete_response(Bin, TrUserData), TrUserData).



decode_msg_member(Bin, TrUserData) -> dfp_read_field_def_member(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_member(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_world_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_address(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_population(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_capacity(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #{id => F@_1, world_id => F@_2, channel_id => F@_3, name => F@_4, address => F@_5, population => F@_6, capacity => F@_7};
dfp_read_field_def_member(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dg_read_field_def_member(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_member(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 -> dg_read_field_def_member(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_member(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_member_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        16 -> d_field_member_world_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        24 -> d_field_member_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        34 -> d_field_member_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        42 -> d_field_member_address(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        48 -> d_field_member_population(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> d_field_member_capacity(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_member(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> skip_64_member(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> skip_length_delimited_member(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> skip_group_member(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> skip_32_member(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
dg_read_field_def_member(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #{id => F@_1, world_id => F@_2, channel_id => F@_3, name => F@_4, address => F@_5, population => F@_6, capacity => F@_7}.

d_field_member_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_member_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_member(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_member_world_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_member_world_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_world_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_member_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_member_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_member_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_member_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_member(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_member_address(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_member_address(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_address(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_member(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_member_population(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_member_population(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_population(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_member_capacity(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> d_field_member_capacity(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_capacity(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_member(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> skip_varint_member(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_member(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_member(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_member(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> skip_length_delimited_member(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_member(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_member(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_member(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_member(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_member(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_member(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_member(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_member(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_member_add_request(Bin, TrUserData) ->
    dfp_read_field_def_member_add_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), id(0, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_member_add_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_add_request_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_add_request(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_add_request_world_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_add_request(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_add_request_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_add_request(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_add_request_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_add_request(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_add_request_address(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_add_request(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_add_request_population(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_add_request(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_add_request_capacity(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_add_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #{id => F@_1, world_id => F@_2, channel_id => F@_3, name => F@_4, address => F@_5, population => F@_6, capacity => F@_7};
dfp_read_field_def_member_add_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dg_read_field_def_member_add_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_member_add_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_member_add_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_member_add_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_member_add_request_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        16 -> d_field_member_add_request_world_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        24 -> d_field_member_add_request_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        34 -> d_field_member_add_request_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        42 -> d_field_member_add_request_address(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        48 -> d_field_member_add_request_population(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> d_field_member_add_request_capacity(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_member_add_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> skip_64_member_add_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> skip_length_delimited_member_add_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> skip_group_member_add_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> skip_32_member_add_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
dg_read_field_def_member_add_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #{id => F@_1, world_id => F@_2, channel_id => F@_3, name => F@_4, address => F@_5, population => F@_6, capacity => F@_7}.

d_field_member_add_request_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_add_request_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_add_request_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_member_add_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_member_add_request_world_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_add_request_world_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_add_request_world_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member_add_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_member_add_request_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_add_request_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_add_request_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member_add_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_member_add_request_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_add_request_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_add_request_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_member_add_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_member_add_request_address(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_add_request_address(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_add_request_address(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_member_add_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_member_add_request_population(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_add_request_population(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_add_request_population(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member_add_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_member_add_request_capacity(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_add_request_capacity(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_add_request_capacity(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member_add_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_member_add_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> skip_varint_member_add_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_member_add_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_member_add_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_member_add_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    skip_length_delimited_member_add_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_member_add_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_member_add_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_member_add_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_member_add_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_member_add_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_member_add_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_member_add_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_member_add_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_member_add_response(Bin, TrUserData) -> dfp_read_field_def_member_add_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_member_add_response(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_member_add_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_member_add_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_member_add_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_member_add_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_member_add_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_member_add_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_member_add_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_member_add_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_member_add_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_member_add_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_member_add_response(<<>>, 0, 0, _, _) -> #{}.

skip_varint_member_add_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_member_add_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_member_add_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_add_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_member_add_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_member_add_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_member_add_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_member_add_response(Rest2, 0, 0, F, TrUserData).

skip_group_member_add_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_member_add_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_member_add_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_add_response(Rest, Z1, Z2, F, TrUserData).

skip_64_member_add_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_add_response(Rest, Z1, Z2, F, TrUserData).

decode_msg_member_remove_request(Bin, TrUserData) -> dfp_read_field_def_member_remove_request(Bin, 0, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_member_remove_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_member_remove_request_id(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_member_remove_request(<<>>, 0, 0, _, F@_1, _) -> #{id => F@_1};
dfp_read_field_def_member_remove_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_member_remove_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_member_remove_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_member_remove_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_member_remove_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_member_remove_request_id(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_member_remove_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_member_remove_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_member_remove_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_member_remove_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_member_remove_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_member_remove_request(<<>>, 0, 0, _, F@_1, _) -> #{id => F@_1}.

d_field_member_remove_request_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_member_remove_request_id(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_member_remove_request_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_member_remove_request(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_member_remove_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_member_remove_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_member_remove_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_member_remove_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_member_remove_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_member_remove_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_member_remove_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_member_remove_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_member_remove_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_member_remove_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_member_remove_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_member_remove_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_member_remove_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_member_remove_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_member_remove_response(Bin, TrUserData) -> dfp_read_field_def_member_remove_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_member_remove_response(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_member_remove_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_member_remove_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_member_remove_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_member_remove_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_member_remove_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_member_remove_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_member_remove_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_member_remove_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_member_remove_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_member_remove_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_member_remove_response(<<>>, 0, 0, _, _) -> #{}.

skip_varint_member_remove_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_member_remove_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_member_remove_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_remove_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_member_remove_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_member_remove_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_member_remove_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_member_remove_response(Rest2, 0, 0, F, TrUserData).

skip_group_member_remove_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_member_remove_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_member_remove_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_remove_response(Rest, Z1, Z2, F, TrUserData).

skip_64_member_remove_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_remove_response(Rest, Z1, Z2, F, TrUserData).

decode_msg_member_update_request(Bin, TrUserData) ->
    dfp_read_field_def_member_update_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_member_update_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_update_request_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_update_request(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_update_request_world_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_update_request(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_update_request_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_update_request(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_update_request_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_update_request(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_update_request_address(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_update_request(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_update_request_population(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_update_request(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_member_update_request_capacity(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_member_update_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{id => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{world_id => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{channel_id => F@_3}
         end,
    S4 = if F@_4 == '$undef' -> S3;
            true -> S3#{name => F@_4}
         end,
    S5 = if F@_5 == '$undef' -> S4;
            true -> S4#{address => F@_5}
         end,
    S6 = if F@_6 == '$undef' -> S5;
            true -> S5#{population => F@_6}
         end,
    if F@_7 == '$undef' -> S6;
       true -> S6#{capacity => F@_7}
    end;
dfp_read_field_def_member_update_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dg_read_field_def_member_update_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_member_update_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_member_update_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_member_update_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_member_update_request_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        16 -> d_field_member_update_request_world_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        24 -> d_field_member_update_request_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        34 -> d_field_member_update_request_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        42 -> d_field_member_update_request_address(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        48 -> d_field_member_update_request_population(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> d_field_member_update_request_capacity(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_member_update_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> skip_64_member_update_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> skip_length_delimited_member_update_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> skip_group_member_update_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> skip_32_member_update_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
dg_read_field_def_member_update_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{id => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{world_id => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{channel_id => F@_3}
         end,
    S4 = if F@_4 == '$undef' -> S3;
            true -> S3#{name => F@_4}
         end,
    S5 = if F@_5 == '$undef' -> S4;
            true -> S4#{address => F@_5}
         end,
    S6 = if F@_6 == '$undef' -> S5;
            true -> S5#{population => F@_6}
         end,
    if F@_7 == '$undef' -> S6;
       true -> S6#{capacity => F@_7}
    end.

d_field_member_update_request_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_update_request_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_update_request_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_member_update_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_member_update_request_world_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_update_request_world_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_update_request_world_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member_update_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_member_update_request_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_update_request_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_update_request_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member_update_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_member_update_request_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_update_request_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_update_request_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_member_update_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_member_update_request_address(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_update_request_address(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_update_request_address(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_member_update_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_member_update_request_population(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_update_request_population(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_update_request_population(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member_update_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_member_update_request_capacity(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_member_update_request_capacity(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_member_update_request_capacity(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_member_update_request(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_member_update_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> skip_varint_member_update_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_member_update_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_member_update_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_member_update_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    skip_length_delimited_member_update_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_member_update_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_member_update_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_member_update_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_member_update_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_member_update_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_member_update_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_member_update_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_member_update_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_member_update_response(Bin, TrUserData) -> dfp_read_field_def_member_update_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_member_update_response(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_member_update_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_member_update_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_member_update_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_member_update_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_member_update_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_member_update_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_member_update_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_member_update_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_member_update_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_member_update_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_member_update_response(<<>>, 0, 0, _, _) -> #{}.

skip_varint_member_update_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_member_update_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_member_update_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_update_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_member_update_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_member_update_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_member_update_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_member_update_response(Rest2, 0, 0, F, TrUserData).

skip_group_member_update_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_member_update_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_member_update_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_update_response(Rest, Z1, Z2, F, TrUserData).

skip_64_member_update_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_update_response(Rest, Z1, Z2, F, TrUserData).

decode_msg_member_list_request(Bin, TrUserData) -> dfp_read_field_def_member_list_request(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_member_list_request(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_member_list_request(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_member_list_request(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_member_list_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_member_list_request(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_member_list_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_member_list_request(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_member_list_request(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_member_list_request(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_member_list_request(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_member_list_request(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_member_list_request(<<>>, 0, 0, _, _) -> #{}.

skip_varint_member_list_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_member_list_request(Rest, Z1, Z2, F, TrUserData);
skip_varint_member_list_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_list_request(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_member_list_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_member_list_request(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_member_list_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_member_list_request(Rest2, 0, 0, F, TrUserData).

skip_group_member_list_request(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_member_list_request(Rest, 0, Z2, FNum, TrUserData).

skip_32_member_list_request(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_list_request(Rest, Z1, Z2, F, TrUserData).

skip_64_member_list_request(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_member_list_request(Rest, Z1, Z2, F, TrUserData).

decode_msg_member_list_response(Bin, TrUserData) -> dfp_read_field_def_member_list_response(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_member_list_response(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_member_list_response_members(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_member_list_response(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{members => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_member_list_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_member_list_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_member_list_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_member_list_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_member_list_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_member_list_response_members(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_member_list_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_member_list_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_member_list_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_member_list_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_member_list_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_member_list_response(<<>>, 0, 0, _, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{members => lists_reverse(R1, TrUserData)}
    end.

d_field_member_list_response_members(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_member_list_response_members(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_member_list_response_members(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_member(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_member_list_response(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_member_list_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_member_list_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_member_list_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_member_list_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_member_list_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_member_list_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_member_list_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_member_list_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_member_list_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_member_list_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_member_list_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_member_list_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_member_list_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_member_list_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_auth_login_request(Bin, TrUserData) -> dfp_read_field_def_auth_login_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_auth_login_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_auth_login_request_identifier(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_auth_login_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_auth_login_request_password(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_auth_login_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{identifier => F@_1, password => F@_2};
dfp_read_field_def_auth_login_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_auth_login_request(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_auth_login_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_login_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_auth_login_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_auth_login_request_identifier(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_auth_login_request_password(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_auth_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_auth_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_auth_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_auth_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_auth_login_request(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{identifier => F@_1, password => F@_2}.

d_field_auth_login_request_identifier(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_auth_login_request_identifier(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_auth_login_request_identifier(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_login_request(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_auth_login_request_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_auth_login_request_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_auth_login_request_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_login_request(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_auth_login_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_auth_login_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_auth_login_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_auth_login_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_auth_login_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_auth_login_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_auth_login_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_login_request(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_auth_login_request(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_login_request(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_auth_login_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_auth_login_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_auth_login_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_auth_login_request(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_auth_login_response(Bin, TrUserData) -> dfp_read_field_def_auth_login_response(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_auth_login_response(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_auth_login_response_code(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_auth_login_response(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1};
dfp_read_field_def_auth_login_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_auth_login_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_auth_login_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_login_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_auth_login_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_auth_login_response_code(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_auth_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_auth_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_auth_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_auth_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_auth_login_response(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1}.

d_field_auth_login_response_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_auth_login_response_code(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_auth_login_response_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_auth_login_response(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_auth_login_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_auth_login_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_auth_login_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_login_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_auth_login_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_auth_login_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_auth_login_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_login_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_auth_login_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_login_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_auth_login_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_login_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_auth_login_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_login_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_auth_refresh_login_request(Bin, TrUserData) -> dfp_read_field_def_auth_refresh_login_request(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_auth_refresh_login_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_auth_refresh_login_request_identifier(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_auth_refresh_login_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_auth_refresh_login_request_password(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_auth_refresh_login_request(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_auth_refresh_login_request_token(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_auth_refresh_login_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{identifier => F@_1, password => F@_2, token => F@_3};
dfp_read_field_def_auth_refresh_login_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_auth_refresh_login_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_auth_refresh_login_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_refresh_login_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_auth_refresh_login_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_auth_refresh_login_request_identifier(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_auth_refresh_login_request_password(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_auth_refresh_login_request_token(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_refresh_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_auth_refresh_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_auth_refresh_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_auth_refresh_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_auth_refresh_login_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_auth_refresh_login_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{identifier => F@_1, password => F@_2, token => F@_3}.

d_field_auth_refresh_login_request_identifier(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_auth_refresh_login_request_identifier(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_auth_refresh_login_request_identifier(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_refresh_login_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_auth_refresh_login_request_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_auth_refresh_login_request_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_auth_refresh_login_request_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_refresh_login_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_auth_refresh_login_request_token(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_auth_refresh_login_request_token(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_auth_refresh_login_request_token(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_refresh_login_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_auth_refresh_login_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_auth_refresh_login_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_auth_refresh_login_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_auth_refresh_login_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_auth_refresh_login_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_auth_refresh_login_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_auth_refresh_login_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_refresh_login_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_auth_refresh_login_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_refresh_login_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_auth_refresh_login_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_auth_refresh_login_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_auth_refresh_login_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_auth_refresh_login_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_auth_refresh_login_response(Bin, TrUserData) -> dfp_read_field_def_auth_refresh_login_response(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_auth_refresh_login_response(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_auth_refresh_login_response_code(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_auth_refresh_login_response(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1};
dfp_read_field_def_auth_refresh_login_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_auth_refresh_login_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_auth_refresh_login_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_refresh_login_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_auth_refresh_login_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_auth_refresh_login_response_code(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_refresh_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_auth_refresh_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_auth_refresh_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_auth_refresh_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_auth_refresh_login_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_auth_refresh_login_response(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1}.

d_field_auth_refresh_login_response_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_auth_refresh_login_response_code(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_auth_refresh_login_response_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_auth_refresh_login_response(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_auth_refresh_login_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_auth_refresh_login_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_auth_refresh_login_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_refresh_login_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_auth_refresh_login_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_auth_refresh_login_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_auth_refresh_login_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_refresh_login_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_auth_refresh_login_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_refresh_login_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_auth_refresh_login_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_refresh_login_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_auth_refresh_login_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_refresh_login_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_auth_handoff_request(Bin, TrUserData) -> dfp_read_field_def_auth_handoff_request(Bin, 0, 0, 0, id(0, TrUserData), id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_auth_handoff_request(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_auth_handoff_request_code(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_auth_handoff_request(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_auth_handoff_request_identifier(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_auth_handoff_request(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_auth_handoff_request_password(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_auth_handoff_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{code => F@_1, identifier => F@_2, password => F@_3};
dfp_read_field_def_auth_handoff_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_auth_handoff_request(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_auth_handoff_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_handoff_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_auth_handoff_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_auth_handoff_request_code(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_auth_handoff_request_identifier(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_auth_handoff_request_password(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_handoff_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_auth_handoff_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_auth_handoff_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_auth_handoff_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_auth_handoff_request(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_auth_handoff_request(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{code => F@_1, identifier => F@_2, password => F@_3}.

d_field_auth_handoff_request_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_auth_handoff_request_code(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_auth_handoff_request_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_auth_handoff_request(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_auth_handoff_request_identifier(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_auth_handoff_request_identifier(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_auth_handoff_request_identifier(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_handoff_request(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_auth_handoff_request_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_auth_handoff_request_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_auth_handoff_request_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_auth_handoff_request(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_auth_handoff_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_auth_handoff_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_auth_handoff_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_auth_handoff_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_auth_handoff_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_auth_handoff_request(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_auth_handoff_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_handoff_request(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_auth_handoff_request(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_handoff_request(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_auth_handoff_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_auth_handoff_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_auth_handoff_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_auth_handoff_request(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_auth_handoff_response(Bin, TrUserData) -> dfp_read_field_def_auth_handoff_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_auth_handoff_response(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_auth_handoff_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_auth_handoff_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_auth_handoff_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_handoff_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_auth_handoff_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_auth_handoff_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_auth_handoff_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_auth_handoff_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_auth_handoff_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_auth_handoff_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_auth_handoff_response(<<>>, 0, 0, _, _) -> #{}.

skip_varint_auth_handoff_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_auth_handoff_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_auth_handoff_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_auth_handoff_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_auth_handoff_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_auth_handoff_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_auth_handoff_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_handoff_response(Rest2, 0, 0, F, TrUserData).

skip_group_auth_handoff_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_handoff_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_auth_handoff_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_auth_handoff_response(Rest, Z1, Z2, F, TrUserData).

skip_64_auth_handoff_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_auth_handoff_response(Rest, Z1, Z2, F, TrUserData).

decode_msg_auth_logout_request(Bin, TrUserData) -> dfp_read_field_def_auth_logout_request(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_auth_logout_request(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_auth_logout_request_code(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_auth_logout_request(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1};
dfp_read_field_def_auth_logout_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_auth_logout_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_auth_logout_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_logout_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_auth_logout_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_auth_logout_request_code(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_auth_logout_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_auth_logout_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_auth_logout_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_auth_logout_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_auth_logout_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_auth_logout_request(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1}.

d_field_auth_logout_request_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_auth_logout_request_code(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_auth_logout_request_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_auth_logout_request(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_auth_logout_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_auth_logout_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_auth_logout_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_logout_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_auth_logout_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_auth_logout_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_auth_logout_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_logout_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_auth_logout_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_logout_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_auth_logout_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_logout_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_auth_logout_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_auth_logout_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_auth_logout_response(Bin, TrUserData) -> dfp_read_field_def_auth_logout_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_auth_logout_response(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_auth_logout_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_auth_logout_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_auth_logout_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_auth_logout_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_auth_logout_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_auth_logout_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_auth_logout_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_auth_logout_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_auth_logout_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_auth_logout_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_auth_logout_response(<<>>, 0, 0, _, _) -> #{}.

skip_varint_auth_logout_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_auth_logout_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_auth_logout_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_auth_logout_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_auth_logout_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_auth_logout_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_auth_logout_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_auth_logout_response(Rest2, 0, 0, F, TrUserData).

skip_group_auth_logout_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_auth_logout_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_auth_logout_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_auth_logout_response(Rest, Z1, Z2, F, TrUserData).

skip_64_auth_logout_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_auth_logout_response(Rest, Z1, Z2, F, TrUserData).

decode_msg_session(Bin, TrUserData) -> dfp_read_field_def_session(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_session(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_session_id(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_session(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_session_token(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_session(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{id => F@_1, token => F@_2};
dfp_read_field_def_session(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_session(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_session(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_session(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_session_id(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_session_token(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_session(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_session(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_session(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_session(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_session(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_session(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{id => F@_1, token => F@_2}.

d_field_session_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_session_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_session_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_session(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_session_token(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_session_token(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_session_token(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_session(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_session(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_session(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_session(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_session(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_session(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_session(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_session(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_session(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_session(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_session(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_session_get_request(Bin, TrUserData) -> dfp_read_field_def_session_get_request(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_session_get_request(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_session_get_request_code(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_session_get_request(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1};
dfp_read_field_def_session_get_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_session_get_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_session_get_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_session_get_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_session_get_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_session_get_request_code(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_session_get_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_session_get_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_session_get_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_session_get_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_session_get_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_session_get_request(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1}.

d_field_session_get_request_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_session_get_request_code(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_session_get_request_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_session_get_request(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_session_get_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_session_get_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_session_get_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_get_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_session_get_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_session_get_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_session_get_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_get_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_session_get_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_get_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_session_get_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_get_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_session_get_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_get_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_session_get_response(Bin, TrUserData) -> dfp_read_field_def_session_get_response(Bin, 0, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_session_get_response(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_session_get_response_session(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_session_get_response(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{session => F@_1}
    end;
dfp_read_field_def_session_get_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_session_get_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_session_get_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_session_get_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_session_get_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_session_get_response_session(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_session_get_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_session_get_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_session_get_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_session_get_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_session_get_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_session_get_response(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{session => F@_1}
    end.

d_field_session_get_response_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_session_get_response_session(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_session_get_response_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_session(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_session_get_response(RestF,
                                            0,
                                            0,
                                            F,
                                            if Prev == '$undef' -> NewFValue;
                                               true -> merge_msg_session(Prev, NewFValue, TrUserData)
                                            end,
                                            TrUserData).

skip_varint_session_get_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_session_get_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_session_get_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_get_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_session_get_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_session_get_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_session_get_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_get_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_session_get_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_get_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_session_get_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_get_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_session_get_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_get_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_session_put_request(Bin, TrUserData) -> dfp_read_field_def_session_put_request(Bin, 0, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_session_put_request(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_session_put_request_session(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_session_put_request(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{session => F@_1}
    end;
dfp_read_field_def_session_put_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_session_put_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_session_put_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_session_put_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_session_put_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_session_put_request_session(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_session_put_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_session_put_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_session_put_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_session_put_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_session_put_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_session_put_request(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{session => F@_1}
    end.

d_field_session_put_request_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_session_put_request_session(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_session_put_request_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_session(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_session_put_request(RestF,
                                           0,
                                           0,
                                           F,
                                           if Prev == '$undef' -> NewFValue;
                                              true -> merge_msg_session(Prev, NewFValue, TrUserData)
                                           end,
                                           TrUserData).

skip_varint_session_put_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_session_put_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_session_put_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_put_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_session_put_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_session_put_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_session_put_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_put_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_session_put_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_put_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_session_put_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_put_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_session_put_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_put_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_session_put_response(Bin, TrUserData) -> dfp_read_field_def_session_put_response(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_session_put_response(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_session_put_response_code(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_session_put_response(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1};
dfp_read_field_def_session_put_response(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_session_put_response(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_session_put_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_session_put_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_session_put_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_session_put_response_code(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_session_put_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_session_put_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_session_put_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_session_put_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_session_put_response(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_session_put_response(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1}.

d_field_session_put_response_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_session_put_response_code(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_session_put_response_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_session_put_response(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_session_put_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_session_put_response(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_session_put_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_put_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_session_put_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_session_put_response(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_session_put_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_put_response(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_session_put_response(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_put_response(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_session_put_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_put_response(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_session_put_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_put_response(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_session_delete_request(Bin, TrUserData) -> dfp_read_field_def_session_delete_request(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_session_delete_request(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_session_delete_request_code(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_session_delete_request(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1};
dfp_read_field_def_session_delete_request(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_session_delete_request(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_session_delete_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_session_delete_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_session_delete_request(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_session_delete_request_code(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_session_delete_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_session_delete_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_session_delete_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_session_delete_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_session_delete_request(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_session_delete_request(<<>>, 0, 0, _, F@_1, _) -> #{code => F@_1}.

d_field_session_delete_request_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_session_delete_request_code(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_session_delete_request_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_session_delete_request(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_session_delete_request(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_session_delete_request(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_session_delete_request(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_delete_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_session_delete_request(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_session_delete_request(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_session_delete_request(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_delete_request(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_session_delete_request(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_delete_request(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_session_delete_request(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_delete_request(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_session_delete_request(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_session_delete_request(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_session_delete_response(Bin, TrUserData) -> dfp_read_field_def_session_delete_response(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_session_delete_response(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_session_delete_response(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_session_delete_response(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_session_delete_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_session_delete_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_session_delete_response(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_session_delete_response(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_session_delete_response(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_session_delete_response(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_session_delete_response(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_session_delete_response(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_session_delete_response(<<>>, 0, 0, _, _) -> #{}.

skip_varint_session_delete_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_session_delete_response(Rest, Z1, Z2, F, TrUserData);
skip_varint_session_delete_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_session_delete_response(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_session_delete_response(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_session_delete_response(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_session_delete_response(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_delete_response(Rest2, 0, 0, F, TrUserData).

skip_group_session_delete_response(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_delete_response(Rest, 0, Z2, FNum, TrUserData).

skip_32_session_delete_response(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_session_delete_response(Rest, Z1, Z2, F, TrUserData).

skip_64_session_delete_response(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_session_delete_response(Rest, Z1, Z2, F, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        member -> merge_msg_member(Prev, New, TrUserData);
        member_add_request -> merge_msg_member_add_request(Prev, New, TrUserData);
        member_add_response -> merge_msg_member_add_response(Prev, New, TrUserData);
        member_remove_request -> merge_msg_member_remove_request(Prev, New, TrUserData);
        member_remove_response -> merge_msg_member_remove_response(Prev, New, TrUserData);
        member_update_request -> merge_msg_member_update_request(Prev, New, TrUserData);
        member_update_response -> merge_msg_member_update_response(Prev, New, TrUserData);
        member_list_request -> merge_msg_member_list_request(Prev, New, TrUserData);
        member_list_response -> merge_msg_member_list_response(Prev, New, TrUserData);
        auth_login_request -> merge_msg_auth_login_request(Prev, New, TrUserData);
        auth_login_response -> merge_msg_auth_login_response(Prev, New, TrUserData);
        auth_refresh_login_request -> merge_msg_auth_refresh_login_request(Prev, New, TrUserData);
        auth_refresh_login_response -> merge_msg_auth_refresh_login_response(Prev, New, TrUserData);
        auth_handoff_request -> merge_msg_auth_handoff_request(Prev, New, TrUserData);
        auth_handoff_response -> merge_msg_auth_handoff_response(Prev, New, TrUserData);
        auth_logout_request -> merge_msg_auth_logout_request(Prev, New, TrUserData);
        auth_logout_response -> merge_msg_auth_logout_response(Prev, New, TrUserData);
        session -> merge_msg_session(Prev, New, TrUserData);
        session_get_request -> merge_msg_session_get_request(Prev, New, TrUserData);
        session_get_response -> merge_msg_session_get_response(Prev, New, TrUserData);
        session_put_request -> merge_msg_session_put_request(Prev, New, TrUserData);
        session_put_response -> merge_msg_session_put_response(Prev, New, TrUserData);
        session_delete_request -> merge_msg_session_delete_request(Prev, New, TrUserData);
        session_delete_response -> merge_msg_session_delete_response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_member/3}).
merge_msg_member(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{world_id := NFworld_id}} -> S2#{world_id => NFworld_id};
             {#{world_id := PFworld_id}, _} -> S2#{world_id => PFworld_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{channel_id := NFchannel_id}} -> S3#{channel_id => NFchannel_id};
             {#{channel_id := PFchannel_id}, _} -> S3#{channel_id => PFchannel_id};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S4#{name => NFname};
             {#{name := PFname}, _} -> S4#{name => PFname};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{address := NFaddress}} -> S5#{address => NFaddress};
             {#{address := PFaddress}, _} -> S5#{address => PFaddress};
             _ -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {_, #{population := NFpopulation}} -> S6#{population => NFpopulation};
             {#{population := PFpopulation}, _} -> S6#{population => PFpopulation};
             _ -> S6
         end,
    case {PMsg, NMsg} of
        {_, #{capacity := NFcapacity}} -> S7#{capacity => NFcapacity};
        {#{capacity := PFcapacity}, _} -> S7#{capacity => PFcapacity};
        _ -> S7
    end.

-compile({nowarn_unused_function,merge_msg_member_add_request/3}).
merge_msg_member_add_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{world_id := NFworld_id}} -> S2#{world_id => NFworld_id};
             {#{world_id := PFworld_id}, _} -> S2#{world_id => PFworld_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{channel_id := NFchannel_id}} -> S3#{channel_id => NFchannel_id};
             {#{channel_id := PFchannel_id}, _} -> S3#{channel_id => PFchannel_id};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S4#{name => NFname};
             {#{name := PFname}, _} -> S4#{name => PFname};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{address := NFaddress}} -> S5#{address => NFaddress};
             {#{address := PFaddress}, _} -> S5#{address => PFaddress};
             _ -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {_, #{population := NFpopulation}} -> S6#{population => NFpopulation};
             {#{population := PFpopulation}, _} -> S6#{population => PFpopulation};
             _ -> S6
         end,
    case {PMsg, NMsg} of
        {_, #{capacity := NFcapacity}} -> S7#{capacity => NFcapacity};
        {#{capacity := PFcapacity}, _} -> S7#{capacity => PFcapacity};
        _ -> S7
    end.

-compile({nowarn_unused_function,merge_msg_member_add_response/3}).
merge_msg_member_add_response(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_member_remove_request/3}).
merge_msg_member_remove_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{id := NFid}} -> S1#{id => NFid};
        {#{id := PFid}, _} -> S1#{id => PFid};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_member_remove_response/3}).
merge_msg_member_remove_response(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_member_update_request/3}).
merge_msg_member_update_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{world_id := NFworld_id}} -> S2#{world_id => NFworld_id};
             {#{world_id := PFworld_id}, _} -> S2#{world_id => PFworld_id};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{channel_id := NFchannel_id}} -> S3#{channel_id => NFchannel_id};
             {#{channel_id := PFchannel_id}, _} -> S3#{channel_id => PFchannel_id};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S4#{name => NFname};
             {#{name := PFname}, _} -> S4#{name => PFname};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{address := NFaddress}} -> S5#{address => NFaddress};
             {#{address := PFaddress}, _} -> S5#{address => PFaddress};
             _ -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {_, #{population := NFpopulation}} -> S6#{population => NFpopulation};
             {#{population := PFpopulation}, _} -> S6#{population => PFpopulation};
             _ -> S6
         end,
    case {PMsg, NMsg} of
        {_, #{capacity := NFcapacity}} -> S7#{capacity => NFcapacity};
        {#{capacity := PFcapacity}, _} -> S7#{capacity => PFcapacity};
        _ -> S7
    end.

-compile({nowarn_unused_function,merge_msg_member_update_response/3}).
merge_msg_member_update_response(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_member_list_request/3}).
merge_msg_member_list_request(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_member_list_response/3}).
merge_msg_member_list_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{members := PFmembers}, #{members := NFmembers}} -> S1#{members => 'erlang_++'(PFmembers, NFmembers, TrUserData)};
        {_, #{members := NFmembers}} -> S1#{members => NFmembers};
        {#{members := PFmembers}, _} -> S1#{members => PFmembers};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_auth_login_request/3}).
merge_msg_auth_login_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{identifier := NFidentifier}} -> S1#{identifier => NFidentifier};
             {#{identifier := PFidentifier}, _} -> S1#{identifier => PFidentifier};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{password := NFpassword}} -> S2#{password => NFpassword};
        {#{password := PFpassword}, _} -> S2#{password => PFpassword};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_auth_login_response/3}).
merge_msg_auth_login_response(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{code := NFcode}} -> S1#{code => NFcode};
        {#{code := PFcode}, _} -> S1#{code => PFcode};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_auth_refresh_login_request/3}).
merge_msg_auth_refresh_login_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{identifier := NFidentifier}} -> S1#{identifier => NFidentifier};
             {#{identifier := PFidentifier}, _} -> S1#{identifier => PFidentifier};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{password := NFpassword}} -> S2#{password => NFpassword};
             {#{password := PFpassword}, _} -> S2#{password => PFpassword};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{token := NFtoken}} -> S3#{token => NFtoken};
        {#{token := PFtoken}, _} -> S3#{token => PFtoken};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_auth_refresh_login_response/3}).
merge_msg_auth_refresh_login_response(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{code := NFcode}} -> S1#{code => NFcode};
        {#{code := PFcode}, _} -> S1#{code => PFcode};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_auth_handoff_request/3}).
merge_msg_auth_handoff_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{code := NFcode}} -> S1#{code => NFcode};
             {#{code := PFcode}, _} -> S1#{code => PFcode};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{identifier := NFidentifier}} -> S2#{identifier => NFidentifier};
             {#{identifier := PFidentifier}, _} -> S2#{identifier => PFidentifier};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{password := NFpassword}} -> S3#{password => NFpassword};
        {#{password := PFpassword}, _} -> S3#{password => PFpassword};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_auth_handoff_response/3}).
merge_msg_auth_handoff_response(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_auth_logout_request/3}).
merge_msg_auth_logout_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{code := NFcode}} -> S1#{code => NFcode};
        {#{code := PFcode}, _} -> S1#{code => PFcode};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_auth_logout_response/3}).
merge_msg_auth_logout_response(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_session/3}).
merge_msg_session(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S1#{id => NFid};
             {#{id := PFid}, _} -> S1#{id => PFid};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{token := NFtoken}} -> S2#{token => NFtoken};
        {#{token := PFtoken}, _} -> S2#{token => PFtoken};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_session_get_request/3}).
merge_msg_session_get_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{code := NFcode}} -> S1#{code => NFcode};
        {#{code := PFcode}, _} -> S1#{code => PFcode};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_session_get_response/3}).
merge_msg_session_get_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{session := PFsession}, #{session := NFsession}} -> S1#{session => merge_msg_session(PFsession, NFsession, TrUserData)};
        {_, #{session := NFsession}} -> S1#{session => NFsession};
        {#{session := PFsession}, _} -> S1#{session => PFsession};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_session_put_request/3}).
merge_msg_session_put_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{session := PFsession}, #{session := NFsession}} -> S1#{session => merge_msg_session(PFsession, NFsession, TrUserData)};
        {_, #{session := NFsession}} -> S1#{session => NFsession};
        {#{session := PFsession}, _} -> S1#{session => PFsession};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_session_put_response/3}).
merge_msg_session_put_response(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{code := NFcode}} -> S1#{code => NFcode};
        {#{code := PFcode}, _} -> S1#{code => PFcode};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_session_delete_request/3}).
merge_msg_session_delete_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{code := NFcode}} -> S1#{code => NFcode};
        {#{code := PFcode}, _} -> S1#{code => PFcode};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_session_delete_response/3}).
merge_msg_session_delete_response(_Prev, New, _TrUserData) -> New.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        member -> v_msg_member(Msg, [MsgName], TrUserData);
        member_add_request -> v_msg_member_add_request(Msg, [MsgName], TrUserData);
        member_add_response -> v_msg_member_add_response(Msg, [MsgName], TrUserData);
        member_remove_request -> v_msg_member_remove_request(Msg, [MsgName], TrUserData);
        member_remove_response -> v_msg_member_remove_response(Msg, [MsgName], TrUserData);
        member_update_request -> v_msg_member_update_request(Msg, [MsgName], TrUserData);
        member_update_response -> v_msg_member_update_response(Msg, [MsgName], TrUserData);
        member_list_request -> v_msg_member_list_request(Msg, [MsgName], TrUserData);
        member_list_response -> v_msg_member_list_response(Msg, [MsgName], TrUserData);
        auth_login_request -> v_msg_auth_login_request(Msg, [MsgName], TrUserData);
        auth_login_response -> v_msg_auth_login_response(Msg, [MsgName], TrUserData);
        auth_refresh_login_request -> v_msg_auth_refresh_login_request(Msg, [MsgName], TrUserData);
        auth_refresh_login_response -> v_msg_auth_refresh_login_response(Msg, [MsgName], TrUserData);
        auth_handoff_request -> v_msg_auth_handoff_request(Msg, [MsgName], TrUserData);
        auth_handoff_response -> v_msg_auth_handoff_response(Msg, [MsgName], TrUserData);
        auth_logout_request -> v_msg_auth_logout_request(Msg, [MsgName], TrUserData);
        auth_logout_response -> v_msg_auth_logout_response(Msg, [MsgName], TrUserData);
        session -> v_msg_session(Msg, [MsgName], TrUserData);
        session_get_request -> v_msg_session_get_request(Msg, [MsgName], TrUserData);
        session_get_response -> v_msg_session_get_response(Msg, [MsgName], TrUserData);
        session_put_request -> v_msg_session_put_request(Msg, [MsgName], TrUserData);
        session_put_response -> v_msg_session_put_response(Msg, [MsgName], TrUserData);
        session_delete_request -> v_msg_session_delete_request(Msg, [MsgName], TrUserData);
        session_delete_response -> v_msg_session_delete_response(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_member/3}).
-dialyzer({nowarn_function,v_msg_member/3}).
v_msg_member(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{world_id := F2} -> v_type_uint32(F2, [world_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{channel_id := F3} -> v_type_uint32(F3, [channel_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{name := F4} -> v_type_string(F4, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{address := F5} -> v_type_string(F5, [address | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{population := F6} -> v_type_uint32(F6, [population | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{capacity := F7} -> v_type_uint32(F7, [capacity | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (world_id) -> ok;
                      (channel_id) -> ok;
                      (name) -> ok;
                      (address) -> ok;
                      (population) -> ok;
                      (capacity) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_member(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), member}, M, Path);
v_msg_member(X, Path, _TrUserData) -> mk_type_error({expected_msg, member}, X, Path).

-compile({nowarn_unused_function,v_msg_member_add_request/3}).
-dialyzer({nowarn_function,v_msg_member_add_request/3}).
v_msg_member_add_request(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{world_id := F2} -> v_type_uint32(F2, [world_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{channel_id := F3} -> v_type_uint32(F3, [channel_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{name := F4} -> v_type_string(F4, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{address := F5} -> v_type_string(F5, [address | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{population := F6} -> v_type_uint32(F6, [population | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{capacity := F7} -> v_type_uint32(F7, [capacity | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (world_id) -> ok;
                      (channel_id) -> ok;
                      (name) -> ok;
                      (address) -> ok;
                      (population) -> ok;
                      (capacity) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_member_add_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), member_add_request}, M, Path);
v_msg_member_add_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, member_add_request}, X, Path).

-compile({nowarn_unused_function,v_msg_member_add_response/3}).
-dialyzer({nowarn_function,v_msg_member_add_response/3}).
v_msg_member_add_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_member_add_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), member_add_response}, M, Path);
v_msg_member_add_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, member_add_response}, X, Path).

-compile({nowarn_unused_function,v_msg_member_remove_request/3}).
-dialyzer({nowarn_function,v_msg_member_remove_request/3}).
v_msg_member_remove_request(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_member_remove_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), member_remove_request}, M, Path);
v_msg_member_remove_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, member_remove_request}, X, Path).

-compile({nowarn_unused_function,v_msg_member_remove_response/3}).
-dialyzer({nowarn_function,v_msg_member_remove_response/3}).
v_msg_member_remove_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_member_remove_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), member_remove_response}, M, Path);
v_msg_member_remove_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, member_remove_response}, X, Path).

-compile({nowarn_unused_function,v_msg_member_update_request/3}).
-dialyzer({nowarn_function,v_msg_member_update_request/3}).
v_msg_member_update_request(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{world_id := F2} -> v_type_uint32(F2, [world_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{channel_id := F3} -> v_type_uint32(F3, [channel_id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{name := F4} -> v_type_string(F4, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{address := F5} -> v_type_string(F5, [address | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{population := F6} -> v_type_uint32(F6, [population | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{capacity := F7} -> v_type_uint32(F7, [capacity | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (world_id) -> ok;
                      (channel_id) -> ok;
                      (name) -> ok;
                      (address) -> ok;
                      (population) -> ok;
                      (capacity) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_member_update_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), member_update_request}, M, Path);
v_msg_member_update_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, member_update_request}, X, Path).

-compile({nowarn_unused_function,v_msg_member_update_response/3}).
-dialyzer({nowarn_function,v_msg_member_update_response/3}).
v_msg_member_update_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_member_update_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), member_update_response}, M, Path);
v_msg_member_update_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, member_update_response}, X, Path).

-compile({nowarn_unused_function,v_msg_member_list_request/3}).
-dialyzer({nowarn_function,v_msg_member_list_request/3}).
v_msg_member_list_request(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_member_list_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), member_list_request}, M, Path);
v_msg_member_list_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, member_list_request}, X, Path).

-compile({nowarn_unused_function,v_msg_member_list_response/3}).
-dialyzer({nowarn_function,v_msg_member_list_response/3}).
v_msg_member_list_response(#{} = M, Path, TrUserData) ->
    case M of
        #{members := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_member(Elem, [members | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, member}}, F1, [members | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (members) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_member_list_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), member_list_response}, M, Path);
v_msg_member_list_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, member_list_response}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_login_request/3}).
-dialyzer({nowarn_function,v_msg_auth_login_request/3}).
v_msg_auth_login_request(#{} = M, Path, TrUserData) ->
    case M of
        #{identifier := F1} -> v_type_string(F1, [identifier | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F2} -> v_type_string(F2, [password | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (identifier) -> ok;
                      (password) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_login_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_login_request}, M, Path);
v_msg_auth_login_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_login_request}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_login_response/3}).
-dialyzer({nowarn_function,v_msg_auth_login_response/3}).
v_msg_auth_login_response(#{} = M, Path, TrUserData) ->
    case M of
        #{code := F1} -> v_type_uint32(F1, [code | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_login_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_login_response}, M, Path);
v_msg_auth_login_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_login_response}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_refresh_login_request/3}).
-dialyzer({nowarn_function,v_msg_auth_refresh_login_request/3}).
v_msg_auth_refresh_login_request(#{} = M, Path, TrUserData) ->
    case M of
        #{identifier := F1} -> v_type_string(F1, [identifier | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F2} -> v_type_string(F2, [password | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{token := F3} -> v_type_string(F3, [token | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (identifier) -> ok;
                      (password) -> ok;
                      (token) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_refresh_login_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_refresh_login_request}, M, Path);
v_msg_auth_refresh_login_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_refresh_login_request}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_refresh_login_response/3}).
-dialyzer({nowarn_function,v_msg_auth_refresh_login_response/3}).
v_msg_auth_refresh_login_response(#{} = M, Path, TrUserData) ->
    case M of
        #{code := F1} -> v_type_uint32(F1, [code | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_refresh_login_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_refresh_login_response}, M, Path);
v_msg_auth_refresh_login_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_refresh_login_response}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_handoff_request/3}).
-dialyzer({nowarn_function,v_msg_auth_handoff_request/3}).
v_msg_auth_handoff_request(#{} = M, Path, TrUserData) ->
    case M of
        #{code := F1} -> v_type_uint32(F1, [code | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{identifier := F2} -> v_type_string(F2, [identifier | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F3} -> v_type_string(F3, [password | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
                      (identifier) -> ok;
                      (password) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_handoff_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_handoff_request}, M, Path);
v_msg_auth_handoff_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_handoff_request}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_handoff_response/3}).
-dialyzer({nowarn_function,v_msg_auth_handoff_response/3}).
v_msg_auth_handoff_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_auth_handoff_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_handoff_response}, M, Path);
v_msg_auth_handoff_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_handoff_response}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_logout_request/3}).
-dialyzer({nowarn_function,v_msg_auth_logout_request/3}).
v_msg_auth_logout_request(#{} = M, Path, TrUserData) ->
    case M of
        #{code := F1} -> v_type_uint32(F1, [code | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_auth_logout_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_logout_request}, M, Path);
v_msg_auth_logout_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_logout_request}, X, Path).

-compile({nowarn_unused_function,v_msg_auth_logout_response/3}).
-dialyzer({nowarn_function,v_msg_auth_logout_response/3}).
v_msg_auth_logout_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_auth_logout_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), auth_logout_response}, M, Path);
v_msg_auth_logout_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, auth_logout_response}, X, Path).

-compile({nowarn_unused_function,v_msg_session/3}).
-dialyzer({nowarn_function,v_msg_session/3}).
v_msg_session(#{} = M, Path, TrUserData) ->
    case M of
        #{id := F1} -> v_type_string(F1, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{token := F2} -> v_type_string(F2, [token | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (id) -> ok;
                      (token) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), session}, M, Path);
v_msg_session(X, Path, _TrUserData) -> mk_type_error({expected_msg, session}, X, Path).

-compile({nowarn_unused_function,v_msg_session_get_request/3}).
-dialyzer({nowarn_function,v_msg_session_get_request/3}).
v_msg_session_get_request(#{} = M, Path, TrUserData) ->
    case M of
        #{code := F1} -> v_type_uint32(F1, [code | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_get_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), session_get_request}, M, Path);
v_msg_session_get_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, session_get_request}, X, Path).

-compile({nowarn_unused_function,v_msg_session_get_response/3}).
-dialyzer({nowarn_function,v_msg_session_get_response/3}).
v_msg_session_get_response(#{} = M, Path, TrUserData) ->
    case M of
        #{session := F1} -> v_msg_session(F1, [session | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (session) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_get_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), session_get_response}, M, Path);
v_msg_session_get_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, session_get_response}, X, Path).

-compile({nowarn_unused_function,v_msg_session_put_request/3}).
-dialyzer({nowarn_function,v_msg_session_put_request/3}).
v_msg_session_put_request(#{} = M, Path, TrUserData) ->
    case M of
        #{session := F1} -> v_msg_session(F1, [session | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (session) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_put_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), session_put_request}, M, Path);
v_msg_session_put_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, session_put_request}, X, Path).

-compile({nowarn_unused_function,v_msg_session_put_response/3}).
-dialyzer({nowarn_function,v_msg_session_put_response/3}).
v_msg_session_put_response(#{} = M, Path, TrUserData) ->
    case M of
        #{code := F1} -> v_type_uint32(F1, [code | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_put_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), session_put_response}, M, Path);
v_msg_session_put_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, session_put_response}, X, Path).

-compile({nowarn_unused_function,v_msg_session_delete_request/3}).
-dialyzer({nowarn_function,v_msg_session_delete_request/3}).
v_msg_session_delete_request(#{} = M, Path, TrUserData) ->
    case M of
        #{code := F1} -> v_type_uint32(F1, [code | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_delete_request(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), session_delete_request}, M, Path);
v_msg_session_delete_request(X, Path, _TrUserData) -> mk_type_error({expected_msg, session_delete_request}, X, Path).

-compile({nowarn_unused_function,v_msg_session_delete_response/3}).
-dialyzer({nowarn_function,v_msg_session_delete_response/3}).
v_msg_session_delete_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_session_delete_response(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), session_delete_response}, M, Path);
v_msg_session_delete_response(X, Path, _TrUserData) -> mk_type_error({expected_msg, session_delete_response}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, member},
      [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
       #{name => world_id, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []},
       #{name => channel_id, fnum => 3, rnum => 4, type => uint32, occurrence => defaulty, opts => []},
       #{name => name, fnum => 4, rnum => 5, type => string, occurrence => defaulty, opts => []},
       #{name => address, fnum => 5, rnum => 6, type => string, occurrence => defaulty, opts => []},
       #{name => population, fnum => 6, rnum => 7, type => uint32, occurrence => defaulty, opts => []},
       #{name => capacity, fnum => 7, rnum => 8, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, member_add_request},
      [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
       #{name => world_id, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []},
       #{name => channel_id, fnum => 3, rnum => 4, type => uint32, occurrence => defaulty, opts => []},
       #{name => name, fnum => 4, rnum => 5, type => string, occurrence => defaulty, opts => []},
       #{name => address, fnum => 5, rnum => 6, type => string, occurrence => defaulty, opts => []},
       #{name => population, fnum => 6, rnum => 7, type => uint32, occurrence => defaulty, opts => []},
       #{name => capacity, fnum => 7, rnum => 8, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, member_add_response}, []},
     {{msg, member_remove_request}, [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}]},
     {{msg, member_remove_response}, []},
     {{msg, member_update_request},
      [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
       #{name => world_id, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []},
       #{name => channel_id, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
       #{name => name, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
       #{name => address, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []},
       #{name => population, fnum => 6, rnum => 7, type => uint32, occurrence => optional, opts => []},
       #{name => capacity, fnum => 7, rnum => 8, type => uint32, occurrence => optional, opts => []}]},
     {{msg, member_update_response}, []},
     {{msg, member_list_request}, []},
     {{msg, member_list_response}, [#{name => members, fnum => 1, rnum => 2, type => {msg, member}, occurrence => repeated, opts => []}]},
     {{msg, auth_login_request}, [#{name => identifier, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}, #{name => password, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []}]},
     {{msg, auth_login_response}, [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, auth_refresh_login_request},
      [#{name => identifier, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
       #{name => password, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []},
       #{name => token, fnum => 3, rnum => 4, type => string, occurrence => defaulty, opts => []}]},
     {{msg, auth_refresh_login_response}, [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, auth_handoff_request},
      [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []},
       #{name => identifier, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []},
       #{name => password, fnum => 3, rnum => 4, type => string, occurrence => defaulty, opts => []}]},
     {{msg, auth_handoff_response}, []},
     {{msg, auth_logout_request}, [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, auth_logout_response}, []},
     {{msg, session}, [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}, #{name => token, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []}]},
     {{msg, session_get_request}, [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, session_get_response}, [#{name => session, fnum => 1, rnum => 2, type => {msg, session}, occurrence => defaulty, opts => []}]},
     {{msg, session_put_request}, [#{name => session, fnum => 1, rnum => 2, type => {msg, session}, occurrence => defaulty, opts => []}]},
     {{msg, session_put_response}, [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, session_delete_request}, [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}]},
     {{msg, session_delete_response}, []}].


get_msg_names() ->
    [member,
     member_add_request,
     member_add_response,
     member_remove_request,
     member_remove_response,
     member_update_request,
     member_update_response,
     member_list_request,
     member_list_response,
     auth_login_request,
     auth_login_response,
     auth_refresh_login_request,
     auth_refresh_login_response,
     auth_handoff_request,
     auth_handoff_response,
     auth_logout_request,
     auth_logout_response,
     session,
     session_get_request,
     session_get_response,
     session_put_request,
     session_put_response,
     session_delete_request,
     session_delete_response].


get_group_names() -> [].


get_msg_or_group_names() ->
    [member,
     member_add_request,
     member_add_response,
     member_remove_request,
     member_remove_response,
     member_update_request,
     member_update_response,
     member_list_request,
     member_list_response,
     auth_login_request,
     auth_login_response,
     auth_refresh_login_request,
     auth_refresh_login_response,
     auth_handoff_request,
     auth_handoff_response,
     auth_logout_request,
     auth_logout_response,
     session,
     session_get_request,
     session_get_response,
     session_put_request,
     session_put_response,
     session_delete_request,
     session_delete_response].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def(member) ->
    [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
     #{name => world_id, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []},
     #{name => channel_id, fnum => 3, rnum => 4, type => uint32, occurrence => defaulty, opts => []},
     #{name => name, fnum => 4, rnum => 5, type => string, occurrence => defaulty, opts => []},
     #{name => address, fnum => 5, rnum => 6, type => string, occurrence => defaulty, opts => []},
     #{name => population, fnum => 6, rnum => 7, type => uint32, occurrence => defaulty, opts => []},
     #{name => capacity, fnum => 7, rnum => 8, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def(member_add_request) ->
    [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
     #{name => world_id, fnum => 2, rnum => 3, type => uint32, occurrence => defaulty, opts => []},
     #{name => channel_id, fnum => 3, rnum => 4, type => uint32, occurrence => defaulty, opts => []},
     #{name => name, fnum => 4, rnum => 5, type => string, occurrence => defaulty, opts => []},
     #{name => address, fnum => 5, rnum => 6, type => string, occurrence => defaulty, opts => []},
     #{name => population, fnum => 6, rnum => 7, type => uint32, occurrence => defaulty, opts => []},
     #{name => capacity, fnum => 7, rnum => 8, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def(member_add_response) -> [];
find_msg_def(member_remove_request) -> [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}];
find_msg_def(member_remove_response) -> [];
find_msg_def(member_update_request) ->
    [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
     #{name => world_id, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []},
     #{name => channel_id, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
     #{name => name, fnum => 4, rnum => 5, type => string, occurrence => optional, opts => []},
     #{name => address, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []},
     #{name => population, fnum => 6, rnum => 7, type => uint32, occurrence => optional, opts => []},
     #{name => capacity, fnum => 7, rnum => 8, type => uint32, occurrence => optional, opts => []}];
find_msg_def(member_update_response) -> [];
find_msg_def(member_list_request) -> [];
find_msg_def(member_list_response) -> [#{name => members, fnum => 1, rnum => 2, type => {msg, member}, occurrence => repeated, opts => []}];
find_msg_def(auth_login_request) -> [#{name => identifier, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}, #{name => password, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []}];
find_msg_def(auth_login_response) -> [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def(auth_refresh_login_request) ->
    [#{name => identifier, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []},
     #{name => password, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []},
     #{name => token, fnum => 3, rnum => 4, type => string, occurrence => defaulty, opts => []}];
find_msg_def(auth_refresh_login_response) -> [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def(auth_handoff_request) ->
    [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []},
     #{name => identifier, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []},
     #{name => password, fnum => 3, rnum => 4, type => string, occurrence => defaulty, opts => []}];
find_msg_def(auth_handoff_response) -> [];
find_msg_def(auth_logout_request) -> [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def(auth_logout_response) -> [];
find_msg_def(session) -> [#{name => id, fnum => 1, rnum => 2, type => string, occurrence => defaulty, opts => []}, #{name => token, fnum => 2, rnum => 3, type => string, occurrence => defaulty, opts => []}];
find_msg_def(session_get_request) -> [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def(session_get_response) -> [#{name => session, fnum => 1, rnum => 2, type => {msg, session}, occurrence => defaulty, opts => []}];
find_msg_def(session_put_request) -> [#{name => session, fnum => 1, rnum => 2, type => {msg, session}, occurrence => defaulty, opts => []}];
find_msg_def(session_put_response) -> [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def(session_delete_request) -> [#{name => code, fnum => 1, rnum => 2, type => uint32, occurrence => defaulty, opts => []}];
find_msg_def(session_delete_response) -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['io.elkia.fleet.v1alpha1.Cluster', 'io.elkia.fleet.v1alpha1.Presence'].


get_service_def('io.elkia.fleet.v1alpha1.Cluster') ->
    {{service, 'io.elkia.fleet.v1alpha1.Cluster'},
     [#{name => 'MemberAdd', input => member_add_request, output => member_add_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'MemberRemove', input => member_remove_request, output => member_remove_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'MemberUpdate', input => member_update_request, output => member_update_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'MemberList', input => member_list_request, output => member_list_response, input_stream => false, output_stream => false, opts => []}]};
get_service_def('io.elkia.fleet.v1alpha1.Presence') ->
    {{service, 'io.elkia.fleet.v1alpha1.Presence'},
     [#{name => 'AuthLogin', input => auth_login_request, output => auth_login_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'AuthRefreshLogin', input => auth_refresh_login_request, output => auth_refresh_login_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'AuthHandoff', input => auth_handoff_request, output => auth_handoff_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'AuthLogout', input => auth_logout_request, output => auth_logout_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'SessionGet', input => session_get_request, output => session_get_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'SessionPut', input => session_put_request, output => session_put_response, input_stream => false, output_stream => false, opts => []},
      #{name => 'SessionDelete', input => session_delete_request, output => session_delete_response, input_stream => false, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('io.elkia.fleet.v1alpha1.Cluster') -> ['MemberAdd', 'MemberRemove', 'MemberUpdate', 'MemberList'];
get_rpc_names('io.elkia.fleet.v1alpha1.Presence') -> ['AuthLogin', 'AuthRefreshLogin', 'AuthHandoff', 'AuthLogout', 'SessionGet', 'SessionPut', 'SessionDelete'];
get_rpc_names(_) -> error.


find_rpc_def('io.elkia.fleet.v1alpha1.Cluster', RpcName) -> 'find_rpc_def_io.elkia.fleet.v1alpha1.Cluster'(RpcName);
find_rpc_def('io.elkia.fleet.v1alpha1.Presence', RpcName) -> 'find_rpc_def_io.elkia.fleet.v1alpha1.Presence'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_io.elkia.fleet.v1alpha1.Cluster'('MemberAdd') -> #{name => 'MemberAdd', input => member_add_request, output => member_add_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.fleet.v1alpha1.Cluster'('MemberRemove') -> #{name => 'MemberRemove', input => member_remove_request, output => member_remove_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.fleet.v1alpha1.Cluster'('MemberUpdate') -> #{name => 'MemberUpdate', input => member_update_request, output => member_update_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.fleet.v1alpha1.Cluster'('MemberList') -> #{name => 'MemberList', input => member_list_request, output => member_list_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.fleet.v1alpha1.Cluster'(_) -> error.

'find_rpc_def_io.elkia.fleet.v1alpha1.Presence'('AuthLogin') -> #{name => 'AuthLogin', input => auth_login_request, output => auth_login_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.fleet.v1alpha1.Presence'('AuthRefreshLogin') -> #{name => 'AuthRefreshLogin', input => auth_refresh_login_request, output => auth_refresh_login_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.fleet.v1alpha1.Presence'('AuthHandoff') -> #{name => 'AuthHandoff', input => auth_handoff_request, output => auth_handoff_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.fleet.v1alpha1.Presence'('AuthLogout') -> #{name => 'AuthLogout', input => auth_logout_request, output => auth_logout_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.fleet.v1alpha1.Presence'('SessionGet') -> #{name => 'SessionGet', input => session_get_request, output => session_get_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.fleet.v1alpha1.Presence'('SessionPut') -> #{name => 'SessionPut', input => session_put_request, output => session_put_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.fleet.v1alpha1.Presence'('SessionDelete') -> #{name => 'SessionDelete', input => session_delete_request, output => session_delete_response, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_io.elkia.fleet.v1alpha1.Presence'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"io.elkia.fleet.v1alpha1.Cluster">>) -> 'io.elkia.fleet.v1alpha1.Cluster';
fqbin_to_service_name(<<"io.elkia.fleet.v1alpha1.Presence">>) -> 'io.elkia.fleet.v1alpha1.Presence';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('io.elkia.fleet.v1alpha1.Cluster') -> <<"io.elkia.fleet.v1alpha1.Cluster">>;
service_name_to_fqbin('io.elkia.fleet.v1alpha1.Presence') -> <<"io.elkia.fleet.v1alpha1.Presence">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"io.elkia.fleet.v1alpha1.Cluster">>, <<"MemberAdd">>) -> {'io.elkia.fleet.v1alpha1.Cluster', 'MemberAdd'};
fqbins_to_service_and_rpc_name(<<"io.elkia.fleet.v1alpha1.Cluster">>, <<"MemberRemove">>) -> {'io.elkia.fleet.v1alpha1.Cluster', 'MemberRemove'};
fqbins_to_service_and_rpc_name(<<"io.elkia.fleet.v1alpha1.Cluster">>, <<"MemberUpdate">>) -> {'io.elkia.fleet.v1alpha1.Cluster', 'MemberUpdate'};
fqbins_to_service_and_rpc_name(<<"io.elkia.fleet.v1alpha1.Cluster">>, <<"MemberList">>) -> {'io.elkia.fleet.v1alpha1.Cluster', 'MemberList'};
fqbins_to_service_and_rpc_name(<<"io.elkia.fleet.v1alpha1.Presence">>, <<"AuthLogin">>) -> {'io.elkia.fleet.v1alpha1.Presence', 'AuthLogin'};
fqbins_to_service_and_rpc_name(<<"io.elkia.fleet.v1alpha1.Presence">>, <<"AuthRefreshLogin">>) -> {'io.elkia.fleet.v1alpha1.Presence', 'AuthRefreshLogin'};
fqbins_to_service_and_rpc_name(<<"io.elkia.fleet.v1alpha1.Presence">>, <<"AuthHandoff">>) -> {'io.elkia.fleet.v1alpha1.Presence', 'AuthHandoff'};
fqbins_to_service_and_rpc_name(<<"io.elkia.fleet.v1alpha1.Presence">>, <<"AuthLogout">>) -> {'io.elkia.fleet.v1alpha1.Presence', 'AuthLogout'};
fqbins_to_service_and_rpc_name(<<"io.elkia.fleet.v1alpha1.Presence">>, <<"SessionGet">>) -> {'io.elkia.fleet.v1alpha1.Presence', 'SessionGet'};
fqbins_to_service_and_rpc_name(<<"io.elkia.fleet.v1alpha1.Presence">>, <<"SessionPut">>) -> {'io.elkia.fleet.v1alpha1.Presence', 'SessionPut'};
fqbins_to_service_and_rpc_name(<<"io.elkia.fleet.v1alpha1.Presence">>, <<"SessionDelete">>) -> {'io.elkia.fleet.v1alpha1.Presence', 'SessionDelete'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('io.elkia.fleet.v1alpha1.Cluster', 'MemberAdd') -> {<<"io.elkia.fleet.v1alpha1.Cluster">>, <<"MemberAdd">>};
service_and_rpc_name_to_fqbins('io.elkia.fleet.v1alpha1.Cluster', 'MemberRemove') -> {<<"io.elkia.fleet.v1alpha1.Cluster">>, <<"MemberRemove">>};
service_and_rpc_name_to_fqbins('io.elkia.fleet.v1alpha1.Cluster', 'MemberUpdate') -> {<<"io.elkia.fleet.v1alpha1.Cluster">>, <<"MemberUpdate">>};
service_and_rpc_name_to_fqbins('io.elkia.fleet.v1alpha1.Cluster', 'MemberList') -> {<<"io.elkia.fleet.v1alpha1.Cluster">>, <<"MemberList">>};
service_and_rpc_name_to_fqbins('io.elkia.fleet.v1alpha1.Presence', 'AuthLogin') -> {<<"io.elkia.fleet.v1alpha1.Presence">>, <<"AuthLogin">>};
service_and_rpc_name_to_fqbins('io.elkia.fleet.v1alpha1.Presence', 'AuthRefreshLogin') -> {<<"io.elkia.fleet.v1alpha1.Presence">>, <<"AuthRefreshLogin">>};
service_and_rpc_name_to_fqbins('io.elkia.fleet.v1alpha1.Presence', 'AuthHandoff') -> {<<"io.elkia.fleet.v1alpha1.Presence">>, <<"AuthHandoff">>};
service_and_rpc_name_to_fqbins('io.elkia.fleet.v1alpha1.Presence', 'AuthLogout') -> {<<"io.elkia.fleet.v1alpha1.Presence">>, <<"AuthLogout">>};
service_and_rpc_name_to_fqbins('io.elkia.fleet.v1alpha1.Presence', 'SessionGet') -> {<<"io.elkia.fleet.v1alpha1.Presence">>, <<"SessionGet">>};
service_and_rpc_name_to_fqbins('io.elkia.fleet.v1alpha1.Presence', 'SessionPut') -> {<<"io.elkia.fleet.v1alpha1.Presence">>, <<"SessionPut">>};
service_and_rpc_name_to_fqbins('io.elkia.fleet.v1alpha1.Presence', 'SessionDelete') -> {<<"io.elkia.fleet.v1alpha1.Presence">>, <<"SessionDelete">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.Member">>) -> member;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.MemberAddRequest">>) -> member_add_request;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.MemberAddResponse">>) -> member_add_response;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.MemberRemoveRequest">>) -> member_remove_request;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.MemberRemoveResponse">>) -> member_remove_response;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.MemberUpdateRequest">>) -> member_update_request;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.MemberUpdateResponse">>) -> member_update_response;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.MemberListRequest">>) -> member_list_request;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.MemberListResponse">>) -> member_list_response;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.AuthLoginRequest">>) -> auth_login_request;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.AuthLoginResponse">>) -> auth_login_response;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.AuthRefreshLoginRequest">>) -> auth_refresh_login_request;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.AuthRefreshLoginResponse">>) -> auth_refresh_login_response;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.AuthHandoffRequest">>) -> auth_handoff_request;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.AuthHandoffResponse">>) -> auth_handoff_response;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.AuthLogoutRequest">>) -> auth_logout_request;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.AuthLogoutResponse">>) -> auth_logout_response;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.Session">>) -> session;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.SessionGetRequest">>) -> session_get_request;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.SessionGetResponse">>) -> session_get_response;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.SessionPutRequest">>) -> session_put_request;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.SessionPutResponse">>) -> session_put_response;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.SessionDeleteRequest">>) -> session_delete_request;
fqbin_to_msg_name(<<"io.elkia.fleet.v1alpha1.SessionDeleteResponse">>) -> session_delete_response;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(member) -> <<"io.elkia.fleet.v1alpha1.Member">>;
msg_name_to_fqbin(member_add_request) -> <<"io.elkia.fleet.v1alpha1.MemberAddRequest">>;
msg_name_to_fqbin(member_add_response) -> <<"io.elkia.fleet.v1alpha1.MemberAddResponse">>;
msg_name_to_fqbin(member_remove_request) -> <<"io.elkia.fleet.v1alpha1.MemberRemoveRequest">>;
msg_name_to_fqbin(member_remove_response) -> <<"io.elkia.fleet.v1alpha1.MemberRemoveResponse">>;
msg_name_to_fqbin(member_update_request) -> <<"io.elkia.fleet.v1alpha1.MemberUpdateRequest">>;
msg_name_to_fqbin(member_update_response) -> <<"io.elkia.fleet.v1alpha1.MemberUpdateResponse">>;
msg_name_to_fqbin(member_list_request) -> <<"io.elkia.fleet.v1alpha1.MemberListRequest">>;
msg_name_to_fqbin(member_list_response) -> <<"io.elkia.fleet.v1alpha1.MemberListResponse">>;
msg_name_to_fqbin(auth_login_request) -> <<"io.elkia.fleet.v1alpha1.AuthLoginRequest">>;
msg_name_to_fqbin(auth_login_response) -> <<"io.elkia.fleet.v1alpha1.AuthLoginResponse">>;
msg_name_to_fqbin(auth_refresh_login_request) -> <<"io.elkia.fleet.v1alpha1.AuthRefreshLoginRequest">>;
msg_name_to_fqbin(auth_refresh_login_response) -> <<"io.elkia.fleet.v1alpha1.AuthRefreshLoginResponse">>;
msg_name_to_fqbin(auth_handoff_request) -> <<"io.elkia.fleet.v1alpha1.AuthHandoffRequest">>;
msg_name_to_fqbin(auth_handoff_response) -> <<"io.elkia.fleet.v1alpha1.AuthHandoffResponse">>;
msg_name_to_fqbin(auth_logout_request) -> <<"io.elkia.fleet.v1alpha1.AuthLogoutRequest">>;
msg_name_to_fqbin(auth_logout_response) -> <<"io.elkia.fleet.v1alpha1.AuthLogoutResponse">>;
msg_name_to_fqbin(session) -> <<"io.elkia.fleet.v1alpha1.Session">>;
msg_name_to_fqbin(session_get_request) -> <<"io.elkia.fleet.v1alpha1.SessionGetRequest">>;
msg_name_to_fqbin(session_get_response) -> <<"io.elkia.fleet.v1alpha1.SessionGetResponse">>;
msg_name_to_fqbin(session_put_request) -> <<"io.elkia.fleet.v1alpha1.SessionPutRequest">>;
msg_name_to_fqbin(session_put_response) -> <<"io.elkia.fleet.v1alpha1.SessionPutResponse">>;
msg_name_to_fqbin(session_delete_request) -> <<"io.elkia.fleet.v1alpha1.SessionDeleteRequest">>;
msg_name_to_fqbin(session_delete_response) -> <<"io.elkia.fleet.v1alpha1.SessionDeleteResponse">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'io.elkia.fleet.v1alpha1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "v1alpha1_fleet.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["v1alpha1_fleet.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["v1alpha1_fleet"].


get_msg_containment("v1alpha1_fleet") ->
    [auth_handoff_request,
     auth_handoff_response,
     auth_login_request,
     auth_login_response,
     auth_logout_request,
     auth_logout_response,
     auth_refresh_login_request,
     auth_refresh_login_response,
     member,
     member_add_request,
     member_add_response,
     member_list_request,
     member_list_response,
     member_remove_request,
     member_remove_response,
     member_update_request,
     member_update_response,
     session,
     session_delete_request,
     session_delete_response,
     session_get_request,
     session_get_response,
     session_put_request,
     session_put_response];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("v1alpha1_fleet") -> 'io.elkia.fleet.v1alpha1';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("v1alpha1_fleet") -> ['io.elkia.fleet.v1alpha1.Cluster', 'io.elkia.fleet.v1alpha1.Presence'];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("v1alpha1_fleet") ->
    [{'io.elkia.fleet.v1alpha1.Cluster', 'MemberAdd'},
     {'io.elkia.fleet.v1alpha1.Cluster', 'MemberRemove'},
     {'io.elkia.fleet.v1alpha1.Cluster', 'MemberUpdate'},
     {'io.elkia.fleet.v1alpha1.Cluster', 'MemberList'},
     {'io.elkia.fleet.v1alpha1.Presence', 'AuthLogin'},
     {'io.elkia.fleet.v1alpha1.Presence', 'AuthRefreshLogin'},
     {'io.elkia.fleet.v1alpha1.Presence', 'AuthHandoff'},
     {'io.elkia.fleet.v1alpha1.Presence', 'AuthLogout'},
     {'io.elkia.fleet.v1alpha1.Presence', 'SessionGet'},
     {'io.elkia.fleet.v1alpha1.Presence', 'SessionPut'},
     {'io.elkia.fleet.v1alpha1.Presence', 'SessionDelete'}];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("v1alpha1_fleet") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.Member">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.SessionPutRequest">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.SessionGetRequest">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.SessionDeleteRequest">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.MemberUpdateRequest">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.MemberRemoveRequest">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.MemberListRequest">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.MemberAddRequest">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.AuthRefreshLoginRequest">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.AuthLogoutRequest">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.AuthLoginRequest">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.AuthHandoffRequest">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.SessionPutResponse">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.SessionGetResponse">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.SessionDeleteResponse">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.MemberUpdateResponse">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.MemberRemoveResponse">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.MemberListResponse">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.MemberAddResponse">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.AuthRefreshLoginResponse">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.AuthLogoutResponse">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.AuthLoginResponse">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.AuthHandoffResponse">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.Session">>) -> "v1alpha1_fleet";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.Cluster">>) -> "v1alpha1_fleet";
get_proto_by_service_name_as_fqbin(<<"io.elkia.fleet.v1alpha1.Presence">>) -> "v1alpha1_fleet";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"io.elkia.fleet.v1alpha1">>) -> ["v1alpha1_fleet"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.19.7".

gpb_version_as_list() ->
    [4,19,7].

gpb_version_source() ->
    "file".
